<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technologies on ゆーすけべー日記</title>
    <link>https://yusukebe.com/tags/technologies/</link>
    <description>Recent content in Technologies on ゆーすけべー日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>© Copyright yusukebe.com</copyright>
    <lastBuildDate>Thu, 03 Oct 2013 18:56:00 +0900</lastBuildDate>
    
	<atom:link href="https://yusukebe.com/tags/technologies/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PerlベースのWebアプリ作成を「委譲」する際のスキルチェックリスト20！</title>
      <link>https://yusukebe.com/posts/2013/1003095639/</link>
      <pubDate>Thu, 03 Oct 2013 18:56:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/1003095639/</guid>
      <description> え〜とあるアプリのバックエンドを僕一人が書いてるのですが、 さすがにキツくなってきたので大工事をして「楽に」分業出来るようにしています。 その構成はちょいと置いといて〜 ウマく行けば「とある部分」を誰かに任せることになりますよね。 すると「弊社は（そのための）エンジニア募集中です！」という展開をご期待かもしれませんが、 もう既にアサインが済んだので「弊社はエンジニアを募集しておりません！」すいません... m(__)m
本来ならばその「とある部分」の実装においては僕がメインで使っているPerlじゃなくても、 PHPでもRubyでもPythonでもなんでも良かったのですが、 当の担当する方が「Perl書けます」とのことで「じゃあPerlでいこう」という展開になってます...
ただ、全然、彼のスキルセットをまだ分かってないので、これから話すという段階なんすよね... そこで、僕、人事的なこととかやったことないので、なんとも言えないかもしれませんが、 とりあえず「ピンポイントで求めている」能力といいますか経験をピックアップしてみました。 うんで、足りない部分があれば僕が補いつつ、やっていこうかと！そしたら結果、 チェックリスト的に使える20個にまとまったのでどうせならってことで共有してみますね。 タイトルにもある通り「PerlベースのWebアプリ」をつくるのに確認したい点が列挙されてます。 が、僕らがこれからつくる「とある部分」に関して特化しているので一般的ではない点もあることはご考慮してください！
 
 HTML/CSS/JSが無理なく書ける Perlのプリミティブなデータ表現、つまりスカラー、配列、ハッシュを理解している リファレンスを使いこなして複雑なデータを表現したり操作出来る bless関数によるオブジェクト作成とMoose/Mouse/Mooの使用 システムPerlではなくperlbrewもしくはplenvでコンパイルしたperlを利用している cpanシェルではなくcpanmでモジュールをインストールしている PSGIについてアプリの返却値が配列リファレンスである等、仕様についておおよそ知ってる .psgiファイルを書いてPlack::Middleware::*を使った経験がある Catalyst/Mojolicious/Amon2などWeb Application Frameworkを使ったアプリ制作経験 Cartonの利便性について語れる URI/LWP::UserAgent/JSONあたりのモジュールを組み合わせWeb APIを利用出来る PSGI互換サーバによる本番環境の構築、デーモン化 nginx+リバースプロキシなどによるフロント+アプリサーバ構成をつくれる 静的コンテンツ配信の最適化、フロントエンドのチューニングが出来る MySQL/memcachedの環境構築、運用経験 何らかの形でMySQL/memcachedをPerlコードで利用出来る TAPを理解しTest::Moreを使ったことがある Amazon AWSに対して例えばec2など、経験とノウハウを多少でも持っている GearmanなどのJob Queueを使用して非同期という概念を把握している 最低限のGitコマンドを理解している   
まぁ、あとは僕の本2つを読んでもらえるといいかも！
 Webサービスのつくり方 ~「新しい」を生み出すための33のエッセイ (Software Design plus)posted with amazlet at 13.10.03  和田 裕介 技術評論社 売り上げランキング: 58,406
 Amazon.co.jpで詳細を見る    
 Perlについて語ろうposted with amazlet at 13.10.03  和田裕介 (2013-03-13)
売り上げランキング: 3,260
 Amazon.co.jpで詳細を見る    </description>
    </item>
    
    <item>
      <title>Perl徹底攻略とWeb開発の基礎徹底攻略が出ます</title>
      <link>https://yusukebe.com/posts/2013/0718220836/</link>
      <pubDate>Fri, 19 Jul 2013 07:08:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0718220836/</guid>
      <description>WEB+DB PRESS plusのムック本として
 Perl徹底攻略 Web開発の基礎徹底攻略  の2冊がいつもお世話になっている技術評論社さんから来週火曜日23日あたりに出ます。どちらとも以前WEB+DB PRESSに寄稿した僕の記事が一部もしくはだいぶ修正して掲載されています。著者として献本いただき昨日手に入れましたよ。

僕が関係している記事は Perl徹底攻略 だと、
 Part.3 応用と実践 第1章「YouTube Data APIから学ぶWeb APIのキホン」 Pert.6 小飼弾のPerlハッカーに逢いたい♥「和田 裕介（ゆーすけべー）」  Web開発の基礎徹底攻略 は
 一般記事「Twitter時代の技術者コミュニケーション術」  です。特に「YouTube Data APIから学ぶWeb APIのキホン」の場合、初出の記事ではTwitter Search APIを題材にしていたのですがいかんせんAPIがVersion 1.1へ移行した関係上、OAuthの認証が必要になり、それを解説していたら本質から外れてしまうと思い、YouTubeのAPIを利用した解説記事に全面リニューアルしました。
ざーっと眺めてみたんですが、2つの関連記事が掲載されていることもありPerl徹底攻略の方はだいぶ思い入れというか、オーガナイズしてくれているYappoさんの巻頭記事とか読んでいるとここまでまとまった形で出版できて皆さんよかった！！と 熱いものが混み上がる 感じです。ってか個人的には表紙のこの並びがヤバい。

ちょw ラリー、宮川さん、そして、俺とかwww
 さて、肝心の内容、Perl徹底攻略 に関しては一部気になるモノを列挙すると
 冒頭にらくだ本の訳者である近藤嘉雪さんの伝家の宝刀的、丁寧なリファレンス入門があり初心者も取っ付きやすい ikasam_aさんによるCarton &amp;amp; cpanmの記事はおそらく中でも最新の記事でホットトピックス。個人的にCarton便利やわーって使いだした身なので読んでもらいたい 「Amon2によるWebアプリケーションの高速開発」とか「Xslate」の記事は中の人が書いてあるので分かりやすいし、モジュールのコンセプトが分かる naoyaさんによる書き下ろしの「モダンPerlリファクタリング」はテストとCIを使ってコードをリファクタリングしている様子をmd2inaoという技術評論社さん入校向けのプログラムを題材にして解説してあってすごくいい パフォーマンス改善、ロギングなども網羅してある Perlで音ならすとかAcmeモジュールの話もある  って感じで凝縮感たまらないっす。
Web開発徹底攻略 の方はぶっちゃけあんままだ読んでないのですが、これからWeb開発をはじめるぞーって人向けにかなり優しくトピックが設定されてます。
自分がまさに Perlで / Web開発 を行っているので献本もらっていなかったら即買いな2冊であり、興味がある方だったら手に取ってみたり、ポチってみたりするといいんではないでしょうかね！
 Perl徹底攻略 (WEB+DB PRESS plus)posted with amazlet at 13.07.18  大沢 和宏 cho45(さとう) 小林 篤 和田 裕介 嶋田 裕二(xaicron) 牧 大輔(lestrrat) 奥 一穂 広木 大地 伊藤 直也 長野 雅広 藤原 俊一郎 伊藤 智章 まかまか般若波羅蜜 小飼 弾 近藤 嘉雪 中川 勝樹 宮川 達彦 tokuhirom 藤 吾郎(gfx) 村瀬 大輔 技術評論社 売り上げランキング: 132</description>
    </item>
    
    <item>
      <title>最近の開発周辺事情と職質テックトーク</title>
      <link>https://yusukebe.com/posts/2013/0709121252/</link>
      <pubDate>Tue, 09 Jul 2013 21:12:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0709121252/</guid>
      <description>ここ最近の僕の開発で指標になっているのは「システムとしてのクオリティを上げるか」であり、それって当然のごとく行われているかもしれなくて、いわゆる Quality Assurance = QA なんて言葉があったり、某社では Test Engineer の方がいたりするわけです。ただ、あまりにも僕としては「ずさんな」ところが多々あると考えています。「よしAを変更した → デプロイ → Bがエラー出てる」なんてことがないように「機能が望むように動作しているか」をテストコードで担保しようと努めている次第です。例えば、先日サービス内で使用している Flickr API の一部メソッドが正常に機能しない（ どんなに一般的な語彙で探しても検索結果が空で返ってくる ）なんてことがありましたが、テストコードのおかげで問題の切り分け、つまり、これは本当に Web API が壊れているのだ！ということがテストスクリプトを走らせるだけで分かって「あ〜 テスト書いててよかったですね」と改めて思いました（ Flickr API はその後、開発者同士のメーリングリストに投げかけたところ、同じ症状で悩んでいる人、さらには中の人も現れ、直してくれました ）。
前置きが長くなりましたが、こうしたテストも含め開発周辺の便利なリソースやツールで最近使っているものを紹介してみます。ちなみに使用言語はPerl、Web Application Framework に Mojolicious を使った、公称月間1億PV以上のWebサービス / モバイルアプリのバックエンド例で、僕一人が開発を担当しています。
GitHub Private Repository Git レポジトリに GitHub の Private Repository を利用。そもそも開発、運用にまつわるリソースはなるべく出来るものに関してはアウトソースする方針にしています。アウトソースと言っても人を使うのではなく便利なサービスに委譲する形です。そのためにどのサービスを使うかは慎重に身構えつつ、時にはノリで選ぶ感じです。GitHub は無料で使う分には Public Repository しか持てないので、月額$12の Small プランの契約をして10個の Private Repository が持てる状態になっています。Git の Repository と クールな UI を構築したりマネージするコストを考えるとアリじゃないか！と考えています。
Carton v0.9.15 Perl における Ruby の Bundler に相当するのが Carton です。「v1.0.0 が出るまで API の変更の可能性がある！」... けれど、現行 CPAN に上がっている v0.9.15 を使っています。モジュールのバージョンまで面倒を見て依存性を解決して環境をつくることが可能です。例えば分かりやすい例を挙げると Mojolicious が最近メジャーバージョンアップして 3.xx 系から 4.xx 系にアップグレードしたのですが、どーしても 3.xx 系を使いたいよねぇ〜 なんて時は cpanfile でバージョン指定しちゃうことが出来ます。
 requires &#39;Mojolicious&#39;, &#39;== 3.97&#39;;  この cpanfile を用意して
 $ carton install  するといい具合に 3.</description>
    </item>
    
    <item>
      <title>YouTubeの再生リストをMetro UIで検索視聴出来る「Melodie」が出来た</title>
      <link>https://yusukebe.com/posts/2013/0531031337/</link>
      <pubDate>Fri, 31 May 2013 12:13:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0531031337/</guid>
      <description>明日から9日間USへ旅に出るのでその準備をしてたら、いつの間にか全く関係ないJavaScriptを書いていて結果的にこんなのが出来た... YouTubeの再生リストを検索して選ぶと連続再生で動画を見れるWebページ「 Melodie 」です。機能的にはYouTubeオフィシャルサイトで全く同じことが出来ちゃうんでまさに「車輪の再発明」なんだけど、 metro-bootstrap って言うWindows 8で取り入れられているMetro UIを実現するCSS/JSフレームワークを使ってみたりしたら、印象とか使い勝手が結構違って面白い。

君のラジオと同じようにWeb上のYouTube Playerとして使えるかと思います。動的な部分はJSオンリーで動かしているのでgithub pagesに置きました。気になる人は使って見てください！以下がページへのリンクになってます。
 Melodie  ちなみにmetro-bootstrapはTwitterのBootsrapをラップしてて「あーこういう使い方はありだなー」って気づきましたよ。</description>
    </item>
    
    <item>
      <title>DMMのWeb APIに今更気づいたので...</title>
      <link>https://yusukebe.com/posts/2013/0513232521/</link>
      <pubDate>Tue, 14 May 2013 08:25:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0513232521/</guid>
      <description>ムフフなビデオも網羅的に扱うDVDや動画の提供サービス「DMM」のWeb APIがいつの間にか公開していたらしく、なにぶんノーマークだったもので昨日の夜知ってビックリした。というかDMMは一生API出さないだろうなんて決め込んでいたのが良くなかったですね。

ってことでとあるAV女優の商品一覧を出力するようなスクリプトを書いてみました。API固有の「癖」でいくつか実装する際の注意すべきポイントがあるのでそれをまず紹介します。Perlコードですが参考になるかもです。
リクエストパラメータにはタイムスタンプがいる リクエストのパラメータにはタイムスタンプが必須です。形式は
2013-05-14 08:03:16
 というもの。僕はDateTime派なので、以下のコードで現在のタイムスタンプの文字列をつくっています（＊ある方から指摘を受けてコードを修正させていただきました！）。
 use DateTime; my $timestamp = DateTime-&amp;gt;now( time_zone =&amp;gt; &#39;Asia/Tokyo&#39; )-&amp;gt;strftime(&#39;%F %T&#39;); print &#34;$timestamp\n&#34;;  この文字列は後でAPIにリクエストを送る時に使います。
リクエストパラメータはeuc-jpでエスケープさせる イマドキじゃない！？リクエストのパラメータはeuc-jpでエスケープさせることが必要なのです。通常のutf-8でエスケープさせたパラメータ値を含むURLを構築するにはURIモジュールの「query_form」メソッドが重宝するのですが、今回の場合はURIモジュール使わない方がいい？ってことでハッシュでつくったパラメータのキーとバリューの組み合わせを、URLに落とし込むには以下のコードを記述しました。
 use URI::Escape qw/uri_escape/; use Encode; use utf8; my $params = { key1 =&amp;gt; &#39;値その1&#39;, key2 =&amp;gt; &#39;値その2&#39; }; my $url = &#39;http://affiliate-api.dmm.com&#39;; my $queries; for my $key ( keys %$params ) { my $value = uri_escape( encode( &#39;euc-jp&#39;, $params-&amp;gt;{$key} ) ); push @$queries, &#34;$key=$value&#34;; } $url .= &#39;?&#39; . join &#39;&amp;amp;&#39;, @$queries; print &#34;$url\n&#34;;  返却されるXMLもeuc-jp レスポンスとして返されるXMLもeuc-jpな作りになっております。とりあえず簡単にXML::SimpleでPerlのデータ構造へパースする場合この文字コードの関係で細工がいります。「$url」変数に正しいリクエストURLがあるとした場合のコード。
 use LWP::UserAgent; use XML::Simple qw//; use YAML; my $ua = LWP::UserAgent-&amp;gt;new; my $res = $ua-&amp;gt;get($url); die $res-&amp;gt;status_line if $res-&amp;gt;is_error; my $content = encode(&#39;utf-8&#39;,$res-&amp;gt;content); $content =~ s!</description>
    </item>
    
    <item>
      <title>各種シェアリンク実装まとめ</title>
      <link>https://yusukebe.com/posts/2013/0505004717/</link>
      <pubDate>Sun, 05 May 2013 09:47:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0505004717/</guid>
      <description>自分で持っているサイトのURLをTwitterで「ツイートする」みたいなのをHTMLのaタグのhref属性値、 つまりリンクで指定する方法。 いちいち各種サイト行ったり、過去のソース漁るのもメンドクサイのでまとめてみます。対象プラットフォームは
 Twitter Facebook LINE カカオトーク  です。スマホアプリも入っていてカスタムスキーマで呼び出します。 前提としてシェア対象のページに「URL」と「タイトル」が存在してて、それぞれURIエスケープ出来ることとします。 表示の際に画像のボタンを使ったりしたいところですが、ここでは分かりやすいように「XXXでシェアする」っていうテキストリンクに統一してみます。 また、HTMLタグが長くなるので途中でぶった切ってるところがありますが、適宜くっつけて考えてくださいね。
Twitter  &amp;lt;a href=&#34;https://twitter.com/intent/tweet? url={URLをURIエスケープしたもの}&amp;amp;text={タイトルをURIエスケープしたもの}&#34;&amp;gt; Twitterでシェアする&amp;lt;/a&amp;gt;  Facebook  &amp;lt;a href=&#34;https://www.facebook.com/sharer/sharer.php? u={URLをURIエスケープしたもの}&amp;amp;t={タイトルをURIエスケープしたもの}&#34;&amp;gt; Facebookでシェアする&amp;lt;/a&amp;gt;  LINE URLとタイトルを含んだ「テキスト」をつくって...
 &amp;lt;a href=&#34;line://msg/text/{テキストをURIエスケープしたもの}&#34;&amp;gt; LINEでシェアする&amp;lt;/a&amp;gt;  カカオトーク こいつが結構やっかい。必要なパラメータがやたら多いでこちらの公式解説で確認した方がいいでしょう。
 &amp;lt;a href=&#34;kakaolink://sendurl? msg={タイトルをURIエスケープしたもの}&amp;amp;url={URLをURIエスケープしたもの} &amp;amp;appid={サイトのドメインをURIエスケープしたもの} &amp;amp;appname={サイトの名前をURIエスケープしたもの}&#34;&amp;gt; カカオトークでシェアする&amp;lt;/a&amp;gt;  Webアプリのテンプレート内での実装例 Webアプリのテンプレートでどうやるか？疑似コードっぽくかつテンプレート内にコード書いてるけどこんな具合。
 % use URI::Escape qw/uri_escape_utf8/; % my $url = &#34;http://yusukebe.com/&#34;; % my $title = &#34;ゆーすけべー日記&#34;; &amp;lt;a href=&#34;https://twitter.com/intent/tweet?url=&amp;lt;%= uri_escape_utf8($url) %&amp;gt;&amp;amp;text=&amp;lt;%= uri_escape_utf($title) %&amp;gt;&#34;&amp;gt; Twitterでシェアする &amp;lt;/a&amp;gt;   
アプリ起動に関して、アプリを持っていない場合はAppStoreに飛ばすとかハックがあるので興味ある人はググってください。当然ですが、現時点での方法なんで今後変わるかもしれないのでご注意！</description>
    </item>
    
    <item>
      <title>Android端末を持ってなくてもエミュレータでGoogle Play配布アプリを動かす</title>
      <link>https://yusukebe.com/posts/2013/0412033033/</link>
      <pubDate>Fri, 12 Apr 2013 12:30:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0412033033/</guid>
      <description>iPhoneをずっと使っているのでAndroid端末、僕持ってないんですよねー。とはいえAndroidの環境でアプリの動作確認をしたかったりします。Nexus7のWifiモデルを買ってもいいんだけど、早急にGoogle Playで配布されているアプリをAndroidで検証したかったので、調べつつそれが出来ないかやってみました。結果、Android SDKの中にあるAndroidのエミュレータで動かすことに成功したので、その行程を紹介します。現時点で出来るってことで今後不可能になるかもってのと、自己責任でお願いします。
Android SDKが用意されていることを前提として、ざっくりと行程を紹介すると
  BlueStacksというソフトをインストールする そのソフト内でGoogle Playからダウンロード出来て動かせる、ただ使い難いのでSDKのエミュレータを使う  Device IDなるAndroidアプリがあるのでこいつを入れてアカウントと紐づいたデバイスのIDを取得する デバイスのIDが分かればAPK DownloaderというChromeのエクステンションで.apkをゲットできる SDKのエミュレータを起動 .apkをエミュレータ内に仕込んでインストール 動くー  以下それぞれ詳細
 
BlueStacks アプリの.apkファイルさえあればSDKのエミュレータで動かすことが出来るんだけど、Google Playの配布元からは工夫しないとゲット出来ない。で工夫する際にGoogleのアカウントと紐づいたデバイスのIDが必要なんだけど、端末を持っていない僕としてはそれが無いんですよ。そこでこのBueStacksというPC/Mac用のソフトの出番です。

BlueStacksについてどうなってるのか？よく理解してないんだけど、端末としてエミュレートされているっぽい。Google Play上のアプリをダウンロードしてインストール、そして、ソフト内で動かすことが出来ます。ただそれだと挙動が遅かったり、表示がずれたりして検証にはあんまり向いてない。けれどGoogle Playにある「Device ID」って言うソフトを使えば仮想だけど固有っぽいデバイスのIDを取得することが出来ます。
とりあえずそのアプリを使ってデバイスIDをメモっておく。
APK Downloader デバイスIDさえあれば、ChromeのエクステンションであるAPK Downloader経由でGoogle Play上の.apkファイルを手に入れることが出来ます。

エミュレータに仕込む Android SDKから希望のエミュレータを起動させます。そしてその後
 $ {Android SDKへのパス}/sdk/platform-tools/adb install ~/Download/xxxxx.apk  というコマンドを打てばエミュレータにインスコされて、動く！

 
ってことでAndroidのデバグが実機持ってなくても出来ましたよー。</description>
    </item>
    
    <item>
      <title>Webアプリエンジニアとしてのデザインとブリッジ</title>
      <link>https://yusukebe.com/posts/2013/0321014424/</link>
      <pubDate>Thu, 21 Mar 2013 10:44:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0321014424/</guid>
      <description>自分はまさに「アプリケーション」をつくることに特化したエンジニアもしくはクリエータだと思っているんだけど、 その件で考えていることを散文的に書いてみる。
最近では複数のメンバーやパートナーの方と仕事をすることが多いんだけど、その時に自分にとって有効として働くのはデザイン力である。デザインというのは広義の意味で使っていて、決して「Webページの見栄えをつくる」ようなデザインとはちと違う。Wikipediaの解説が的を射ているので紹介しよう。
 デザインの語源はデッサン(dessin)と同じく、&#34;計画を記号に表す&#34;という意味のラテン語designareである。 つまりデザインとは、ある問題を解決するために思考・概念の組み立てを行い、それを様々な媒体に応じて表現することと解される。
デザイン - Wikipedia より一部引用。
 例えば、みんなで話していて「これがやりたい！」とアイデアが生まれた時に、それを実際のWebアプリの仕様に落とし込む作業や思考をめぐらせる行為を僕はデザインと呼んでいる。仕様ってのは堅苦しい書類じゃなくてもよく、データやクラスの構造とかUIの方針だったりする。まぁ、コーディングへ向かう手間に必要な想像力である。先日のAmazon Web Service（AWS）関係のイベントで考えたんだけど、インフラの構成をどう組むか？もデザインの対象になる。AWSを使う場合だったら「KVSが必要だ！SimpleDBじゃなくて速度が求められるのでDynamoDBを使おう」と言った具合。様々なAWSのサービスをどのように構成するかのパターン集が「CDP＝クラウドデザインパターン」と名付けられていて、まさに今取り上げているデザイン行為を助けるための「デザインパターン」なわけである。
このデザインをするという行為は経験を積まないと難しく、経験が浅いと遅いものになる。自分の場合は大学生の頃からモノづくりの研究室にいたり、小さいWebアプリをたくさんつくってきたので、そこそこ速くデザインにおける思案が出来るようになってきた気がする。もちろんまだまだ精進が足りない点が多々あるし、深堀してない領域があるんだけど、ようはアイデアからデザインを行う「瞬発力」みたいなものが大事かと感じている。
さてデザインがなんで大事かってことだけど、そもそもそれが無いとアプリがつくれないし、工数的な意味で見積もりが現実的なものになるかを決定付けるものだし、デザイン力があるとモノが速くつくれる。この辺りは自明なんだけど、人とコミュニケーションする時に役に立つかも、と最近では思いだしている。例えば企画側から指示が出た場合に即座にアプリケーションのデザインが出来れば会話がスムーズに動くかもしれない。インフラまで想像力が働けばDevOpsのような考え方にも通じるだろう。
今一緒にプロジェクトを動かしている非エンジニアなメンバーはそれぞれ専門分野の能力だけではなく、理解力がある人ばかりなので、エンジニアとしてはデザイン力を働かせて彼らに負けないようにやり取りのスピードを上げることで貢献をしたい。
デザインと共に取り上げたいのは「ブリッジ能力」と個人的に呼んでるもので上記したコミュニケーションも含まれるんだけど、これもまた開発者として付加価値を付けるのに重要でもある。とあるスマホアプリの中国人のブリッジ・エンジニアの方は現地の人に的確な指示を出し、企画の要望やバックエンドの仕様を把握している。すると、彼を評価する軸はコードが書けるか？という部分は内包しつつも、そのブリッジ能力となるのである。
勝手な私感でもあるがオフショアが盛んになるとエンジニアにとってのプログラミングスキル以外の価値が問われることになる。また、オフショアどうこう関係なく、一人の個性としても、今回取り上げたデザイン力とブリッジ能力は身につけたいことである。
体現しつつトレーニングをしている事柄、デザインとブリッジについて書いてみたがまだフワフワと説明するしか出来ないのでこの辺りを体系だって解釈したいと考えている今日この頃。繰り返しになりますが、こうした能力をつけつつ、コーディングレベルも上げたいと思います。</description>
    </item>
    
    <item>
      <title>AWS運用。1ヶ月経ってからのTips箇条書き</title>
      <link>https://yusukebe.com/posts/2013/0313070953/</link>
      <pubDate>Wed, 13 Mar 2013 16:09:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0313070953/</guid>
      <description>今週末の金曜日、3月15日に「JAWS DAYS 2013」のパネルディスカッションのパネラーとして呼ばれておりましてー。 風呂グラマーのmasuidriveさんとTreasure Dataの太田さんとお話をするらしく多少ビビってる僕です。
 プログラム・スピーカー紹介 | JAWS DAYS 2013 | 2013/3/15（金）～16日（土）東京ビッグサイトで開催！  実はこのAmazon Web Serviceユーザーにおける祭典「JAWS DAYS」のイベントに呼ばれた前日。 ちょうどボケてを某さくらVPSからEC2含むAWSへせっせと移行していましてー。 ま、つまりは「AWSでこれからバリバリ運用始めるぜ！」ってタイミングでのお呼ばれでしたw
イベント自体はおもろい事話せればいいなーとは思いつつ、AWSへ移行して、もしくはAWSへの準備の段階で得たTipsを箇条書きでまとめてみます。ちなみに、その移行以前からS3とCloudFrontに限っては画像ストレージ、配信というユースケースで利用していました。その関係あってか、Amazonの営業と技術の方と数回の打ち合わせをしてからのー「ほぼ全リソースをAWSへ移行」となりました。使っているAWSサービスは以下となります。
 S3 CloudFront EC2 RDS ELB CloudWatch Route53 SES  では以下にパラパラとTips的なことを公開できる範囲で書いていきます。
 
 Sorry Pageは出せないけどLoad BalancerはELBに任せよう（追記: Sorry PageはRoute53と組み合わせると出来そうだってことが分かったばかりでやってない） Webサイト、Web APIなどサービスドメインごとにELBは分けた方がいい、耐障害性が上がる EC2それぞれにnginx＋Starman/Starlet（Perlのアプリケーションサーバ）という構成はアリ ELBがL4スイッチ、nginxがL7スイッチという感覚 転送量について、S3とCloudFrontの中間キャッシュという技があるが、当然CloudFrontとクライアント間における解決策ではない むしろクライアント側でキャッシュすべき CloudFrontには10TB/月の転送量を約束するReserved Capacityという割引制度がある Reserved Instanceに限らず、AWSには割引の制度が色々あるので使用料が大きい場合は相談した方がいいかも AMIはサーバミドルウェア、アプリ、レポジトリが入った状態で固めるのがオススメ Chefとか使えばそんなことないかも、だけど、俺は今の所AMIで管理している（デメリットもある） AutoScalingは無し、手動でやろう。そういうユーザも多い それぞれの操作はWebコンソールから。あえてコマンドを覚える必要はないと思う ec2ssh はホスト名コピペとかしなくていいからオススメ RDSではmysqlテーブルにslow query log相当の物が入ってる CloudWatchは2週間しかデータを保持しないから、他にも監視システムを入れるのをオススメされた 元々使ってるCloudForecast/GrowthForecastとか通知システムとかをそのまま利用 AMIはインスタンスサイズが違ってもOK、リージョンまたぐとダメ EC2はMedium使うよりSmallインスタンスをたくさん使った方がCPUリソースを使えるケースがある 性能表に書いてある「ECU」ってのは非常に性能の低いCPUと見なせる なのでm1.largeではなく、ハイCPUインスタンスのc1.mediumをメインで利用している EC2からメール送信すると諸々問題あるのでSES経由で配信。APIを叩くのではなくSMTPサーバとして利用 サポートに入ると全体の1割増し、電話24時間サポートが付く、困ったときに入ればよいかと Reserved Instanceは購入の瞬間にクレジットカード会社に請求が発生、通常に買い物をするのと同じ なんだかんだ言って、当初考えていた料金の1.5倍くらいに請求額がいってしまったので怖いw クレジットカードの限度額等の確認、なるべく法人で専用のカードが良い、クラウド破産に注意   
AWSを使っての全体的な感想としては、すんなりとインフラが揃ったって感じで、後はアプリのつくりとか運用のテクニック、つまり自分の腕次第だなーってものです。大昔といっても3年くらい前にEC2は触ってたのですが、エラい色んなサービスが出ててビックリしましたねー。AWSコンソールでほぼなんでも出来ちゃうのも便利です。
ってことで箇条書きでAWSにおける僕なりのTipsや伺った話をまとめてみました。興味のある方は3月15日（金）の「JAWS DAYS 2013」にお越し下され！</description>
    </item>
    
    <item>
      <title>Facebookイベント参加者の名刺画像を自動生成！</title>
      <link>https://yusukebe.com/posts/2013/0311050010/</link>
      <pubDate>Mon, 11 Mar 2013 14:00:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0311050010/</guid>
      <description>@shinotraさんが先日行われたHokkadio.pm #9で面白いことを発表してました。その一つがATNDのイベント参加者の名刺画像を自動生成するというモノ。神奈川にいながら北海道の熱気を感じつつ、昔同じようなことを「Facebookのイベントを対象に」やったなーと思って、もう一度最初から書き直してみました。イベント参加者のリストを取得し、名刺っぽい画像を出力するって代物です。Facebookでの認証処理から画像生成まで興味深いポイントを含んだWebアプリになったので、つくる行程から解説してみます。
ちなみに実装はPerl、WebフレームワークにはMojoliciousを使っていますが、他の言語でも流れは同じなので参考にしてください。
Facebook認証を行う まず、Facebookから情報を取得するためにアプリケーション登録をします。 「facebook developers」のページからそれが出来るのでその後以下の文字列を取得します。
 アプリID アプリのシークレットキー  PerlでFacebookのAPIを扱うには、内部実装は置いておいてw Facebook::Graphというモジュールが便利です。使い方はこんな感じ。
アプリIDとシークレットキーを指定してインスタンスを作成。postback パラメータってのはFacebookの認証画面に行った後に戻ってくるアプリケーションのパスを指定する。
 use Facebook::Graph; my $fb = Facebook::Graph-&amp;gt;new( app_id =&amp;gt; &#39;your_app_id&#39;, secret =&amp;gt; &#39;your_secret&#39;, postback =&amp;gt; &#39;http://localhost:3000/callback&#39; );  Facebook側で認証するためのURLを作成する。基本的に「/login」とかそういうパスにアクセスされたら、この「$uri」へリダレイクトさせる。
 my $uri = $fb-&amp;gt;authorize-&amp;gt;extend_permissions(qw/user_events/)-&amp;gt;uri_as_string;  インスタンス作成時に postback で指定したパスへユーザーがリダイレクトされるので、その時にくっついていてくる code パラメータを食わせると access_token が取得可能になる。access_token の文字列などはセッションで覚えておくと吉。
 $fb-&amp;gt;request_access_token($self-&amp;gt;req-&amp;gt;param(&#39;code&#39;)); my $access_token = $fb-&amp;gt;access_token;  次回以降Facebook APIへアクセスするにはセッションから access_token を取得し、access_token メソッドの引数に渡しておく。
 $fb-&amp;gt;access_token($access_token);  これを踏まえて、Mojolicious::Liteでの実装はこんな感じになります。helperでFacebook::Graphのインスタンスを取得する「fb」メソッドをはやしていますが、ここはもう少し工夫できるかもですね。
 #!/usr/bin/env perl use Mojolicious::Lite; use Facebook::Graph; helper &#39;fb&#39; =&amp;gt; sub { my $c = shift; Facebook::Graph-&amp;gt;new( app_id =&amp;gt; &#39;your_app_id&#39;, secret =&amp;gt; &#39;your_secret&#39;, postback =&amp;gt; $c-&amp;gt;req-&amp;gt;url-&amp;gt;base . &#39;/callback&#39;, ); }; get &#39;/&#39; =&amp;gt; sub { my $self = shift; my $user; if ( my $access_token = $self-&amp;gt;session(&#39;access_token&#39;) ) { my $fb = $self-&amp;gt;fb; $fb-&amp;gt;access_token($access_token); $user = $fb-&amp;gt;fetch(&#39;me&#39;); } $self-&amp;gt;stash-&amp;gt;{user} = $user; $self-&amp;gt;render(&#39;index&#39;); }; get &#39;/login&#39; =&amp;gt; sub { my $self = shift; my $fb = $self-&amp;gt;fb; my $uri = $fb-&amp;gt;authorize-&amp;gt;extend_permissions(qw/user_events/)-&amp;gt;uri_as_string; $self-&amp;gt;redirect_to($uri); }; get &#39;/callback&#39; =&amp;gt; sub { my $self = shift; my $fb = $self-&amp;gt;fb; $fb-&amp;gt;request_access_token( $self-&amp;gt;req-&amp;gt;param(&#39;code&#39;) ); $self-&amp;gt;session( &#39;access_token&#39;, $fb-&amp;gt;access_token ); $self-&amp;gt;redirect_to(&#39;/&#39;); }; get &#39;/logout&#39; =&amp;gt; sub { my $self = shift; $self-&amp;gt;session( &#39;access_token&#39;, undef ); $self-&amp;gt;redirect_to(&#39;/&#39;); }; app-&amp;gt;start; __DATA__ @@ index.</description>
    </item>
    
    <item>
      <title>ちょっとしたプログラムを書く時（無意識的に）考えること</title>
      <link>https://yusukebe.com/posts/2013/0130155741/</link>
      <pubDate>Thu, 31 Jan 2013 12:57:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0130155741/</guid>
      <description>とある集まりがあってひょんなことから、とあるプログラムをその場で組んで遊んだ。 40行くらいの非常に簡素なPerlスクリプトだ。 どんなものかと言うと、そこにいたメンバーの一人が提案した小さなアイデアを叶えるもので、
 コマンドラインで実行するプログラム 引数に英単語を入力するとその意味を日本語で返してくれる ネットワークにつながれている環境を想定  ってもの。実際出来たプログラムは「eiwa」コマンド。 これを
 $ eiwa apple  のように実行すれば
 $ 『リンゴ』；リンゴの木  と意味が標準出力に出てくる。うん、これも十分なアプリケーションだ。 実際このように課題が設定されるとついつい熱くなってしまい小さなものでも楽しみながら作れる。 そして動いたときには嬉しいものである。
ところで、そばにいた他のメンバーにこのプログラムをどうやって作っていったか？を説明していたら面白いことに気づいた。
ところで、このスクリプトってどう考えて作ったんだっけ？俺。
 どのように考えればプログラムが作れるかを説明しているはずだが、はて、さきほどはそれほど「考える」作業をしていただろうか。この40行の「eiwa」プログラムを作るのに「考える」という作業をしたか？と言われれば、 「全く考えていない」とはさすがに言えないが「はい、考えてプログラムを書きました」とも答えられない。今回の場合は既に何回も書いた事があるようなスクリプトだったのである意味「型」が自分の中で作られていて無意識的にコードが浮かんで来てたから「考える」という作業をしていなかったという具合なんじゃないかと。
そこで興味を持ったのが「プログラムを書く時に考えること」である。無意識的でもいいがどのように自分は考えてちょっとしたプログラムを普段作っているのか？前置きが長くなったが、気になったので以下にまとめてみよう。
 
1. 仕様を自分で解釈する そうそう「eiwa」プログラムなんだけど、そもそも彼がアイデアを口にした段階では仕様ってのがはっきりしていなかった。だから、強引にも俺が実装出来る範疇で上記した通り仕様にまとめた。プログラムを書きだす前に、まずはそのプログラムへの要求と内部仕様や制約について「考える」もしくは「無意識的に考える」。
2. 使用技術を選定する なるべくどんな環境でも動くようポータブルにしたかったので「eiwa」プログラムは標準以外のCPANモジュールにあまり依存しないようにした。こうした条件も実は仕様なんだけど、それにあわせて、じゃあどういうライブラリを使って実現しようか、なんてのも考える。使用言語もそのうちの一つだし、その上に乗っかるモジュール、フレームワークをそれぞれの属性を理解しつつ選択する過程があるわけだ。
3. 過去作ったコードの流れを思い出す これって考えるって言うのか分からないけど、先ほど申した通り、コードをいくつか作っていくと似た機能に対応するコード部分が「型」のように頭の中で共通化してくる。eiwaの場合だと外部の英和辞書APIを呼んでいるので、APIを呼びだすPerlプログラミングのパターンを脳内で呼びだす感じ。
4. 手を動かす時は考えない？ 小さな「eiwa」プログラムレベルだったら手を動かしている時は頭を空っぽにして、これまで解説した「考え」を元にガッとコーディングしてしまう。ただ、今回の場合、外部のAPIを呼びだすので、そのAPI仕様を理解するために試行錯誤はしたがこれも、いわゆる「トライ＆エラー」を繰り返せばやり方が正確に分かるのであまり頭を使わないように思える。
5. 出来上がってから次を考える いざ出来上がると試しに実行しながら色々考える。うん。この段階が一番考えているかもしれない。 例えば「eiwa」があるんだったら「nichiei」もしくは「waei」もあっていいんじゃないか？とか...
 
大きな規模になるとまた「考える」というレベルが違ってくるかもしれないが、 だいたいこんな思考を巡らせてコードを書いている。とは言ってもまとめて面白かったのは、 コードを書いている最中よりもその前後の方が考えること多いってこと。 たくさんコードを書いて使える「型」を増やしてより「高いところ」を考えれるようになりたいですね。
 
追記 読んでもらった方からプログラミングを「スポーツ」みたいに行ってるね、っていうニュアンスのことを言ってもらった。 確かに身体化してるかもしれないですね。</description>
    </item>
    
    <item>
      <title>Webアプリのディレクトリ事情</title>
      <link>https://yusukebe.com/posts/2013/0130093800/</link>
      <pubDate>Wed, 30 Jan 2013 18:38:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0130093800/</guid>
      <description>現在進行中で開発・運用しているWebアプリのファイルとディレクトリが若干ゴチャゴチャしてたんで、整理したらだいーぶスッキリした。こんな感じ！
 MacBook@yusuke % tree -L 1 -F . ├── Makefile.PL ├── cli/ ├── config/ ├── deploy/ ├── etc/ ├── lib/ ├── log/ ├── psgi/ ├── public/ ├── sandbox/ ├── script/ ├── t/ └── templates/  ちなみにこのプロジェクトは以下が前提です。
 Perl製、WebのフレームワークはMojoliciousを使っている 一つじゃなくていくつかのアプリのエンドポイントがある つまり一つのModel、複数の「Contoroller郡」で構成されている  一個一個見て行こう！
 
Makefile.PL Perlプロジェクトをビルドするためのファイルだお。現状ではとりあえず「Module::Install」使っています。
cli/ CLI、つまりコマンドラインから実行する類いのスクリプトファイルが入っています。 cronなどで定期的に実行されるプログラムももちろんこの中。
config/ 設定ファイルを入れます。環境によってDBの接続先とかを変えたいからねっ♪ 最低でも「development.pl」と「production.pl」が入っていますな。 そうそう拡張子でも分かる通り、設定ファイルはPerlのスクリプトですね。YAMLとかはもう使いません。
deploy/ デプロイ＝サーバ環境への配置に使える便利なスクリプトが入っているよ。 作者の人 から「ステマよろ〜」と言われたので、ステマすると Cinnamon っていう薄いCapistranoみたいなすごく使いやすいデプロイツールの設定ファイルが入っているんだ。昨日から使いだしてるんだけどガチで、Cinnamonかわいいよ。
etc/ なんかどこに入れよっかなー？って迷った感じのファイルを入れてるよ。僕はDBのスキーマ定義ファイルが入ってるね。
lib/ Perlのライブラリ群だよ。一番肝心なところさ。ちなみに「MyApp」という名前のサービスだとしたら、 「lib/MyApp/Web/Controller」以下にコントローラを置いたり、「lib/MyApp/Model/Hoge.pm」というファイルにモデルの一つを定義したりしてるよ。この辺りの名前空間の切り分けが大事かもね。
log/ これはフレームワークが自動的に吐くログが入るよ。主に開発時にONにするね。
psgi/ 上記した通り複数アプリをこのディレクトリ内で扱っているから複数のPSGIファイルが存在するんだ。 だからこの中にぶち込んでる！
public/ 静的コンテンツを置く場所だよ。これもMojolicious標準で使われているディレクトリ構造に従っている。 フロントサーバに静的コンテンツの配信を任せたい時とかは、条件を指定してこのディレクトリを参照させるね。
sandbox/ 実験スクリプトを置く場所だよ。だからレポジトリには入れないんだー。
t/ テストファイルを入れるよ。頑張って書かないとね。
templates/ これだけディレクトリ名が複数系でちょっとキモいかもだけど、テンプレートファイル用のディレクトリ。 Mojolicious標準のテンプレートエンジンを使っているから拡張子が「.html.ep」のファイルだらけさ。
 
まぁ何が言いたいかって言うとCinnamonがすごいいいってことと、ディレクトリすっきりさせたりして気持ちが晴れたってことですね。ハイ。</description>
    </item>
    
    <item>
      <title>Webアプリにおけるキャッシュ。オレオレ事例</title>
      <link>https://yusukebe.com/posts/2013/0118074955/</link>
      <pubDate>Fri, 18 Jan 2013 16:49:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0118074955/</guid>
      <description>Webアプリにおいて、アクセスやデータ量が多く/大きくなってくると、 バックエンドのパフォーマンスが低下しがちです。 MySQLなどのRDBMSにデータを置いている場合は適切に クエリーを改善する、インデックスを張る、といった策で解決する場合もありますが、 キャッシュを効果的に利用することでより高負荷に対応できる可能性があります。 また、外部APIへの問い合わせなど、どうしてもネットワークや他のリソースのレスポンスタイムに 引きずられる部分に関しては情報を手元にキャッシュしておくと何かとよいでしょう。
今回はWebアプリケーションのレイヤーで最近僕がどのようにキャッシュを使っているのか？ の事例を紹介しつつまとめてみたいと思います。
 
キャッシュについてとその基本 そもそもキャッシュとは、簡単にふわっと表現するならば、 「一時的に情報を手元の近い場所に置いておいて利用する手法、もしくはその一時データ」 と捉えることができます。 拙作の「Webサービスのつくり方」にも書きましたが、 例で説明するのがてっとり早いし、具体的な使い方が分かるでしょう。
この「ゆーすけべー日記」のAtomフィードをどこかのアプリケーションで利用するとして以下のようなコードを書きます。parse_feed っていうのが出て来ますがこれはフィードをパースするためのメソッドが定義されていると仮定してください。
 use LWP::Simple qw/get/; ...; my $content = get(&#39;http://yusukebe.com/atom.xml&#39;); my $data = parse_feed($content); print $data-&amp;gt;title . &#34;\n&#34;;  もし、更新を逐一知りたかったらこのコードを改良していけばいいのですが、 例えば、エントリーのタイトルをとあるWebアプリのサイドバーに一覧表示させたいなんて時があります。 アクセスの度にユーザーエージェントが（この場合はLWP::Simpleのgetメソッドを使って行っている）、 僕のブログにアクセスしてAtomフィードをとってくることになるのですが以下のことが分かります。
 ネットワークを使って外部に、つまり yusukebe.com にアクセスするので時間がかかる 短い頻度で更新されているわけではないので、毎回情報を更新させる必要がない  そこで、キャッシュを使います。例えば30分間情報をキャッシュさせるとなるとこのようなフローになります。
 フィードコンテンツがキャッシュされているか？をチェックする キャッシュされていればそのデータをそのまま使って、終わり キャッシュが無ければ yusukebe.com からフィードを取得 有効期限を30分として、キャッシュをセットする 取って来たデータを使って、終わり  キャッシュを実装する時にはまずは「get」「set」「delete」辺りのメソッドを覚えておけばいいのですが、 それを使って疑似コードで表現するとこんな感じになります。
 use LWP::Simple qw//; # get メソッドが紛らわしいのでエクスポートしない ...; my $key = &#39;key_of_feed&#39;; # キャッシュのキーを予め変数に my $data = $cache-&amp;gt;get($key); # getメソッド unless($data) { # キャッシュが無ければ my $content = LWP::Simple::get(&#39;http://yusukebe.com/atom.xml&#39;); $data = parse_feed($content); # フィードをフェッチしてパースする $cache-&amp;gt;set($key, $data, 60 * 30); # キー、値、有効期限の秒数、この順番でset } do_something($data); # 何かする  memcachedなどのをバックエンドにしたキャッシュでは、このようにキャッシュを保持する有効期限を決めることが出来、上記のフローはキャッシュを使うに当たっての定石かと言えます。キャッシュについてとその実装を軽く説明したところで事例に入りましょう。</description>
    </item>
    
    <item>
      <title>iPad mini を持って旅に出てる</title>
      <link>https://yusukebe.com/posts/2012/1230082353/</link>
      <pubDate>Sun, 30 Dec 2012 17:23:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1230082353/</guid>
      <description>実は先日27日木曜日。調子の悪いiPhone5を見てもらおうと渋谷の Apple Store に行ったら、ちょうどよく以前から欲しかったiPad miniが入荷していたので買ってしまった。iPad mini 16GB ブラックである。そして、たまたま昨日から鈍行列車を乗り継いで北海道まで行くという「青春18切符」な旅をしているので（実際は北海道＆東日本パスを使っている）そこでiPad miniを使い倒してみている。個人的にはタブレットほぼ初挑戦。未知のサイズであるこのデバイスについていくつか分かったことを報告したい。

 
Kindleアプリはメインアプリ？ 最初から目をつけていたのはiPad miniを電子書籍のデバイスとして使うということ。 日本上陸したAmazonのKindleはiPadアプリの展開もしているので、 Amazon上で購入したKindle対応書籍をiPadで閲覧することが出来る。 まぁアプリ自体の機能はiPhone版でも体験していたのだが、実際にiPad miniの7.9インチのディスプレイで見ると 実に「ちょうどいい」サイズであることが分かる。本体重量が約300gと確かに軽いので左手で持って右手でめくる なんていうアクションが叶えられる。
試しにいくつか本を買ってみた。
 Amazon.co.jp： ビッグデータがビジネスを変える (アスキー新書) eBook: 稲田 修一: Kindleストア Amazon.co.jp： 別人「群ようこ」のできるまで (文春文庫) eBook: 群 ようこ: Kindleストア Amazon.co.jp： キンドルで本を売る。―キンドル・ダイレクト・パブリッシングを通じた個人出版のアドバイス eBook: 小林 啓倫: Kindleストア Amazon.co.jp： 自腹でゴー！　~東京風俗日記~ eBook: 安田理央: Kindleストア  面白いと思ったのは、Kindle版でのみ出版されていて比較的安価で「ミニコンテンツ」と呼ばれてるような『キンドルで本を売る。...』と安田理央氏の体験談本の満足度が高いということだ。まぁ旅に出ながら電車に揺られて、iPad miniとKindleの評価をしている訳だから、すぐに全体像が把握出来て、それなりの情報が得られる書籍が必然的に評価高くなるは当然か。群ようこのエッセイは面白いのだが、Kindleで読んでいると途方もない感じがするのがちょっと辛い。
あー、そうそう『ビッグデータはビジネスを...』を含め読んでみて分かったが、iPad miniである程度読書をこなすといわゆる「速読」というか、とにかく速く文章が読めるになるっぽいね。これも不思議だけどあり得る。
iPad miniとKindleを組み合わせた読書体験で残念なのは2点。一つはやっぱりデバイスがRetinaディスプレイを搭載してて欲しかったこと。それと、Amazonのサイトで必死に探しても読みたい本はそんなに多くない点。本屋へ行って「あれもこれも欲しくなってきた」という本を購入する衝動はKindleストアであまり起こらないんだよねー。
意外とバッテリーはもつ これは驚いたんだけど、バッテリーの持ちはいい。
全画面でGoogle Mapsを使いたい iPhone向けのGoogle Mapsの出来が素晴らしすぎるので、是非iPad miniの大きな画面で見たいですわよ！ Appleのクソ地図なんて使いたくないです。
雑誌コンテンツを安く読みたい Kindleで書籍やコミックスは読めるけど、もっとライトなコンテンツって意味で、雑誌を見たいね。 Newsstandのアプリでも探せるけど、コンテンツが容量的な意味で大きくて重いのと、 結局割と高めの値段で購読しないといけないのが敷居高い。
Gmailアプリの使用感は最高 iPhoneのもそうなんだが、Gmailアプリは使いやすいねー。 標準のメールアプリはもう使わず、Gmailアプリをドック？に入れて通知ありで使ってます。
分割キーボードで、入力の不安は払拭 iPad miniでどうやって文字入力するんだろ、って思っていたら、分割キーボード？ってのがあって、 右手と左手をうまい事使って、アルファベット入力やフリックによる日本語入力が出来る。 もっと速く、正しく打てるようにマスターしたい。

Webのページのスクショを撮って見返す ちなみに今旅に出ているわけだが、電車の乗り換え具合を「ジョルダン」とかのサイトで調べて、 出て来たページをそのままスクリーンショットで撮る。これはまぁ普通に画面メモ的で便利なんだけど、 さらにフォトストリームで共有されているとiPhone5でも同じ画像を見る事が出来てさらに重宝する。

フォトストリームはここへきて便利 ってことで、iPad miniというデバイスがもう一個増えた訳で、こういう時にフォトストリームだとか、 iCloudって便利ですよね〜って思うようになるね。
本体をどこにしまうか、それが問題だ これがやっかい。もう少し大きければカバンの中に入れるんだけど、ある程度小さいから、 例えばダウンジャケットのポケットにギリギリ入ってしまう。選択肢があるからこそ、 いつも「どこに入れようか？」と収納場所に悩んでしまう。そういう意味では俺のカラダ、生活スタイルにまだフィットしてないのかも。
iPhone5 テザリングは「熱い」 都心だと、e-mobileの回線が入るんだけど、今列車で走っているところは手持ちの中からでは、 Softbankじゃないと電波が入らない。そこで、iPhone5 のテザリング機能を使っている。 「テザリングなめてた」けど、こういう状況においてはひたすら便利。 iPhone5 がネットワーク供給源になって、そのかわりiPad miniでやりたいことをやりましょう、という具合。 ただ、これを（充電しながら）長時間やっているとiPhoneが非常に「熱く」なるのでちょっと怖いw</description>
    </item>
    
    <item>
      <title>たった一つのツイートでひたすらアイドル水着画像を集める</title>
      <link>https://yusukebe.com/posts/2012/1214165851/</link>
      <pubDate>Sat, 15 Dec 2012 01:58:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1214165851/</guid>
      <description>元★ネタ  たった10行のコードでひたすらアイドル水着画像をあつめる - UT Startup Gym たった3行のコードでひたすらアイドル水着画像をあつめる（Rubyだよ） - maeharinの日記 たった数行のコードでひたすらアイドル水着画像をあつめるのをGoutteで書いてみた - iakioの日記  やること なんだかよく分からないタイトルだと思うけど、間違っていないと思う！ 目的の仕様としてはNAVERまとめに張られた水着写真のimgタグを持って来て、 imgタグだらけの.htmlをダンプすれば嬉しいよね〜っていうスクリプトを少ない行数で書けるか？ 他の言語ではどう書くのか？みたいなことなんだけど...
Perlでワンライナー書いてたら、Twitterのツイートに収まる文字数、つまり140文字以内になった。 コードをツイートするって言うと、なんか昔miyagawaさんが変態的なことをやっていたなと思い出す。
 Run a tweet like Perl - bulknews.typepad.com  「Run a tweet like Perl」＝「ツイートをPerlのように実行しますぉ」とそのままのことなんだけど、 これはどういうことか！？とりあえず今回の課題を元にやってみる。
ツイートする コードをつぶやく。URLがt.coで圧縮されているけど、これはNAVERまとめのアイドル水着記事ね。
 print for get(&#39;http://t.co/C4CkxAaD&#39;) =~ m!&amp;lt;img.+?class=&#34;MTMItemThumb&#34;.+?/&amp;gt;!g  そしてこのツイートは実行される
twitter.pm を用意する 上記でとりあげたmiyagawaさんのBlog記事にある「twitter.pm」を用意する。 一部、TwitterのAPIのアドレスが変更になっていたり、HTMLエンティティの扱いを施すために手を加える（このdiffちょっと正確じゃないかも）。
 *** twitter.pm.org 2012-12-15 01:50:17.000000000 +0900 --- twitter.pm 2012-12-15 01:50:00.000000000 +0900 *************** *** 4,9 **** --- 4,10 ---- package twitter; use JSON; use LWP::Simple; + use HTML::Entities; my $id; use overload &#34;/&#34; =&amp;gt; sub { $id = $_[1]; $_[0] }, fallback =&amp;gt; 1; *************** *** 15,22 **** END { if ($id) { !</description>
    </item>
    
    <item>
      <title>daemontoolsで起動しているstarmanのログをfluentdで</title>
      <link>https://yusukebe.com/posts/2012/1213003839/</link>
      <pubDate>Thu, 13 Dec 2012 09:38:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1213003839/</guid>
      <description>fluentdが面白そうなんで、散らばっているAppサーバのログを集計してみたい。 アプリケーションは
 基本、Perlで書かれてる Starmanで動かす .psgiで「enable &#34;Plack::Middleware::AccessLog&#34;, format =&amp;gt; &#34;combined&#34;;」してる daemontoolsでデーモン化  という条件で、fluentdに付属のサンプル設定ファイルをほんの少しいじる。 tailして標準出力に出すだけだけど、いい感じです。
 &amp;lt;source&amp;gt; type tail path /service/bokete_web/log/main/current format /^@[0-9a-z]+ (?&amp;lt;host&amp;gt;[^ ]*) [^ ]* (?&amp;lt;user&amp;gt;[^ ]*) \[(?&amp;lt;time&amp;gt;[^\]]*)\] &#34;(?&amp;lt;method&amp;gt;\S+)(?: +(?&amp;lt;path&amp;gt;[^ ]*) +\S*)?&#34; (?&amp;lt;code&amp;gt;[^ ]*) (?&amp;lt;size&amp;gt;[^ ]*)(?: &#34;(?&amp;lt;referer&amp;gt;[^\&#34;]*)&#34; &#34;(?&amp;lt;agent&amp;gt;[^\&#34;]*)&#34;)?$/ time_format %d/%b/%Y:%H:%M:%S %z tag starman.access &amp;lt;/source&amp;gt; &amp;lt;match starman.access&amp;gt; type stdout &amp;lt;/match&amp;gt;  これをmongodbに入れてごにょる！</description>
    </item>
    
    <item>
      <title>「ボケて」のスケールアップとスケールアウト</title>
      <link>https://yusukebe.com/posts/2012/0821084404/</link>
      <pubDate>Tue, 21 Aug 2012 17:44:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0821084404/</guid>
      <description>オモロキで鎌団子さんと二人で開発している写真で一言ボケるWebサービス「ボケて」。 バックエンドの改修作業、それに伴うバグ等の修正を施し、やっと落ち着いて来たので、 そのことについて書いておこうと思います。
ボケてとは？ 改修作業の詳細に入る前に「ボケて」とは、を紹介します。 ボケては「お題」と呼ばれる「写真」に一言「ボケ」を加えて笑いをつくりだせるWebサービスです。

ユーザーはお題写真のアップロードやそうした写真に対するボケのテキストを入力でき、 最新のものや評価されたお題とボケを見ていくことができます。 評価の高いものはやっぱり面白くて見てると吹き出しちゃうものもたくさんあります（当社比）。
開発は上記した通り鎌団子さんと二人でやっていて、 鎌団子さんがデザインやHTML絡み、 僕がバックエンドやシステム周りを行っています。
5月13日、爆発 さて、そのボケてですが、今年の「5月13日」にアクセスが急増します。 2chまとめサイトもしくはNAVERまとめに掲載されたのが主な原因だと思われます。 そのPVは今までと比べておよそ10倍弱。 いわゆる「スラッシュドット効果」が起こり、 その時点でのスペックのサーバでは捌ききれなくなってしまいます。 しかも、このPVの増加は一時的なものではなく、常に高いまま... 監視ツールで「アクセスして30秒経ったらタイムアウトエラー」と見なし、アラートをメールさせる設定にしていたのですが、それがiPhoneに飛びまくり... サーバ側のアプリケーションやDBをそのアクセスに対応できるよう改善しようとしたところ...
フレームワークの変更とリライト アクセスが増加した当時のボケては3年前に書かれたシステムだったのですが、 それがPerlのフレームワークCatalystでつくられてたんですよね。 で、そのソースを手元の環境に持ってきて立ち上げようとしたんですが、 モジュールのバージョンの差やPluginモジュールを多様して依存したために、 「動かない」んですよ、これがまた。
動かないってことは当然アプリケーション側を書き換えなくていけないわけですが、 その量が大きくなってしまいそうな予感。さらには最近僕は個人的にCatalystを触っておらず、 Mojoliciousばかり。WAFにCatalystほど重厚なものはいらないと思いだしていました。 てことで「いっちょ頑張るか」という具合でフレームワークをCatalystからMojoliciousへと変更させたボケてのアプリをつくることにしました。
Controller部分はもちろん全部書き換えて、さらに内部で使っているAPI部分もかなり変更して、 コーディングすること1ヶ月ほどでした。
スケールアウトしやすい構成と実装 その際、アクセスが増加している状態に耐えうるような設計にしました。 後述するキャッシュの利用ももちろんですが、以下のような項目です。
 DBのレプリケーション構成 DBの参照系は生DBIを使った、更新系はDBIx::Skinnyを現在使用中 DBはMySQL InnoDBで KVS等の技術は使わず、使い慣れているMySQL+Memcachedで フロントサーバとアプリケーションサーバを物理的に分ける  また、Mojoliciousをうまいこと使って、Controllerから内部APIやModelを呼び出すときには、
 my ($bokes, $pager) = $self-&amp;gt;model(&#39;Boke&#39;)-&amp;gt;get_recent_entries();  と直感的な記述で行えるようにしました。Validationの処理もFormの定義をしておけば、こんな感じでできます。
 if($self-&amp;gt;form(&#39;Boke&#39;)-&amp;gt;has_error) { return $self-&amp;gt;render_fill(&#39;/boke/post&#39;); }  キャッシュ戦略 参照されるものを種類に分けてmemcachedで一定時間キャッシュさせています。 まぁありきたりなことですが、これによりDBサーバへの負荷を低減できます。
で、参照系は生のDBIを使って参照させてるのですが、簡単なラッパーをつくってその生DBIを使いやすくしてます。O/R Mapperは結果をオブジェクトを返しますが、そのラッパーはハッシュレフで返してくれます。以下の例だと「$self-&amp;gt;dbx」がそれなんですが、「search」メソッドはこのように使います。
 $bokes = $self-&amp;gt;dbx-&amp;gt;search( &#39;boke&#39;, [ $cond ], [ { -desc =&amp;gt; &#39;id&#39; } ], { limit =&amp;gt; $limit, offset =&amp;gt; $offset, expire =&amp;gt; 60 * 60, } );  条件にあう、最新のボケ一覧を取得していますが、「expire」という引数を与えると自動的にクエリーからキーを生成してそのキーに結果をキャッシュするという仕組みになっています。強制的にキーを組み立てて、そのキーに当てはまるキャッシュを強制的に削除するメソッドも用意しているので、場合によってキャッシュのコントロールができるわけです。
また、オブジェクトやオブジェクト全体のキャッシュだけではなく、右側のサイドバーのHTMLをキャッシュさせるなどの工夫もしております。
デルタ版リリース ってことでスケールアップしたサーバを用意してそこへデプロイ。「ボケてデルタ版」を7月19日にリリースしました。うまいこと割とサクサクに動くようになりました。ただ、案の定漏れていたバグが多数あり、都度都度対応しました。テストが少ないのも原因なのでこの辺はしっかりさせたいところです。</description>
    </item>
    
    <item>
      <title>エロサイトのじわじわ（TV放送コード版）資料</title>
      <link>https://yusukebe.com/posts/2012/0706115528/</link>
      <pubDate>Fri, 06 Jul 2012 20:55:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0706115528/</guid>
      <description> GXEB #5でたった今発表した「エロサイトのじわじわ（TV放送コード版）」の資料をSlideShareに上げました。内容がアレなんで詳しいことは推測してくださいw
エロサイトのじわじわ （TV放送コード版）   View more presentations from Yusuke Wada   </description>
    </item>
    
    <item>
      <title>Markdownの文章を書くときに使えるMacソフト2つ</title>
      <link>https://yusukebe.com/posts/2012/0704060757/</link>
      <pubDate>Wed, 04 Jul 2012 15:07:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0704060757/</guid>
      <description>今僕は大抵の文章をMarkdown記法で書いています。 Markdownの心地よさは以前この日記に書いた通りです。
 Markdownは編集時もレンダリング後も見た目があまり変わらず、プレーンテキストでありながら構造をもたらしてくれます。
Markdownで文章を書こう！ - ゆーすけべー日記
 「何用の」文章を書くかは人それぞれだと思いますが、 僕の場合はメルマガとこの日記（Blog）の記事というこの2つ向けの文章をメインで書きます。Markdownはプレーンテキストの状態でも構造が見やすいので、emacsなど僕にとって慣れてるエディタを使えばよいのですが、ある程度Markdown記法をサポートして色づけやプレビューなどをしてくれるエディタを使うとはかどります。後ほど解説する理由通りメルマガとBlog、それぞれエディタを分けて使っているので、その2つのMacソフトを紹介します。
DAY ONE - Blog記事用 最初使い始めた際に「ひとりTwitter」っぽいという感想を持ったDAY ONE。これがBlog用の記事用に使っているソフトです。いい感じにMarkdownに対応しています。 Markdownで書かれたテキストは閲覧モードにすると記法を解釈して太字や画像、リンクなどが奇麗にプレビューされるのです。MovableTypeなどのBlogツールが編集画面にプレビュー機能がついていますが、それがローカルで出来るイメージです。

プレビュー時だけではなく文章を書く際にも記述によって色づけや太文字化をしてくれます。

普通にメモをとる時にも使えるのでもう既にDAY ONEはかかせないソフトになってしました。
Byword - メルマガ記事用 メルマガの場合、1万文字近く、あるいはそれ以上の文章を書きます。 集中力が必要な作業のお供にBywordというエディタが最適だと思い出しました。 デザインがよい意味で「素っ気ない」のです。また、地味に文字カウントが常に表示されているのがいいっす。

まさに「書く」のに適しているByword、プレビュー機能も一応ついてはいますがあんまり使ってないです。 代わりに自作のDropbox内のMarkdownテキストをWebでプレビューできる「Dropdown」というWebアプリをプライベート用に立ち上げて使ってます。結構見やすいです。

 
いろいろエディタ系のソフトは試しましたが、今のところこの2つで落ち着いてます。 どちらも有料のソフトですが、気になる方は試してみてください！</description>
    </item>
    
    <item>
      <title>Rubyやってみる！（新おっぱいスクリプトもあるぉ）</title>
      <link>https://yusukebe.com/posts/2012/0520074309/</link>
      <pubDate>Sun, 20 May 2012 16:43:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0520074309/</guid>
      <description>某プロジェクトでRuby on Rails使うっていぅんで 「アジャイルWebアプリケーション開発」本なんて買ってチュートリアルとかやってます。 ただ、Ruby自体なにも分からないので、Rails覚えてもどれだけできるかがよく分からなす。 ってことでRubyを勉強する！と先ほど書いてみた4つのスクリプトをご紹介。間違ってたらツッコミよろしくおくんなまし。 とはいえ簡単なやつだよ！でも新しいおっぱいダウンロードスクリプトもあるよ！
open-uri.rb まずは、Perlで言うLWP的なもの、つまりHTTPクライアントでこの日記のHTMLを取得してみるよー。 あら、簡単だねっ。
 require &#34;open-uri&#34; html = open(&#34;http://yusukebe.com/&#34;).read; p html  twitter-search.rb お次に「お得意の」APIを叩く系をやってみる。Twitter Search APIが簡単なので、 そこから「ruby」という発言を取ってきて表示させます。 Perlで言うURIモジュールの「query_form」メソッドが欲しかったので、Addressable::URIを使いましたぉ。
 require &#34;addressable/uri&#34; require &#34;open-uri&#34; require &#34;json&#34; uri = Addressable::URI.parse(&#39;http://search.twitter.com/search.json&#39;) uri.query_values = { :q =&amp;gt; &#34;ruby&#34;, :lang =&amp;gt; &#34;ja&#34; } json = open(uri).read ref = JSON.parse(json) ref[&#34;results&#34;].each do |tweet| puts &#34;@&#34; + tweet[&#34;from_user&#34;] + &#34; : &#34; + tweet[&#34;text&#34;] end  sinatra-oauth.rb 今度はWebアプリもつくっちゃおう！sinatra使ってFoursquareのOAuth v2なログインを試してみるよ。 sinatraのsessionを有効にするために「enable :sessions」しなくてはいけないところにハマったけど、 OAuthとかは、APIのドキュメントをしっかり読めばすぐ出来たよ。
 require &#34;sinatra&#34; require &#34;addressable/uri&#34; require &#34;pit&#34; require &#34;open-uri&#34; require &#34;json&#34; enable :sessions, :logging config = Pit.get(&#39;foursquare.com&#39;) get &#39;/&#39; do @name = nil if session[:access_token] uri = Addressable::URI.</description>
    </item>
    
    <item>
      <title>Markdown文章をお手軽にKindleで見る</title>
      <link>https://yusukebe.com/posts/2012/0322141018/</link>
      <pubDate>Tue, 27 Mar 2012 07:21:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0322141018/</guid>
      <description>いつの間にか手元にある「Kindle Touch」。ぐふふ。
 
ページめくりがもっさりしているのが気になるけど、軽くて手頃なサイズ感がいい。 今なら円高なんで安く買えるし。 ただ、Kindle Storeで購入する書籍も含めて英語だとなんとなく実感がわかないので、 日本語の文章を読んでみたかった。 というか、自分が最近書いている文章のプレビュー用として使いたかった。
Markdownで文章を書いているのでMarkdownを変換してKindleに転送して読めばよい。 実は後から知ったんだけどKindleってePubにまだ対応してないのね... ということで色々調べてみると以下の方法がすごくお手軽。
 Markdownを簡単な構造のHTMLに変換する KindleGenを使って.mobi形式に変換する Kindleを繋げてフォルダにぶっこむ  KindleGenっていうのはAmazonがオフィシャルに配布しているePubやHTMLを結構かしこくKindleで読める形式＝.mobiに変換してくれるコマンドラインソフト。
 Kindle Publishing Programs  これにMarkdownからおこしたHTMLをかませればいいということになる。 適当なHTMLを指定しKindleGenを実行するいろいろと警告や情報を出してくれるのでHTMLを作る参考になります。
気をつけるのは以下の点でした。
 html、bodyタグ等はしっかりつける head内のmeta要素でcharset=utf8とかしないと日本語が文字化ける 画像はローカルにないといけない デフォルトだと特有のCSSが適応されるので簡単なCSSを書く .cssファイルを外部から読み込んでも考慮される  MarkdownをHTML化するために使ったスクリプトはこちら。Markdownファイルを引数に渡すと、 HTML内の画像をtempファイルに置きつつsrc属性を変更、最終的に出来たHTMLを標準出力に吐いてくれる。
 use strict; use warnings; use Text::Markdown qw/markdown/; use Path::Class qw/file/; use Data::Section::Simple qw/get_data_section/; use HTML::TokeParser; use File::Temp qw/tempfile/; use LWP::Simple qw/getstore/; my $filename = $ARGV[0] or die &#34;filename argument required!&#34;; my $file = file($filename); my $content = $file-&amp;gt;slurp; my $html = markdown($content); my $parser = HTML::TokeParser-&amp;gt;new( \$html ); while ( my $token = $parser-&amp;gt;get_tag(&#39;img&#39;) ) { my $src = $token-&amp;gt;[1]{src}; my ($suffix) = $src =~ /.</description>
    </item>
    
    <item>
      <title>Webアプリのパフォーマンスアップ作戦</title>
      <link>https://yusukebe.com/posts/2012/0306121114/</link>
      <pubDate>Tue, 06 Mar 2012 21:11:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0306121114/</guid>
      <description>予定している機能を実現するアプリが完成するだけでWebサービスが成り立つわけではありません。 運用の最中にパフォーマンスにまつわる問題が出てくる可能性があります。 それは突然大きなトラフィックがやってきたというような時だけではありません。 知識が無いうちですと、いざ運用に乗せてみるとずいぶんとサイトの読み込みが遅いといったケースが発生することもあります。
僕はいくつかのエロサイトを管理しているのですが、 その中に月間700万PVのアクセスをいただいている「サイトA」があります。 サイトAの場合、トラフィックもそこまで無かった当初からパフォーマンスに関する問題がいくつか発生し、 その都度調べては実践で試して対策をしてきました。また、できる限り少ないリソースでの運用を目指しています。 今回はWebアプリのパーフォマンスアップ作戦として、 サイトAでの運用経験からのいくつかの方針やTipsを紹介したいと思います。
 
それはどこのパフォーマンス問題？ まず、パフォーマンスといってもWebアプリの場合、どこがボトルネックになっているか？ その「どこ」を把握することが大事です。単に「Webサイトが遅いよ」と言っても、 Webページ自体のレスポンスを返すのが遅いのか、ページ内で使われている画像の配信が遅いのか、描画が遅いのか... 様々なケースが考えられます。 そこで、大きく切り分けて以下の3つでパフォーマンスを考えるといいと思っています。
 バックエンド、アプリ部分のリクエストを処理する際の性能 フロントエンド、アプリ部分以外のページ全体を構成するパーツ郡の配信性能 クライアント、ページ全体を描画する際にクライアントにどれだけ負荷をかけるかの性能  今回はあえて、フロントエンドとクライアントを分けて考えています。 クライアントは人間がページを見る場合ですと、 昨今、マシンの性能が上がっているので、ある程度負荷をかけてもいいところかもしれませんが、意識することは必要です。
バックエンドの性能計測 パフォーマンスに対する問題を解決するには、対策と結果をどちらも把握しなくてはいけません。 それには結果に対する計測が必要になってきます。ちなみに、最初に言っておきますと、 計測の原則として常に同じ環境で計測するというのが前提となってきます。
さて、バックエンドの性能を計測するには一般的にApache Benchmark「ab」というコマンドが使われています。 その名の通りApacheに付属しているツールです。
「http://127.0.0.1:5000/」にリクエストしてパフォーマンスを計測するには以下のようなコマンドを実行します。
 $ ab -n 100 -c 10 &#34;http://127.0.0.1:5000/&#34;  オプションの「-n」はリクエストの回数、「-c」は同時接続数を意味します。結果は以下のように出力されます。
 Benchmarking 127.0.0.1 (be patient).....done Server Software: Server Hostname: 127.0.0.1 Server Port: 5000 Document Path: / Document Length: 271 bytes Concurrency Level: 10 Time taken for tests: 0.227 seconds Complete requests: 100 Failed requests: 0 Write errors: 0 Total transferred: 44000 bytes HTML transferred: 27100 bytes Requests per second: 440.95 [#/sec] (mean) Time per request: 22.</description>
    </item>
    
    <item>
      <title>CSS Frameworkを持つ</title>
      <link>https://yusukebe.com/posts/2012/0304225231/</link>
      <pubDate>Mon, 05 Mar 2012 07:52:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0304225231/</guid>
      <description>例えば、Webサービスのフロントエンドのコードを書き始める時にまず何をするでしょうか？ デザインスケッチや画像を元にHTMLとCSSを記述していくことになると思います。 少なくとも僕はそうですね。 理論的にはHTMLだけでもWebサービスを作ることはもちろんできますが、 見た目を少しでも調整したいとなるとCSSが必要になります。 例えばCSSを使わないHTMLの場合、いくら単純なレイアウトだとしても、 デフォルトのリンクの色を変えたかったり、フォントを変更したかったり、 要素ごとの余白をどうにかしかったりと最低限の要望が出てきます。 こうした最低限のCSSに対するニーズは共通化して自分なりのCSS Frameworkとして持っておくとよいと思います。 近頃、一からCSSを記述しなくなったのもこうした考え方のおかげです。
今Web上で配布されて利用可能なCSS Framworkが非常に増えています。 僕も色々と探しては使ってみています。よく使われている、 もしくは僕が使っているCSS Framworkには以下のようなものがあります。
 Blueprint 960.gs Bluetrip YUI CSS inuit.css Twitter bootstrap jQuery UI CSS Framework Less Framework  こうした数あるFramworkのうち、お気に入りを見つけるのもよし、 参考にして自分なりのCSS Frameworkを作るのもよいと思います。 そして結果的に「CSS Frameworkを持つ」ことになると開発が効率的になるのかなぁと。
では、CSS Frameworkでは何が出来るのかを見て行きます。 そのことで、自作のFrameworkを作る際にもどのような要素を考慮すればいいかが分かると思います。 分かりやすい例として以前から使っているBluetripというCSS Frameworkを紹介します。 BluetripはBlueprintや960.gsなど様々なFrameworkのいいとこ取りをした、けれども最低限のFrameworkです。
 
スタイルの初期化 CSS Frameworkではスタイルの初期化をしてくれるのが一番の効用かもしれません。 Bluetripの.cssファイルを見ると最初の冒頭でリセットと呼ばれる該当する要素に対してのマージンやパディングの無効化、 行間の調整などが一気に行われています。 ヘッダー要素、マージンとパディングに限れば以下のようなCSSになります。
 h1,h2,h3,h4,h5,h6{margin:0;padding:0;}  そしてその後、要素ごとに適切なスタイルを、この場合だとマージンやパディングを設定しています。 以下はヘッダー要素の記述です。
 h1 { margin: 1em 0 .5em; } h2 { margin: 1.07em 0 .535em; } h3 { margin: 1.14em 0 .57em; } h4 { margin: 1.23em 0 .615em; } h5 { margin: 1.33em 0 .67em; } h6 { margin: 1.6em 0 .8em; }  配布されているCSS Frameworkはおそらく作者のポリシーも含んだマージンや行間、 配色などの設定がなされていると思われます。そのまま使ってもよいですし、 多少の修正を加えることもCSSを上書きするか、修正などすれば容易です。 このスタイルの初期化によってプレーンな構造のHTMLがより見やすくなってくれます。 また、ブラウザごとの依存を吸収してくれる作用もあります。</description>
    </item>
    
    <item>
      <title>月額980円のさくらVPSを個人用に使い倒す</title>
      <link>https://yusukebe.com/posts/2012/0301004443/</link>
      <pubDate>Thu, 01 Mar 2012 09:44:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0301004443/</guid>
      <description>Webサービスの運営用にVPSと呼ばれるバーチャル・プライベート・サーバを借りることは昨今よくあることだと思います。 VPSのサーバを借りればroot権限を持てることになるので、自由度が高いサーバ環境を構築することができます。 また、スペックによって価格が違っていて、低いスペックなものだと月額かなり低価格なものが存在します。 僕はその中でも月額980円のさくらVPSを借りていて、それを個人用に限って使っています。 これから紹介するような用途であれば980円でもかなりいけます。 ちなみに980円コースのスペックは2012年3月現在で以下のようなものです。
 メモリ: 512MB HDD: 20GB CPU: 2Core(仮想)   
gitリモートレポジトリ 僕が現行で行っているWebサービスでもiPhoneアプリ開発でもバージョン管理は必要になってきて、 そのためのプライベートなレポジトリが欲しくなります。 githubなどでは無料で公開レポジトリが持てますが、プライベートレポジトリを持つには有料プランが必要です。 こちらを使ってもいいですがだんだんキリがなくなってくるので、 僕は980円VPSにgitのプライベートレポジトリを構築しています。
gitのリモートレポジトリを作るにはgitoliteというソフトがオススメです。 新規ユーザーを追加したり、 新たなレポジトリを追加したりする際に「管理用のレポジトリ」を取ってきてpushするだけで済むのが非常によいですね。 例えばレポジトリ「Hoge」を追加するとします。管理レポジトリを取ってきて
 $ git clone git@yourdomain:gitolite-admin.git $ cd gitolite-admin  「conf/gitolite.conf」に以下を追加します。
 repo Hoge RW+ = @all  そしてcommitしてpush。
 $ git commit -a -m &#39;add Hoge repo.&#39; $ git push  自動的に「Hoge」レポジトリを作ってくれます。
 remote: creating Hoge... remote: Initialized empty Git repository in /home/git/repositories/Hoge.git/  そのままgit cloneすれば空のレポジトリを取ってこれますね。
 $ git clone git@yourdomain:Hoge.git Cloning into Hoge... warning: You appear to have cloned an empty repository.  他にもgitosisなどの管理ツールはありますが、色々ためしてこのgitoliteに落ち着きました。
gitレポジトリビューアー さてgitのリモートレポジトリができたところで、僕はレポジトリ郡の様子をWebブラウザで閲覧したいと思い、 「gitweb.cgi」を設定しました。gitweb.cgiでは個々のレポジトリのコミットログやコードを表示してくれます。
gitweb.cgiはgitのソースコードに同封されています。 いくつかの設定をしてApacheでcgiが実行されるようにすればよいのですが、 僕は980円VPSにApacheを入れていないので特殊な方法で立ち上げてます。 PerlモジュールであるPlackを入れて、
 $ cpanm Plack  以下のような.</description>
    </item>
    
    <item>
      <title>30分、JavaScriptで作るWebサービスのモックアップ</title>
      <link>https://yusukebe.com/posts/2012/0221231031/</link>
      <pubDate>Wed, 22 Feb 2012 08:10:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0221231031/</guid>
      <description>Instagramは日本のユーザーも多く、日常を切り取った写真がほとんどで、 またお洒落なものも混じっているのでたまに眺めると気持ちがホッコリしたりします。 特定のキーワードでInstagramの最新の写真を検索したい時があります。 例えば、みんなが今どんな「ご飯」を食べているのか、今日の「日の出」はどのような具合なのか、 がInstagramの写真を通して分かるかもしれません。 Instagramの写真検索サービスを探してみると、 Instagram自身が検索機能を提供してないので他の第三者が作ったサービスがいくつか出てきます。 使ってみたところ、もう少し自分で見た目やら機能を変えてみたいなーなんて思いました。 そこで、「Instagramの今の写真を検索できるサービス」といういわばWebサービスを作りたい欲求にかられます。 今回はこのようなちょっとした欲求から考えた「Webサービスのモックアップ」をJavaScriptで素早く作ることについて、 解説してみます。
Webサービスを「誰かの欲求を満たすWebのサービス」という一面から捉えると、 もちろんJavaScriptだけで記述可能です。HTML/CSSの知識は多少必要ですが、 PHPやRuby、Perlなどのサーバサイドについて知らなくてもよいわけです。 また、JavaScriptでWebサービスのモックを作る作業はサーバサイドを実装する場合でも、 UIやアイデアを試行錯誤するための意味をなすこともあります。 JavaScriptのAjaxと呼ばれるような仕組みを利用すれば、今回扱うようなTwitterのWeb APIとの通信も可能ですし、 インタラクティブにブラウザ上で表示を変化させることができます。
「Instagramの今の写真を検索できるサービス」。実際にJavaScriptで作ってみました。 すると30分ほど集中すると、Webサービスを構成する必要最低限の行程を踏むことができたのです。 もちろん作り込みはだいぶ必要なので、それについては後述しますが、 実際に動くサービスを使うことが可能なのでユーザとして欲求はある程度満たせるものです。 30分、JavaScriptでWebサービスをサクッと作る行程は以下のようなものでした （時間は適当な目安です）。
 HTMLとCSSの雛形を用意する(3分) JSの雛形を作る(2分) APIのドキュメントを読む(5分) JSコード、CSSを記述する(15分) 公開する(5分)  それぞれについて解説します。
1.HTMLとCSSの雛形を用意する(3分) WebサービスとなるとHTMLとCSSは必須です。 実はここを作り込むのが一番時間かかったりするのですが、 今回は雛形だけで満足することにしましょう。CSS Frameworkを利用します。 BlueTripはCSSが簡素に記述されていて使いやすいだけではなく、 zipやtarをダウンロードして解凍すれば今すぐ使えるようなファイル構成になっているのでこちらを使ってみます。
index.htmlをエディタで編集してタイトルだけの表示にします。
 &amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&amp;gt; &amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xml:lang=&#34;ja&#34; lang=&#34;ja&#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html;charset=utf-8&#34; /&amp;gt; &amp;lt;title&amp;gt;Instagram検索&amp;lt;/title&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/screen.css&#34; type=&#34;text/css&#34; media=&#34;screen, projection&#34; /&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/print.css&#34; type=&#34;text/css&#34; media=&#34;print&#34; /&amp;gt; &amp;lt;!--[if IE]&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/ie.css&#34; type=&#34;text/css&#34; media=&#34;screen, projection&#34; /&amp;gt; &amp;lt;![endif]--&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34; type=&#34;text/css&#34; media=&#34;screen, projection&#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&#34;container&#34;&amp;gt; &amp;lt;div class=&#34;span-24&#34;&amp;gt; &amp;lt;h1&amp;gt;Instgram検索&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&#34;</description>
    </item>
    
    <item>
      <title>一人で作る！Webサービスに必要な知識とか能力</title>
      <link>https://yusukebe.com/posts/2012/0216002938/</link>
      <pubDate>Thu, 16 Feb 2012 09:29:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0216002938/</guid>
      <description>iPhoneアプリの設計や開発に比べるとWebサービスのそれは、 かなり複雑でやることが多いことに改めて考えました。
Webサービスは個人で小さいものをたくさん作ってきましたし、 以前技術評論社のWEB+DB PRESSで「Webサービス[即日]開発 〜思いつきをすぐにカタチに！〜」 という30数ページの特集を書かせてもらったことがあります。
 WEB+DB PRESS Vol.54posted with amazlet at 12.02.16  和田 裕介 飯塚 慶則 羽生 章洋 高林 哲 小飼 弾 角田 直行 はまちや2 小林 陽介 西田 圭介 藤澤 瑞樹 西林 孝 加藤 幹生 木村 俊也 森田 創 鶴岡 直也 川口 耕介 ミック 伊藤 直也 武者 晶紀 技術評論社 売り上げランキング: 299828
 Amazon.co.jp で詳細を見る    
僕にはそれなりの経験と知識があるのかもしれませんね。てへぺろ
 そこで、特に個人とか小さな規模のチームでWebサービスを作っていくために必要な知識を、 開発のプロセス順に、それぞれ短く紹介します。ちなみに、ググったら同じようなテーマの記事がいくつか出てきたけど、 なんか「足りてない感」がしたのでBlogに残そうかなぁと。 また予め伝えておきますが、より詳しいお話はメルマガの方で 掲載していきたいと思います。
では行ってみよう！
 
1. 準備 「Webサービスを作ろう！」と思い立って、いきなりコードを書き始めることはできません。 準備をしましょう。そのためには最低限以下の4つの能力とか知識が必要だったり、 経験すると身についていきます。
 マーケティング 発想力 調査 設計  実はこの準備ってのが注目すべき点で、ついつい「どうやって作るのか」に目が行きがちですが Webサービスにおいて「何を作るのか」が一番大切だったりします。
マーケティングや発想力はその起点になります。少なからずあなたが誰かに使ってもらいたいサービスを 作りたいならば、対抗サービスやユーザーについて調べなくてはいけません。 また、アイデアの作り方のコツを覚えておくといいでしょう。以下の題名ずばりの本がオススメです。 30分くらいで読めちゃう薄い本です。
 アイデアのつくり方posted with amazlet at 12.02.16  ジェームス W.ヤング 阪急コミュニケーションズ 売り上げランキング: 407</description>
    </item>
    
    <item>
      <title>これだけは使ってるMacアプリ10個</title>
      <link>https://yusukebe.com/posts/2012/0212003607/</link>
      <pubDate>Sun, 12 Feb 2012 09:36:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0212003607/</guid>
      <description>Evernoteが好きではない。Macのアプリがイケてないからだ。 変なリッチテキストみたいな奴で編集しなくてはいけなかったり、 Webページからコピペした文字がスタイルを継承しちゃったり、 そもそもMarkdownに対応してもらいたかったり。 だから巷で騒がれるほど、Evernoteはあまり使っていない。
その代わりと言ってはなんですが、お気に入りのMacアプリもあります。 今回はMacのApp Storeからダウンロードできるアプリの中でも、 僕が個人的に「今なら絶対入れる」というものを10個厳選して紹介します。 文章書くのに便利だったり、ちょっとしたライフハック的に使えたり、 クリエイティブな活動に必要だったりするもの達です。では、行ってみよう。
 
1. DAYONE  Day One - Mac Journal Application for iPhone, iPad and Mac Desktop  
一言で言うならば「一人Twitter的メモ帳」。時系列で短いテキストを日記のように綴れて、 DropboxやiCloud経由でMacとiPhoneやiPadと同期してくれるちょっとしたアプリで、 「ちょっとした」ものなんだけど、UIが優れている。 その特徴は、上記した通りTwitter風味なこと。 「気軽に思ったこと、気づいたことを書く」行為を抵抗無く生活に取り入れることができる。 Evernoteを似たような目的で使っている人がいると思うが、 僕はこのDAYONEを「一人Twitter」として気軽なアイデアや思い出の溜め込み場として活用している。 ちなみに実はMarkdownにも対応していて、このBlog記事も試しにDAYONEで書いている。 なかなか快適だ。
2. Wunderlist  Task Management At Its Best With Wunderlist | 6Wunderkinder  
リスト、つまり箇条書き形式の情報をストックしておくにはWunderlistが一番優れていると思う。 もちろんiPhone用アプリもあり同期をしてくれる。 特徴はこれもやはりUIにあり、気に入っているのが背景画像がクールでかつ複数のものから選択が できることである。箇条書きとそのグループ管理以外、余計な機能が無いのもいい。
3. MarkdownNote  MarkdownNote  前回のBlog記事「Markdownで文章を書こう！」で紹介した通り。Markdownのテキストをプレビューしながら同時に編集ができる。 「Markdownがどのように（HTMLとして）マークアップされているか」を知りたければ便利。
4. Byword  Byword • A Simple Text Editor for Mac  
もう一つ文章編集用のソフトを紹介する。このBywordもMarkdownに対応したアプリ （ただしUI的に即座にプレビューするには向かない）。 MarkdownNoteよりクールに、特にフルスクリーンにした時に物書きに集中できるってことで、 メルマガの編集にはBywordを使っている。
5. ColorSchemer Studio  ColorSchemer | Instant Color Schemes  
配色のセンスが無い僕にとってこのアプリは必須。 Webアプリなどを作るときに複数の色のセットを考える状況があると思うが、 その時に使う。とあるベースカラーを指定すると色相を意識して他の色を提案してくれたり、 ギャラリーからカラーセットを閲覧・使用することができたり、 写真を読み込ませるとその写真の色要素からカラーセットを作成したりとかなり融通がきく。 有料アプリで少々値段がはるが買ってよかったなと思うアプリ。
6. Pixelmator  Pixelmator  Mac界では有名な画像編集ソフト、Pixelmator。やはりこちらを愛用している。 Photoshopと比べると断然に格安なのが特徴。 ただ、いまいち使い方が世に出回ってないが残念なところです。</description>
    </item>
    
    <item>
      <title>Markdownで文章を書こう！</title>
      <link>https://yusukebe.com/posts/2012/0207013320/</link>
      <pubDate>Tue, 07 Feb 2012 10:33:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0207013320/</guid>
      <description>みなさんはどのようなエディタでどのような記法で文章を書いていますか？ 状況によるとは思いますが、WordとかMacのPagesで文章を書いているという方や Evernoteでメモを取っているという方、または、Blogの投稿フォームに綴っている方、 様々だと思います。
僕も書くものによってはPagesやEvernoteも使うのですが、一番文章を書く手法が「プレーンテキスト＋Markdown」というものです。今もこの手法で書いています。Blogを書く時、雑誌の原稿を書く時、はたまたメルマガの原稿を書く時、全てにおいてこのやり方は今の僕にとってベストです。
プレーンテキストである利点 そもそもプレーンテキストとはWikipediaによると、
プレーンテキストには文字情報以外の情報は一切含まず、テキストデータのみで構成されている。バイナリデータや文字の整形情報を持たないので、最低限の機能しか持たないテキストエディタや表示用のソフトウェアで扱えると言う点で利便性が高い。
 ということらしいです。
で、まさに最後の利便性の話をするのですが、「機種依存」がないのが利点ですね。文字コードの問題もなきにしもあらずですが、Windows、Mac、Linux/Unix、スマートフォンと言った多種多様な環境においてテキストエディタ、ビューアーがさえあればファイルの中身を閲覧できるのが便利です。
プレーンテキストである欠点 WordやPagesといったワードプロセッサソフトで便利なのは、章見出しや太文字とか箇条書きが簡単にできて見やすく仕上げることができることですね。見やすくというのはある意味文章情報を「構造化」させることができるという意味合いです。
プレーンテキストではテキスト情報のみなのでなかなかそう簡単にはいきません。
しかし、Webを構成するHTMLの中身はプレーンテキストであるように「マークアップ」という手法で構造化することができるのです。マークアップは「テキストでテキストを装飾する」ことに他なりません。
マークアップじゃなじゃくてMarkdown このHTMLはデファクトになりましたが、じゃあちょっとした文章を書く時にHTMLでマークアップするかと言われたらちと大変です。もちろんやられる方もいらっしゃいますが... また、HTMLは実際にブラウザで表示しない限り見た目の確認がしにくいのです。
そこで、マークアップをもじって出てきたが今回紹介したい「Markdown」です。
これは記述の方法、というよりルールと解釈してもよいです。ある特定のルールを守りさえして、変換プログラムに通せばHTMLに整形されます。HTMLに整形するのが目的ではなくても、整形前の記法フォーマットで記述すればそれなりに「かなり」見やすいテキストができあがるのも特徴です。
Markdownでよく使う例 Markdownの記法ルールについては、以下のサイトをご覧ください。日本語です。
 blog::2310 » Markdown文法の全訳  今回は僕がよく使うMarkdownの書き方をいくつかピックアップします。
見出し h1、h2、h3、h4... にあたいします。
 # 見出し1番大きいの  と書くと、変換すれば、
 &amp;lt;h1&amp;gt;見出し1番大きいの&amp;lt;/h1&amp;gt;  というHTMLになる。その他は#を増やしていくだけ。
 ## 見出し2番目に大きいの ### 見出し3番目に大きいの #### 4番目、5番目と続く  強調、斜体 strong、i にあたいします。
 ** 強調したいところ ** * 斜体にしたいところ **  リスト ul&amp;gt;li、ol&amp;gt;liにあたいします。
 - 箇条書きその1 - 箇条書きその2 - 箇条書きその3 1. 番号付きその1 2. 番号付きその2 3. 番号付きその3  引用、ソースコード表現 blockquote、pre&amp;gt;codeに値します。
 &amp;gt; 引用したい文章等 ←4行スペースもしくは1タブ以上でソースコード表現 print &#34;hello world!&#34;;  罫線 hr タグですね。
 - - -  や
 ----  で表現可能です。
HTMLタグも使える 実は、HTMLタグも使えるので、aタグとかimgタグとか慣れている書き方がいい！っていう方はそちらを使うとよいと思います。</description>
    </item>
    
    <item>
      <title>シンプルなもう一つのCSS Framework「inuit.css」</title>
      <link>https://yusukebe.com/posts/2012/0203014140/</link>
      <pubDate>Fri, 03 Feb 2012 10:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0203014140/</guid>
      <description> ワディットのHPを改修する際に使ったんだけど、最近気に入ってるCSS Frameworkが「inuit.css」。CSS Frameworkは便利なんだけどどうしても使っていると「それっぽさ」が出ちゃうので（特にTwitter Bootstrapなんかｗ）こまめにみんなが使ってないようなものを探している。
inuit.cssそれ自体は非常に簡素なもので、コアのcssオンリーだとgridレイアウトすら対応してない。ただHTML5の要素の記述もある。特徴としてデフォルトで使っても文字が非常に読みやすいことがあり。大きさ、フォント、マージン、色非常にバランスよく配置、設定されている。また、イメージをマージンつけて左側に回り込ませて配置するといったちょっとしたユーティリティな使い方ができる。img要素にclass=&#34;left&#34;を付ければOK。
 &amp;lt;p&amp;gt; &amp;lt;img src=&#34;http://yusukebe.com/images/childfood.jpg&#34; class=&#34;left&#34; /&amp;gt; テキスト..... &amp;lt;/p&amp;gt;  gridレイアウトに対応してないと言っても、ダウンロードしたファイルに同封されている「inuit.grid.css」というものを読み込みさえすればclass属性に指定するだけでレイアウト可能だ。12個のgridで構成されているので、以下のようなマークアップをする。
 &amp;lt;div class=&#34;grids&#34;&amp;gt; &amp;lt;div class=&#34;grid-4&#34;&amp;gt; &amp;lt;h3&amp;gt;サイドバー&amp;lt;/h3&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&#34;grid-8 end&#34;&amp;gt; &amp;lt;h2&amp;gt;コンテンツ&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  「keyword.inuit.css」というものも同封されていて、ulでマークアップしたコンテンツがカンマ区切りの一行になる。使い道があんまり思い当たらないが一応紹介。
 &amp;lt;ul class=&#34;keywords&#34;&amp;gt; &amp;lt;li&amp;gt;りんご&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;バナナ&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;梨&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;ぶどう&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;  似たようにulを水平レイアウトにするなら、「nav」クラスを付けてみればナビゲーションができる。
 &amp;lt;ul class=&#34;nav&#34; style=&#34;margin-left:0;&#34;&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&#34;https://yusukebe.com/&#34;&amp;gt;ホーム&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&#34;https://yusukebe.com/&#34;&amp;gt;アバウト&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&#34;https://yusukebe.com/&#34;&amp;gt;コンタクト&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;  全部を合わせるとこのようなスクリーンショットになる。

と、まぁ、お分かりの通り、inuit.cssはコアは非常にシンプルでかつHTML5に対応し、追加したい機能をplugin、inuit.cssではigloosと呼ばれるもので拡張する形になる。全てを試してないが公式HP上では以下のigloosを取得できる。
 bredcrumb.inuit.css ie6.inuit.css dropdown.inuit.css 12-col.inuit.css annotate.inuit.css keywords.inuit.css centered-nav.inuit.css  このinuit.css。シンプルさゆえ、名前の通り「クールな」CSS Frameworkだと思います。

 
メルマガはじめました。技術的な話題も盛り込みたいと思います。
 メルマガ「ゆーすけべーラジオ」  </description>
    </item>
    
    <item>
      <title>iBooks Authorで「成瀬心美入門」というサンプルを作ってみた</title>
      <link>https://yusukebe.com/posts/2012/0120075050/</link>
      <pubDate>Fri, 20 Jan 2012 16:50:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0120075050/</guid>
      <description> 電子書籍に段々と興味がわいた矢先にAppleからのiBooks Author発表があったためしばらく遊んで見ました。残念ながらiPadを僕は持っていないので実機でのプレビューすらできない状態で悶々としているのですが、このiBooks Author、素晴らしい出来です。先日からiTunes StoreでBeatlesの「Yellow Submarine」のBookが無料でダウンロードできるのですが、ああいった、アニメーションや動画をちりばめたリッチな本や雑誌などが作れてさらに課金も含めた配信までサポートする。そんなすぐそこにある未来を想像するととてもワクワクします（USなどの地域では既に有料コンテンツをユーザーが配信できるみたい）。
で、このiBooks Authorでどれほどの事が可能か使用感をはかりつつも、iTunes Store経由じゃなくとも配信することができるのでちょい「エロ」なコンテンツを作ってみようと試みました。想像したのはよくグラビアアイドルとかが「月刊XXXXXXXX」というようなムックタイプの雑誌に動画とかインタラクティブなコンテンツが埋め込まれたBook。ただ自分はグラビアアイドルには全く興味がないので、AV女優で最近お気に入りな成瀬心美（ここみん）を紹介するBookを作ってみました。あら、「ちょい」エロじゃなくなってる？？ まぁ、iBooks Author のスクリーンショットをご覧あれ。
まずは、Bookの表紙。一応AppleはBookを作る際に様々なテンプレートが選べると謳っているが、6種類でそこまで多くはない。これは「モダンタイプ」というテンプレート。なかなかそれっぽい。

「チャプタ＞セクション＞ページ」と章立てがはっきりしてて迷わないのも割といい。
ウィジェットと呼ばれるメニューからギャラリーを選択するとスライドさせる写真集が容易に作れる。

以下は普通のページ。Wikipediaからのコンテンツを引用した。表組とかはもうKeynoteとかPagesまんまだね。

YouTubeの動画も一度QuickTimeでiPhone/iPad用に変換してからドラッグ＆ドロップで挿入できる。実機の上、埋め込んだ状態で見てみたいものだ。

と、個人的には動画が埋め込めるというのが鍵な気がしていて、短編映像と雑誌を組み合わせたようなものが流行るかどうかはしらないがいくつか出てくると思います。
ちなみに、このBookには最後の方のページにDMM Adultへのアフィリエイトを仕込んであって、その時に電子書籍向けの広告モデルもそのうちあり得るんだろうなぁと考えたりもしました。
さて今回は、成瀬ここみんを紹介するサンプルでiBooks Authorを使ってみました。iPadユーザーの方は以下のリンクから.ibooksというファイルをSafariで見た後にiBooksを起動すればたぶん「成瀬心美入門」が開くはず！
 coco3n.ibooks   
 coco miracle―成瀬心美1st.写真集posted with amazlet at 12.01.20  上野 勇 彩文館出版 売り上げランキング: 2395
 Amazon.co.jp で詳細を見る    </description>
    </item>
    
    <item>
      <title>iPhoneアプリ公開1ヶ月経って「からの」箇条書き</title>
      <link>https://yusukebe.com/posts/2012/0119092221/</link>
      <pubDate>Thu, 19 Jan 2012 18:22:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0119092221/</guid>
      <description>ListTubeという自分にとっての初iPhoneアプリリリースから1ヶ月が経ちいろんな事が分かったり、頭の中で整理されたりしたので箇条書きしてみる。ほんとざっくばらんですが、今まで知らなかった気づきが多数あったので興味深い。
 Objective-Cという言語自体は難しくない むしろ動画扱ったりしたのでプログラミングの基礎体力が問われた Mac一つあれば開発できるのは素敵すぎる（実機で動かすにはちょろっとお金かかる） けど、実機で動かした時の感動度は高い UIKitのFrameworkがほんとよく出来てる っていうかiTunes connectへの登録、つまりApple Storeへ出品するための準備まで一貫してXCodeでできるのもすごい とはいえ正規表現がめんどくさすぎる IDE使いたくなかったけどXCodeなら使えたぉ 3G回線を使った実機の検証がめんどくさい 海外というか英語圏のアプリによいインターフェースのものが多い そういうことからか、何か分からないことがあってググるとStack Overflowが必ず引っかかる 英語の勉強になった UIに関してはスケッチなども重要だけど機能とディスプレイ領域とのバランスを考えていろいろ妄想するとよさそう（次のバージョンに活かす） 一番役に立った書籍は「iOS開発におけるパターンによるオートマティズム」。素晴らしい本だと思う Storyboardは諸事情あってまだ使わない方がよさげ 「pod」っていう名前を付けたアプリはAppleに怒られる（当初はListpodという名前だった） それ以外でrejectされることは無かった 売り上げ状況を見るとテンション上がる 売れないとテンションだだ下がり レビューで叩かれるとさらにテンションだだ下がり ただし、Amebaピグとかのブログのコメント見ると「あーもっと叩かれてる人いるんだなー」と勇気づけられて立ち直る 友達に使って使ってもらうと嬉しい Twitterとかで知らない人から褒められると嬉しい 1か5のレビューをもらえるような（やらせじゃなくて）アプリを作りたい（もちろん5多めで） UI変えなきゃなーと細かいアイコン作り出す 次のバージョン頑張る←今ココ  ということで、ListTubeは現在時期バージョンへ向けて開発を開始してます。もちろん現状のバージョンが「悪い」とは思っていないので気になる人はチェックしてみてください。</description>
    </item>
    
  </channel>
</rss>