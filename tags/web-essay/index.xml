<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Essay on ゆーすけべー日記</title>
    <link>https://yusukebe.com/tags/web-essay/</link>
    <description>Recent content in Web Essay on ゆーすけべー日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>© Copyright yusukebe.com</copyright>
    <lastBuildDate>Mon, 15 Jul 2013 10:04:00 +0900</lastBuildDate>
    
	<atom:link href="https://yusukebe.com/tags/web-essay/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>「Webサービスのつくり方」Kindle版発売とアップデートすべき項目</title>
      <link>https://yusukebe.com/posts/2013/0715010453/</link>
      <pubDate>Mon, 15 Jul 2013 10:04:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0715010453/</guid>
      <description>去年の11月20日に発売した拙作「Webサービスのつくり方」の Amazon Kindle版 が出ましたー！ 出版社である技術評論社さんに頑張ってもらいました次第。

お値段が紙の本よりほんの少々安いくらいなのですが、Kindle読める端末で持ち歩けるのでよろしければどうぞ〜
と推したいところで、書いたからには推すのですが、実は紙の書籍はもちろん、このKindle版にも「アップデートすべき項目」がいくつかあがって来ました。というのもTwitter APIを使った数カ所のコードサンプルが現状では動かなくなっているのです... 出版社さんとは相談しつつ改訂や公式のサポートページでフォローしていきますが、まずはこちらの記事でざっくりと項目と修正案を紹介したいと思います。
 
「ぐだぐだ言ってないでコードを書けよ、ハゲ」で出てくるスクリプト 短いコードをサクっと書くことで検証も出来るよ〜という例でTwitter Search APIを使っているのですが、そのAPIが「1.1」というバージョンへ完全移行してしまったために以下のように掲載されているコードが動きません。
今書くならば「Net::Twitter::Lite」というモジュールを使ってこのようになります。
 use Net::Twitter::Lite::WithAPIv1_1; use Config::Pit; use Encode; use utf8; binmode STDOUT, &#39;:utf8&#39;; my $config = pit_get(&#39;twitter-api&#39;); my $nt = Net::Twitter::Lite::WithAPIv1_1-&amp;gt;new( consumer_key =&amp;gt; $config-&amp;gt;{consumer_key}, consumer_secret =&amp;gt; $config-&amp;gt;{consumer_secret}, access_token =&amp;gt; $config-&amp;gt;{token}, access_token_secret =&amp;gt; $config-&amp;gt;{token_secret} ); my $result = $nt-&amp;gt;search( { q =&amp;gt; &#39;おはよう&#39;, lang =&amp;gt; &#39;ja&#39; } ); for my $tweet ( @{ $result-&amp;gt;{statuses} } ) { print &#34;$tweet-&amp;gt;{text}\n&#34;; print &#34;----------------------------------------\n&#34;; }  検証用のスクリプトなら既存の便利なCPANモジュールに頼っちゃった方がいいっすね。

「30分、JavaScriptでつくるWebサービスの動くモック」に出てくるJS Instagramの写真検索サービスをJavaScriptだけでつくっちゃえ、しかも30分で。という節です。 これまた古いTwitter Search APIを使っているので認証かまさないと動きません。一旦Twitterから離れて似たように面白いサービスがつくれないか？を考えていますが、なかなか思いつかないので、TopsyというTwitterと連動する検索サービスのAPIを利用して同じ挙動を実装してみます。
TopsyのAPIを利用するには、APIキーが必要なので、以下のページから申請をします。
 http://manage.topsy.com/app  ちなみに無料での利用は7,000リクエストまでとなっておりそれ以上はTopsy側とご相談みたいです。モックアップをつくるレベルでは無料のお試しである程度十分だと思います。
このあたりのコードを以下のように修正するとTopsy APIでInstagram検索が叶えられます。
 $(document).ready(function(){ var apikey = &#39;&#39;; $(&#39;#form&#39;).submit(function(){ var query = $(this).</description>
    </item>
    
    <item>
      <title>「Webサービスのつくり方」という本を書きました</title>
      <link>https://yusukebe.com/posts/2012/1113001343/</link>
      <pubDate>Tue, 13 Nov 2012 09:13:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1113001343/</guid>
      <description>以前出版社の方から「本を書かないか？」というお話をいただいて早2年以上。 紆余曲折ありましたが、来る11月20日（火）に本を発売することになりました！ 本の名前はズバリ「Webサービスのつくり方」です。 Amazonでは既に予約可能な状態になっています。

 
どんな本なのか？を特徴と共に紹介しましょう。
1. Webサービスをつくるプロセスを網羅的に 僕は今まで大小合わせてWebサービスを何個もつくってきました。 「つぶして」しまって今では見れないものが多く申し訳ない点もありますが、 サービスをつくることは非常に楽しいことです。
僕の専門分野はおそらく「Webアプリケーションエンジニア」ではありますが、 特に小粒なサービスの場合においては企画をつくったり、プロモーションしたり とWebサービスをつくって運用する全ての行程＝プロセスを一人で踏んでいくことになります。 こうした網羅的なノウハウが一つの本にまとまるってことが、 一つ本書の価値であると思っています。 現にここまで全てをカバーする書籍は現在のところなさそうです。
最近では「スタートアップ」と呼ばれる少数の人で構成されたチームで 新しいサービスを生み出しビジネスへつなげようとすることが盛んに行われつつあります。 また、休日を利用して日曜大工的に自分なりのWebサービスをつくりたい という人もいます。こうした人達にとって本書が役に立てば幸いだなーと思います。
2. エッセイ形式  本書のサブタイトルは『「新しい」を生み出すための33のエッセイ』となっています。 体系的であるか？というよりか散文的であるのが本書の特徴です。 そもそも実はこのBlog「ゆーすけべー日記」の記事とメルマガ「ゆーすけべーラジオ」 で連載していたコンテンツをまとめたのが本書になります。 その都合上、結果的にエッセイっぽくなったとも言えますが、オライリーのHackシリーズ のように「どこから読んでもいい、自分の今に合った内容を読める」 という構成になっているのではないでしょうか。
エッセイと言えば、僕は村上春樹さんのエッセイがすごく好きなので、 ああいったノリでまとめられれば嬉しいなーと思っていたのは裏話ですね。
3. エンジニア目線 僕がやはりエンジニアであり、その周辺のカルチャーが好きだということで、 特に第1章の「心構えと下準備」ではその話題やエピソードが収録されています。 例えば dankogai さんや amachang との馴れ初め的な話や、 ライブラリのエコサイクルなどについても言及しています。 若干Webサービスをつくるという点からは離れ気味かな？と思われそうですが、 是非とも伝えたい部分です。
4. 普通の技術書とは違う体裁 いわゆる技術書からは逸脱して「よりポップに、だけども品のある」感じを目指して、 装丁等を組んでもらいました。 例えば、一般的な技術本だと、カバーのデザインをお任せするケースがよくあるらしいですが、 僕は積極的に意見を出して、デザイナーさんとも直接お話して決めていきました。 今のカバーには満足してますし、「手にとりやすい」デザインになったのではないでしょうか。

 
本書のコンテンツを紹介するにおいて一番分かりやすいのは、 どんな一区切りのエッセイが収録されているか を列挙することです。以下に記載します。
第1章 心構えと下準備  「ぐだぐだ言ってないでコードを書けよ、ハゲ」 Mac一つあれば... エディタという道具 なければつくる 言語習得にまつわるエピソード データ表現について分かった瞬間 僕がPerlを使うことから見る言語の選択 ブログの効用 勉強会に飛び込む ライブラリという文化  第2章 企画  実装までにつくる「企画」の全て アイデアの発想法 そこに潜むリスク  第3章 設計  ユースケースを書こう データベース設計 クールなURI? Webサービスを動かすための要素  第4章 開発  30分、JavaScriptでつくるWebサービスの動くモック 月額980円のさくらVPSを個人用に使い倒す Web APIで巨人の肩の上に立つ いかにして大量のおっぱい画像をダウンロードするか 全裸で学ぶMVC事始め MVCのMについて WAFあれこれ テストを書こう イカ娘でTwitter OAuth認証 CSS Frameworkを持つ  第5章 プロモーションと運用  Webサービス、最初の宣伝 「普通の」サーバ構成 運用してこそWebサービス Webアプリのパフォーマンスアップ作戦 キャッシュ、キャッシュ、キャッシュ サービスをスケールさせる時  いかがですかね？もし気になる事項があったら、発売後本屋さんで立ち読みしてみてください。</description>
    </item>
    
    <item>
      <title>実装までにする7つの企画作業</title>
      <link>https://yusukebe.com/posts/2012/0507112346/</link>
      <pubDate>Mon, 07 May 2012 20:23:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0507112346/</guid>
      <description> メルマガ「ゆーすけべーラジオ」にてWebサービス/アプリをつくるにあたっての僕なりのエッセイを連載中です。先週は実装前に行う企画作業についてまとめてみたのですが、評判がいいので、折角ですしBlogで公開させていただきます。特に複数名でのものづくりに参考にしてみてください！
 
実装までにする7つの企画作業 何度か述べている通り、Webサービスにおいて「何を」つくるかは最も重要なことであり、いくら崇高な技術を持っていても「何を」つくるかによって、その技術が生きるか死ぬかが決まってきます。何をつくるかをしっかり決めることにより、実際に本番用のコードを書く実装の段階にも確信が持てますし、リリースした際のフィードバックも活きてくるでしょう。世の中でよく使われているサービスやアプリを見るとアイデアに富んだ今まで無かったと言われるような「何」がしっかりとしたものが多いと思います。
こうしたサービスの企画をつくるに当たっては各自の流儀に負うところが多く、世に言う企画書の書き方が十人十色のように、何を持って企画とするかも人それぞれです。また、各々のやり方といっても「企画」というものをうまく定型化できずに、頭の中でぼんやりと抱いているものを企画としてしまっているケースが多いかもしれません。特に複数人によるチームで企画を決める時に、皆がそのような意識であると企画をつめるに当たって「何を決めればいいのか？」が明確化されずに何となく実装に入ってしまうことも多々あります。ものづくりをしていて、自分（達）はいったい何がつくりたかったのか？と路頭に迷うことは最悪のケースです。
今回は、いまいち定型化しずらいとされている企画のつくり方をいくつかの段階に分けて解説していきます。これらは僕がデザイン思考で著名な奥出直人氏の研究会で長年学んだことや東大MOTで有名な宮田秀明氏の書籍「仕事のやり方間違えてます」に記載されていた事柄をまとめた結果でもあります。まず、企画と僕が言っているものには以下7つの項目を決めることです。
 哲学 アイデア テーマ コンセプト 名前 デザイン 内部設計  それでは一つ一つ見ていきましょう。
 
1. 哲学 個々人が持っている特定の興味に関する揺るがない気持ちのことです。サービスやアプリをつくる原動力の根底になります。
例えば、今ではiPhoneなどのスマートフォンに取って代わってしまっているかもしれませんが、よいプロダクトの例としてAppleのiPodを挙げて行きましょう。iPodを開発した人のおそらく根底にあるのは「音楽をもっと楽しみたい」という揺るがない気持ちです。そこに「なぜ音楽を楽しむ必要があるのか？」といった問いに対する理論的な理由は存在しなくてよいのです。「『音楽が好きだから』もっと身近にいつでも楽しめていいじゃないか」と反論できればいいです。各々の日々の生活から得られる「音楽が好き」といった強い気持ちが哲学として反映されるのです。
企画を考えていく上で後述するアイデアやコンセプトの部分は右往左往するかもしれませんが、哲学の部分は決して変わらないように日々興味のあることをピックアップしていけばよいでしょう。そして、それを一言で言い表すとよりよいです。
2. アイデア 哲学を叶えるための個別具体的なアイデアです。一つのサービスやアプリ、プロダクトに対してたくさんのアイデアがあってよいでしょう。
「これが欲しい」という哲学から発想していくと細かいアイデアがいくつか浮かんでくると思います。例えば、iPodの場合を考えてみましょう。いくつかアイデアと思われるものを汲み取ることができます。
 所有している曲全てを持ち歩ける ディスプレイとコントローラだけのなるべく小さいサイズのデバイス 専用のソフトウェア（iTunes）で曲を管理しデバイスと同期させる コントローラは曲の選択とプレイヤーの操作だけできればよい アルバム別だけじゃなくてアーティスト別や年代別、ジャンル別などで再生できる 再生中は曲のアートワークをかっこよく表示させる 販売サイト（iTunes Music Store）で曲を買ったらそのままデバイスにも同期される  こうしたアイデアは最終的にiPodというプロダクトに活かされているものですが、おそらく企画をつくるに当たって没になったアイデアもいくつかあることでしょう。たくさんの個別具体的なアイデアを持っておき、後ほど吟味するとよいです。
3. テーマ テーマとは哲学をより具体的にした勝負する領域のことを言います。アイデアを出していく過程などで固まっていくことが多いです。
iPodの場合は「携帯音楽プレイヤー」がテーマと言えるでしょう。ただ、Appleの戦略としてはiPodが単なる単体のプレイヤーというデバイスにとどまっていないのが妙でしょう。というのはiPodは音楽ソフトであるiTunesとオンラインの音楽販売ショップであるiTunes Music Storeとの連動により活かされる点が多分にあるからです。
AppleのiPod、iTunes、iTunes Music Storeのような絶妙なコンビネーションを考える必要はありませんが、テーマを定めることは必要です。テーマを認識することで、同じテーマの既存サービスやアプリを調査することができるからです。
4. コンセプト アイデアがたくさん出て、テーマも定まったならば、自ずと何を作るかのイメージが頭の中に浮かぶはずです。それを一言で表したものがコンセプトです。コンセプトはテーマに沿った、アイデアを形成するための骨格のようなものです。
iPodの場合だとコンセプトは以下の文章になるでしょう。
専用の音楽ソフトを経由して所有する曲全てを持ち運べる携帯型音楽プレイヤー
 肝は「所有する曲全てを持ち運べる」という点ですね。このコンセプトに対して上記で挙げた個別のアイデアが付随してそれ何であるかを説明するという具合になります。このようにコンセプトとアイデア、テーマと分けて考えることにより、人に説明がつきやすい企画になります。例えば、「私たちがつくるものは」とはじめテーマ、コンセプト、アイデアという順番で説明していけば、抽象的なところからより具体的なところへと解説するので相手にもイメージが着きやすくなります。説明しやすいということはその企画は自分（達）の中でも明確化されているということなのです。
5. 名前 そのプロダクト、サービス、アプリの名前を決めることは非常に重要なことです。
焦る必要はありませんが、なるべく早い段階で名前を決めておくことをオススメします。もちろん仮でもよいです。というのは、これからつくろうとしているものを自分（達）で呼ぶのに名前が無いと気持ちが入りませんし、先に進まないケースもあります。例えばこれまで決まったアイデアやコンセプトなどの企画をまとめてデジタル化したい時、PCに作業用のフォルダをつくるとします。その際に仮でもいいですから名前があればそれを使ってフォルダ名とすればよいわけです。名前が無かったらどんな名前でフォルダ名を作ればいいか無駄に途方に暮れるかもしれません。些細な例でしたが、同じような悩みには多々遭遇するはずです。
6. デザイン デザインというと見た目のデザインが思い浮かぶかもしれませんが、それだけではなく、全体のディテールを詳細に決めていく作業です。モックアップと呼ばれる一部の機能を叶える試作品をつくったり、同じテーマのプロダクトを調査する過程で固まっていきます。
コンセプトやアイデアを洗練させていくと無駄なものが削ぎ落され、最低限のサービスやアプリに対する機能が抽出されます。それらに対してユーザーがどういう風に使っていくかを具体的なイラストなどを元に試行錯誤していく作業を行っていきます。iPodの場合は「デザインがよい」という評判を聞きますが、それは機能を絞り込みそこに対するディテールをいかに使いやすく突き詰めたかの結果によるものでもあります。実装作業に入る前にiPodのような物理的なものならば木材や粘土などを用いたモックアップを作ることや、Webサービスであれば紙にUIのイラストを書くような作業を何度も繰り返すとよいでしょう。デザインに関しては様々な具現化の方法があると思いますが、複数人のプロジェクトにおいても、不思議と一つの形に定まっていくことが多いです。
7. 内部設計 今まではサービスやプロダクトを外から見た際の企画について考えてきましたが、内部的にどのように実現するかを設計していくことももちろん必要です。
Webサービスならば、情報の区分けを行いデータモデルを記述する、物理的な観点とソフトウェア的観点をあわせて大きな枠組みを考えるアーキテクチャ図を書くといった作業です。ユースケースと呼ばれるユーザーから見たシステムの振る舞いを書いてから作業に移るとよいでしょう。極力ユースケースに従った形で最低限の内部構造を持つことを考えていくと最初は作りやすいです。また、Webサービスの場合、他にもサービスのエンドポイントを決めるURI設計や、内部のクラス構造を考えるAPI設計なども設計作業に入ります。専用のモデリングツールと呼ばれるソフトウェアを使うのもよいですが、まずは、大きめの紙とペンで行います。
まとめ 以上、サービスを実装する前の企画とは何を決めなくてはいけないかを、7項目に分けて紹介してきました。この7つの項目はWebサービスだけではなく、ものづくり全てにある程度共通することではないかと思います。まずは、何度かこの項目に従ってつくり、自分なりのものづくりの方法を築いていくのもいいと思います。
 
参考  ゆーすけべーラジオ デザイン思考の道具箱 仕事のやり方間違えてます  </description>
    </item>
    
    <item>
      <title>イカ娘でTwitter OAuth認証</title>
      <link>https://yusukebe.com/posts/2012/0327085645/</link>
      <pubDate>Tue, 27 Mar 2012 17:56:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0327085645/</guid>
      <description>Webサービスのログイン方法の一つに「Twitterログイン」が最近多く見られるようになってきました。 サイト上でのユーザー登録無しでTwitterアカウントを引き回すことも工夫によってはできますので、 ユーザーや開発者にとって手間が省けるという利点があるのではないでしょうか。 今回はアニメ「イカ娘」を題材とした簡単なWebアプリを作りつつTwitterのOAuth認証の流れと実装を見ていきましょう。
Twitter OAuth認証の流れ Twitter OAuthでは主にキーと鍵のペアの値がいくつかでてきて混乱しがちなのでイカ、おっと間違えた、以下にまとめておきます。
 「コンシューマトークン、コンシューマシークレット」 アプリケーション固有のキーと鍵。Twitter Developerのページで発行される。アプリケーション開発者以外に知らせてはいけず、通常は設定ファイルなどに記載してアプリケーションで読み込ませる。 「リクエストトークン、リクエストトークンシークレット」 アプリと連携する際にTwitterのサイトでログインをしてもらうが、そのログイン画面へリダイレクトさせるURLが発行されるタイミングと同じくらいで使うトークン。リダイレクトさせる前に取得し、クッキーなどで保持し後ほど自サイトにユーザーが戻ってきた時に照合させる。 「アクセストークン、アクセストークンシークレット」 そのアプリにおけるユーザー固有のキーと鍵。これと上記のコンシューマトークン＆シークレットがあればTwitterにアプリケーションでログインが可能になりタイムラインの取得などができるようになる。実際にはTwitter上の認証画面から返ってきた際に初めて取得できる。  そして上記の言葉を使った、カタカナばかりでちょっと分かりにくい、開発の流れはこのようなものです。
 Twitter Developerのページにてアプリケーションを登録 アプリケーション固有のコンシューマトークンというキーとコンシューマトークンシークレットという鍵をもらう アプリを実装。設定からコンシューマトークン＆シークレットを呼び出せるようにしておく コンシューマトークン＆シークレットを元にリクエストトークンとリクエストトークンシークレットを作り出す リクエストトークン＆シークレットをクッキーで保持しておく Twitterの認証ページにリダイレクトさせる コールバックURLにGETパラメータの引数付きで返ってくるのでそれを元にユーザー固有のアクセストークン、アクセストークンシークレットを取得 アクセストークン＆シークレットをクッキーで保持しておく コンシューマキー＆シークレット、アクセストークン＆シークレットを使ってログイン、タイムラインなどを取得  サンプルアプリの方針 Twitterログインをして自分のタイムラインを見られるような機能をサンプルとして作成したいのですが、 少々それだけだと味気ないです。 Perlのライブラリ置き場CPANを漁っていると「Acme::Ikamusume」なる興味深いモジュールを発見したのでそれを使ったアプリを考えてみます。このAcme::Ikamusume、動かすのにMeCabという形態素解析のソフトが必要なのが多少敷居が高いですが、簡単に使えてかつ面白いです。
 my $text = Acme::Ikamusume-&amp;gt;geso(&#39;変更したいテキスト&#39;);  とするとアニメ「イカ娘」でイカちゃんがしゃべるような言葉に変換されます。自分のTwitterのタイムラインがイカ娘変換されるとどうなるか！？おもしろいんじゃなイカ！？ってことでやってみます。ちなみに作者の富田さんが自身でイカ娘変換を簡単に試せるサービスとAPIを公開していますのでそちらもご参考ください。
 侵略！ イカ娘変換でゲソ！  実装の方針ですが、PerlのMojolicious Liteを使ったものとさせていただきます。上記の流れを最低限の機能で追うので他の言語でも応用できると思います。また、Mojolicious Liteのセッション管理は若干貧弱なためPlack::Sessionを代わりに、Twitter APIの処理にはNet::Twitter::Liteを使います。
アプリケーションの登録とコンシューマキーの取得 まず、Twitter Developer のページでこれから作るアプリケーションの情報を登録します。
いくつかの項目は後から変更が効きますが「Name」の欄は変更がきかなかったり早い物勝ちだったりするので慎重に考えて入力しましょう。アプリケーションを登録したらいつでも「My Applications」からそのアプリを選んで、設定情報を確認することができます。コンシューマキー＆シークレットである「Consumer key」「Consumer secret」という文字列が表示されていると思うので、それを後ほど使います。
アプリケーションの実装、設定からキーを呼び出す いよいよアプリケーションの実装に入っていきます。mojoコマンドを使ってアプリケーションの雛形を作ったら「myapp.conf」などの名前で設定ファイルを作り、そこにコンシューマキー＆シークレットを書き込みます。またアプリケーション内でConfig Pluginを使い、設定を呼び出します。
myapp.conf  { consumer_key =&amp;gt; &#39;xxxxxxxxxxxxxxxxxxxxxx&#39;, consumer_secret =&amp;gt; &#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;, };  myapp.pl  my $config = plugin(&#39;Config&#39;); my $nt = Net::Twitter::Lite-&amp;gt;new( consumer_key =&amp;gt; $config-&amp;gt;{consumer_key}, consumer_secret =&amp;gt; $config-&amp;gt;{consumer_secret}, );  consumer_keyとconsumer_secretをそのまま渡してNet::Twitter::Liteのインスタンスを作ってそれを使い回していきます。
Twitterログイン画面に飛ばす 次に「/login」にアクセスするとTwitterのログイン画面に飛ぶために、URLを取得しリダイレクトさせる実装をします。 その際にリクエストトークン＆シークレットをセッションで保持しておくのを忘れないようにします。
 get &#39;/login&#39; =&amp;gt; sub { my $self = shift; my $session = Plack::Session-&amp;gt;new( $self-&amp;gt;req-&amp;gt;env ); my $url = $nt-&amp;gt;get_authorization_url( callback =&amp;gt; $self-&amp;gt;req-&amp;gt;url-&amp;gt;base .</description>
    </item>
    
    <item>
      <title>Webサービス、最初の宣伝</title>
      <link>https://yusukebe.com/posts/2012/0322010646/</link>
      <pubDate>Thu, 22 Mar 2012 10:06:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0322010646/</guid>
      <description>Webサービスのプロモーション？について個人的にまとめてみます。
 
Webサービスができたら想定するユーザーに使ってもらわないと寂しいところです。 そこでWebサービスを多くの人に知ってもらうための宣伝をしましょう。 今回はサービスを作った作者が一人でできる範囲を考え、 以下の3つの手段を使った初期のプロモーションについて僕なりのやり方を紹介します。
 プレスリリース 自身のBlogでの紹介 Twitterでの拡散、はてなブックマークでの注目  今まで僕は個人で、もしくは「会社名義だけれども一人で」WebサービスやiPhoneアプリを作った際に、 上記のツールを使いながら意図的に宣伝を行い効果測定をしてきました。 プロモーションのプロではもちろん無いながらも工夫と、ある程度の努力をしています。 中には全く不発のもあり、とはいえ、それはサービス自体がそもそも面白くないケースがあったりで、 だんだんと作ったモノに見合った宣伝が出来つつあるのではないかと思います。
先日弊社ワディット名義でリリースした「僕のラジオ」というiPhoneアプリはうまくいった例です。 僕のBlogでの初期の宣伝とTwitterやはてなブックマークでの効果は非常に高く、 またプレスリリースも大手メディアに3件取り上げられました。
そのため、iTunes Store内の「ミュージック」カテゴリで瞬間風速2位と出だしとしては最高の結果を得ることができました。 ちなみに、Webサービスでの宣伝もiPhoneアプリのそれも僕にとっては全くやり方は同じ手法をとっています。
では、そのサービスやアプリの宣伝の手法について、サービスが完成してから公開まで何をしていくのか、 順を追ってみていきます。
 
1.自分のサービスについて記述する まず、これはサービスが完成する前から考えなくてはいけないことです。 そのサービスが何を目標としていて何ができるのか？だけでも最低限文章として書けるようにしておきます。 事細かく書く必要はなく、例えば
□□□のために△△△ができるサービス「○○○」
 というような一言でよいと思います。 「○○○」にはサービス名が入り、全体で100文字弱の分量くらいを想定します。 しっかりと文言までも気にしながら作っておくと何かと便利です。 例えばサービス内の説明にも使うこともできますし、そのままプレスリリースのダイジェストになります。 また、友達などにサービスを紹介した際「それってどんなサービスなの？」 という友達が真っ先に思い浮かぶであろう質問に簡潔に答えることができる材料となります。
もうちょっとこの「□□□のために△△△ができる」という部分を噛み砕きましょう。 「□□□のために」というのはユーザーから見たサービスに対しての「Why」の答えになります。 「なぜそのサービスを使うのか？そのサービスを使う旨みはどこか？＝□□□のためにです」と答えられればよいと思います。 例えば冒頭で紹介した僕のラジオの場合だと「新しい音楽に出会える」ためと定義してあります。 「△△△ができる」というのはサービスに対する「What」、つまり「何が出来るの？」の答えの部分です。 具体的にはサービスの個々の機能列挙になると思うのですが、そこから一番の特徴を抜き出すのがコツかと思います。
まとめますと、 WhyもWhatもどちらも簡潔に記述することでサービスのイメージを説得力のある形で相手に伝えることができます。
2. タイミングを見計らう サービスが完成し、それ自身に対する「記述」も練られてきたら、一般に公開するタイミングを見計らいましょう。 「一般に公開するタイミング」とはプレスリリースを送信し、自身のBlogなどで公開することを言います。 まぁ僕の今回のケースですと、自分でタイミングをコントロールできるので、いつ行ってもぶっちゃけいいのですが、 やるならより多くの人の目に止まる時間を狙います。
まずは日にちですが平日がやはりよいと思います。 休日にプレスリリースを送ったとするとメディアが休みの可能性が高くなり、 するとどうしても見られるのが休日明けになってしまいます。 で、世の中的に火曜日がいいとか木曜日がいいとか言われてるかもですが、 個人的には平日ならばいつでもいいかなぁと考えています。 プレスリリースに限って言えば、メディアが稼働中している平日のオフィスタイムめがけて送れば、 目に留まる可能性はそれほど変わりないと思うのです。
次に時間ですが、これは注意した方がいいかもです。 Blog記事、プレスリリースどちらにしてもこちらが発信してから情報が見られるまでのタイムラグが発生することを意識します。 プレスリリースの場合、担当者はメールボックスに溜まった大量のリリース文面を選り分けながら見て行き、 そこから気になるものをピックアップしある程度時間に追われながらメディアに乗せる記事にしていきます。 こうした一連の流れを想像しながらこの時間帯に送ったら見られそうなどと考えます。
今の僕ならばなのですが、朝一番、出社前の午前7時くらいまでの時間にプレスリリースを打つか、 それが間に合わなければ夕方の掲載を狙って昼までにって感じですね。 Blog記事に関しては午前中11時くらいまでの公開がいいと思います。
タイミングを見計らって次はいよいよプレスリリースを送ります。
3. プレスリリースを打つ プレスリリースというと大げさな感じがしますが、 僕がやっているのはIT系メディアの、プレスリリースを受けつけるメールアドレスにリリース文をメールで送るというだけです。 プレスリリース配信会社なるものが存在しますがそれらは費用対効果が低いので使ってないです。
メールアドレスをそのまま掲載するのはやめておきますがだいたい以下のようなメディアに配信しています。
 ITmedia japan.internet.com CNET Japan マイナビニュース TechChrunch Japan TechWave etc.  こうしたメディアのサイトに行くと「お問い合わせ」のメニューからプレスリリースの受付について書いてあるケースがあって、 そこからメールアドレスを取得することができたりしますね。
配信先のメールアドレス一覧を作成したらリリース文面を作ります。もしくは予め用意しておきます。 僕がいつも使っているテンプレートがあるのでそれを紹介してみましょう。
 【プレスリリース】△△△なWebサービス「○○○」公開 20xx年xx月xx日 株式会社xxxxx(代表 xxxxx) -------------------------------------------------------- (株)xxxxxx、□□□のために△△△できる「○○○」をリリース サービスURL: http://サービスのURL -------------------------------------------------------- xx月xx日、株式会社xxxxx（代表 xxxxxx）は、.</description>
    </item>
    
    <item>
      <title>Webアプリのパフォーマンスアップ作戦</title>
      <link>https://yusukebe.com/posts/2012/0306121114/</link>
      <pubDate>Tue, 06 Mar 2012 21:11:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0306121114/</guid>
      <description>予定している機能を実現するアプリが完成するだけでWebサービスが成り立つわけではありません。 運用の最中にパフォーマンスにまつわる問題が出てくる可能性があります。 それは突然大きなトラフィックがやってきたというような時だけではありません。 知識が無いうちですと、いざ運用に乗せてみるとずいぶんとサイトの読み込みが遅いといったケースが発生することもあります。
僕はいくつかのエロサイトを管理しているのですが、 その中に月間700万PVのアクセスをいただいている「サイトA」があります。 サイトAの場合、トラフィックもそこまで無かった当初からパフォーマンスに関する問題がいくつか発生し、 その都度調べては実践で試して対策をしてきました。また、できる限り少ないリソースでの運用を目指しています。 今回はWebアプリのパーフォマンスアップ作戦として、 サイトAでの運用経験からのいくつかの方針やTipsを紹介したいと思います。
 
それはどこのパフォーマンス問題？ まず、パフォーマンスといってもWebアプリの場合、どこがボトルネックになっているか？ その「どこ」を把握することが大事です。単に「Webサイトが遅いよ」と言っても、 Webページ自体のレスポンスを返すのが遅いのか、ページ内で使われている画像の配信が遅いのか、描画が遅いのか... 様々なケースが考えられます。 そこで、大きく切り分けて以下の3つでパフォーマンスを考えるといいと思っています。
 バックエンド、アプリ部分のリクエストを処理する際の性能 フロントエンド、アプリ部分以外のページ全体を構成するパーツ郡の配信性能 クライアント、ページ全体を描画する際にクライアントにどれだけ負荷をかけるかの性能  今回はあえて、フロントエンドとクライアントを分けて考えています。 クライアントは人間がページを見る場合ですと、 昨今、マシンの性能が上がっているので、ある程度負荷をかけてもいいところかもしれませんが、意識することは必要です。
バックエンドの性能計測 パフォーマンスに対する問題を解決するには、対策と結果をどちらも把握しなくてはいけません。 それには結果に対する計測が必要になってきます。ちなみに、最初に言っておきますと、 計測の原則として常に同じ環境で計測するというのが前提となってきます。
さて、バックエンドの性能を計測するには一般的にApache Benchmark「ab」というコマンドが使われています。 その名の通りApacheに付属しているツールです。
「http://127.0.0.1:5000/」にリクエストしてパフォーマンスを計測するには以下のようなコマンドを実行します。
 $ ab -n 100 -c 10 &#34;http://127.0.0.1:5000/&#34;  オプションの「-n」はリクエストの回数、「-c」は同時接続数を意味します。結果は以下のように出力されます。
 Benchmarking 127.0.0.1 (be patient).....done Server Software: Server Hostname: 127.0.0.1 Server Port: 5000 Document Path: / Document Length: 271 bytes Concurrency Level: 10 Time taken for tests: 0.227 seconds Complete requests: 100 Failed requests: 0 Write errors: 0 Total transferred: 44000 bytes HTML transferred: 27100 bytes Requests per second: 440.95 [#/sec] (mean) Time per request: 22.</description>
    </item>
    
    <item>
      <title>全裸で学ぶMVC事始め</title>
      <link>https://yusukebe.com/posts/2012/0305211542/</link>
      <pubDate>Tue, 06 Mar 2012 06:15:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0305211542/</guid>
      <description>一般的なWeb Application Framework（WAF）ではMVCという設計及び実装における概念が取り入れられています。 MVCに従ってつくるのが全てではありませんが、 WAFを使うと共に、一度はMVCを用いたWebアプリの開発経験はしておいた方がよいと思います。 MVCはモデル（Model）、ビュー（View）、コントローラ（Controller）の3つの単語を組み合わせた言葉で、 この3つで概念が成り立っています。 クライアントがWebに対してリクエストをした時に、これら3つがそれぞれ連動して結果を返します。 一般的には以下のような処理経路をたどります。
 クライアントがWebサイトにリクエスト コントローラがリクエストの処理を行い、モデルとビューを動かす 必要に応じてモデルを呼び出す 結果のデータをビューに渡す ビューがHTML化などをしたものをクライアントに表示する  MVCという概念を学ぶにはこうした一連の流れを網羅する小さなサンプルをつくるのが一番取っ付きやすい気がします。 そこで今回は「全裸で学ぶMVC事始め」と題し、 zenrizeというテキスト処理を行うだけのWebサービスをつくってみたいと思います。
zenrize zenrizeという聞き慣れない言葉が出てきましたが、これは単に僕がつくった言葉です。 zenrizeは「全裸bot」というsugyanがつくった 非常にくだらないTwitterボットの内部で行われている処理を指します。 全裸botではテキストの適切な位置に「全裸で」というフレーズを付け加えることにより、 Twitterのつぶやきを丸裸にします。 例えば、
これから歯磨きをするよ
 という文章はおそらく以下のようにzenrize処理されます。
これから全裸で歯磨きをするよ
 全裸botでは作者sugyanによる試行錯誤が行われているのですが、 今回はzenrizeを単純に「文章内の動詞の前に【全裸で】を必ずつける」と定義してみます。
Yahoo! 形態素解析APIを使う 日本語の文章内の品詞を特定するには形態素解析と呼ばれる処理をします。 お手軽に実装するには、Yahoo! APIで提供されている形態素解析APIを利用したいところです。
一からWeb APIにリクエストをし結果をパースするプログラムを書かずに今回は、 CPANモジュールから「WebService::YahooJapan::WebMA」を使ってみたいと思います。
簡単なスクリプトでzenrizeがされるかを試してみましょう。
 use strict; use warnings; use WebService::YahooJapan::WebMA; use utf8; $WebService::YahooJapan::WebMA::APIBase = &#39;http://jlp.yahooapis.jp/MAService/V1/parse&#39;; my $api = WebService::YahooJapan::WebMA-&amp;gt;new( appid =&amp;gt; &#39;yourappid&#39;, ); my $result = $api-&amp;gt;parse( sentence =&amp;gt; &#39;起きたのでご飯を食べます&#39; ) or die $api-&amp;gt;error; my $ma_result = $result-&amp;gt;{ma_result}; my $text = &#39;&#39;; for my $word ( @{ $ma_result-&amp;gt;{word_list} } ) { if ( $word-&amp;gt;{pos} eq &#39;動詞&#39; ) { $text .= &#34;</description>
    </item>
    
    <item>
      <title>CSS Frameworkを持つ</title>
      <link>https://yusukebe.com/posts/2012/0304225231/</link>
      <pubDate>Mon, 05 Mar 2012 07:52:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0304225231/</guid>
      <description>例えば、Webサービスのフロントエンドのコードを書き始める時にまず何をするでしょうか？ デザインスケッチや画像を元にHTMLとCSSを記述していくことになると思います。 少なくとも僕はそうですね。 理論的にはHTMLだけでもWebサービスを作ることはもちろんできますが、 見た目を少しでも調整したいとなるとCSSが必要になります。 例えばCSSを使わないHTMLの場合、いくら単純なレイアウトだとしても、 デフォルトのリンクの色を変えたかったり、フォントを変更したかったり、 要素ごとの余白をどうにかしかったりと最低限の要望が出てきます。 こうした最低限のCSSに対するニーズは共通化して自分なりのCSS Frameworkとして持っておくとよいと思います。 近頃、一からCSSを記述しなくなったのもこうした考え方のおかげです。
今Web上で配布されて利用可能なCSS Framworkが非常に増えています。 僕も色々と探しては使ってみています。よく使われている、 もしくは僕が使っているCSS Framworkには以下のようなものがあります。
 Blueprint 960.gs Bluetrip YUI CSS inuit.css Twitter bootstrap jQuery UI CSS Framework Less Framework  こうした数あるFramworkのうち、お気に入りを見つけるのもよし、 参考にして自分なりのCSS Frameworkを作るのもよいと思います。 そして結果的に「CSS Frameworkを持つ」ことになると開発が効率的になるのかなぁと。
では、CSS Frameworkでは何が出来るのかを見て行きます。 そのことで、自作のFrameworkを作る際にもどのような要素を考慮すればいいかが分かると思います。 分かりやすい例として以前から使っているBluetripというCSS Frameworkを紹介します。 BluetripはBlueprintや960.gsなど様々なFrameworkのいいとこ取りをした、けれども最低限のFrameworkです。
 
スタイルの初期化 CSS Frameworkではスタイルの初期化をしてくれるのが一番の効用かもしれません。 Bluetripの.cssファイルを見ると最初の冒頭でリセットと呼ばれる該当する要素に対してのマージンやパディングの無効化、 行間の調整などが一気に行われています。 ヘッダー要素、マージンとパディングに限れば以下のようなCSSになります。
 h1,h2,h3,h4,h5,h6{margin:0;padding:0;}  そしてその後、要素ごとに適切なスタイルを、この場合だとマージンやパディングを設定しています。 以下はヘッダー要素の記述です。
 h1 { margin: 1em 0 .5em; } h2 { margin: 1.07em 0 .535em; } h3 { margin: 1.14em 0 .57em; } h4 { margin: 1.23em 0 .615em; } h5 { margin: 1.33em 0 .67em; } h6 { margin: 1.6em 0 .8em; }  配布されているCSS Frameworkはおそらく作者のポリシーも含んだマージンや行間、 配色などの設定がなされていると思われます。そのまま使ってもよいですし、 多少の修正を加えることもCSSを上書きするか、修正などすれば容易です。 このスタイルの初期化によってプレーンな構造のHTMLがより見やすくなってくれます。 また、ブラウザごとの依存を吸収してくれる作用もあります。</description>
    </item>
    
    <item>
      <title>月額980円のさくらVPSを個人用に使い倒す</title>
      <link>https://yusukebe.com/posts/2012/0301004443/</link>
      <pubDate>Thu, 01 Mar 2012 09:44:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0301004443/</guid>
      <description>Webサービスの運営用にVPSと呼ばれるバーチャル・プライベート・サーバを借りることは昨今よくあることだと思います。 VPSのサーバを借りればroot権限を持てることになるので、自由度が高いサーバ環境を構築することができます。 また、スペックによって価格が違っていて、低いスペックなものだと月額かなり低価格なものが存在します。 僕はその中でも月額980円のさくらVPSを借りていて、それを個人用に限って使っています。 これから紹介するような用途であれば980円でもかなりいけます。 ちなみに980円コースのスペックは2012年3月現在で以下のようなものです。
 メモリ: 512MB HDD: 20GB CPU: 2Core(仮想)   
gitリモートレポジトリ 僕が現行で行っているWebサービスでもiPhoneアプリ開発でもバージョン管理は必要になってきて、 そのためのプライベートなレポジトリが欲しくなります。 githubなどでは無料で公開レポジトリが持てますが、プライベートレポジトリを持つには有料プランが必要です。 こちらを使ってもいいですがだんだんキリがなくなってくるので、 僕は980円VPSにgitのプライベートレポジトリを構築しています。
gitのリモートレポジトリを作るにはgitoliteというソフトがオススメです。 新規ユーザーを追加したり、 新たなレポジトリを追加したりする際に「管理用のレポジトリ」を取ってきてpushするだけで済むのが非常によいですね。 例えばレポジトリ「Hoge」を追加するとします。管理レポジトリを取ってきて
 $ git clone git@yourdomain:gitolite-admin.git $ cd gitolite-admin  「conf/gitolite.conf」に以下を追加します。
 repo Hoge RW+ = @all  そしてcommitしてpush。
 $ git commit -a -m &#39;add Hoge repo.&#39; $ git push  自動的に「Hoge」レポジトリを作ってくれます。
 remote: creating Hoge... remote: Initialized empty Git repository in /home/git/repositories/Hoge.git/  そのままgit cloneすれば空のレポジトリを取ってこれますね。
 $ git clone git@yourdomain:Hoge.git Cloning into Hoge... warning: You appear to have cloned an empty repository.  他にもgitosisなどの管理ツールはありますが、色々ためしてこのgitoliteに落ち着きました。
gitレポジトリビューアー さてgitのリモートレポジトリができたところで、僕はレポジトリ郡の様子をWebブラウザで閲覧したいと思い、 「gitweb.cgi」を設定しました。gitweb.cgiでは個々のレポジトリのコミットログやコードを表示してくれます。
gitweb.cgiはgitのソースコードに同封されています。 いくつかの設定をしてApacheでcgiが実行されるようにすればよいのですが、 僕は980円VPSにApacheを入れていないので特殊な方法で立ち上げてます。 PerlモジュールであるPlackを入れて、
 $ cpanm Plack  以下のような.</description>
    </item>
    
    <item>
      <title>ぼくのかんがえたさいきょうの執筆スタイル</title>
      <link>https://yusukebe.com/posts/2012/0229230036/</link>
      <pubDate>Thu, 01 Mar 2012 08:00:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0229230036/</guid>
      <description> 2年前に「Perlの入門本を書くぞ！」と意気込んでみたものの、執筆が進まず企画はお蔵入り状態になっていました＞＜ とある出版社の編集の方と契約書みたいな（書籍の場合は契約書じゃなくて執筆依頼書だっけな...）の結んだのに！ ただどうしても本を出してみたいという欲望は僕の中にあるので、 状況を打開しようと先月から新たな試みをしています。 2年前からの反省を活かして、テーマの変更と執筆スタイルの改めを行って、 まぁ「これでいけそーかな！」って感じで進めてます。
まだ本が完成されたわけではないのでなんとも言えませんが、 自分にとって方針のまとめ的にそのテーマ変更についてと執筆スタイルを書いてみます。
 
Webサービス全般を網羅的に Perlの入門本というとオライリーの「初めてのPerl」「続・初めてのPerl」が思い浮かびます。
 初めてのPerl 第5版posted with amazlet at 12.03.01  Randal L. Schwartz Tom Phoenix brian d foy オライリージャパン 売り上げランキング: 18481
 Amazon.co.jp で詳細を見る    
ぶっちゃけ僕がそのテーマで書いたとしてこの2冊以上のクオリティを満たすのは不可能に近いなぁとか考えてました。 ならばいっそうテーマを変えてしまえと自分の得意な「Webサービスの企画から実装までのまとめ」を書くことに しました。 編集者さんも僕が苦戦しているのを見てか「ゆーすけべーさんの書きやすいテーマで書いてください」と言われてますし。 Webサービスのつくり方全般に関する本はAmazonで探しても出てこず、 とはいえ、はてなブックマーク等を見ているとそういったテーマのBlog記事はホットエントリーでしばしば見かけるので、 狙い目かなぁと思います。
エッセイ風にまとめる 目次の頭から連続的に埋めて行くというスタイルはある程度緻密な計画が必要なので取っ付きにくいです。 僕は村上春樹さんや向田邦子さんのエッセイが好きなのですが、 そんな気軽な感じでWebサービスのつくり方についてまとめられたらいいなぁと思って 「エッセイ風にまとめる」というスタイルを取っています。 これだとどこから書いてもいいので非常に書きやすいです。
Blogとメルマガで原稿の草案を書く 本Blogやメルマガを定期的に読んでくれている方はお気づきかと思いますが、 書籍の原稿の草案をバンバン載せてます。 文章を書いたらすぐに人に見せたくなるという僕の病気とも言える衝動を押さえることができないです... というのは本当なのですが、見ている人からのフィードバックをすぐに得られて書籍化に向けて修正材料にもなりますし、 ありかなーと。 上記したとおりエッセイ風に書いているのでひとまとまりである程度完結するから掲載しやすいのもいいですね。
Markdownで書く 技術評論社さんのWEB+DB PRESS等、結構な数の雑誌に寄稿した経験があるのですが、 最近ではMarkdownで原稿を提出するケースが多いですね。 今回もそれに習ってMarkdownで原稿書いてます。
Dropboxを利用した自作プレビュー環境 Markdownで書いたらどうしてもHTMLで見たくなりますし、編集者さんとその結果を共有したくなります。 Markdownファイル自体をDropboxの共有フォルダに入れるだけではなく、 今回は自作のプレビュー環境を構築しています。 作る模様は以前Blogに書いたのですが、このような仕組みです。
 Dropboxの共有フォルダに原稿をMarkdownで書いていく 僕と編集者さんだけが知っている自作プレビュー用Webサービスがある そこではDropbox内のMarkdownの文章を自動的にHTMLに変換し表示している readme.mkdnという目次ファイルから書いた分へリンクを張ってあるので状況と内容が逐一分かる！  プレビュー用のCSSを調整しているので奇麗に文章が見れて、かなりいいっすよこれ。
今後 今やりたいのはMarkdownの文章群をePubに変換して、Kindleでプレビューするってことです。 極力本に近い体裁に素早くコンバートして読んでみるってことはフィードバックを自分で得るために必要かと思います。
以上、今このようなスタイルで本を書いているよーというお話でした。 はてさて本は完成するのでしょうか。乞うご期待！
参考  メルマガ「ゆーすけべーラジオ」  </description>
    </item>
    
    <item>
      <title>言語習得にまつわるエピソード</title>
      <link>https://yusukebe.com/posts/2012/0226223542/</link>
      <pubDate>Mon, 27 Feb 2012 07:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0226223542/</guid>
      <description>完全に見逃していた「Kamakura Perl Mongers テクニカルトーク #2」というイベントでtypesterさんが「typester式Perl勉強法」なる題名でPerlの勉強方法についてトークしたとのこと。
今自分なりにも「Webサービスに必要なプログラミングの言語習得」にまつわる話をまとめようと思っていたので、エピソードを交えて書いてみます。
 
Webサービスを作るためにほぼ必須なプログラミングに対する知識。 プログラミング言語の習得法に興味のある方は多いでしょう。
はじめてのプログラミング 僕がはじめてプログラムを書いたのは、大学の情報処理の授業でいきなりJavaを触らせられた時にさかのぼります。 最終課題がJavaアプレットという仕組みを使ってGUIのゲームなりを作るというものでした。 基本的なデータの扱いや操作は分かるのですが、「オブジェクト指向」なるものがやはり馴染まずで、 何をやっているのかサッパリ。ただ課題では誰かが書いたコードをうまくパクることに成功。 当時得意だった映像制作ソフトを使って作った「アニメーションGIF」を埋め込んで見てくれをかっこ良くしたので、 それなりにハッタリの効くゲームができました。おかげで授業の評価は「A」でした。 ちなみにそのゲームの名前はJavaをもじって「ジャバシックパーク」と言い、恐竜を育てる今で言う育成ゲームです。 名前は気に入ってるのですが、まともにプログラミングで作品を作ったという感覚は得られなかったなぁという印象です。
次に受けたプログラミングの授業は「データ構造とアルゴリズム」というもの。これが面白かった。 Cを学びながら最終的には「シェル」と呼ばれるマシンとの対話ソフトを作っていく。 Javaに比べればCはより単純で、結果がコマンドラインですぐわかるような課題を毎回出してくれたので理解が早い。 Cの理解だけなのでいきなりWebサービスを作るのは難しいかもしれませんが、 言語を書いて結果が実行されるってことの楽しさ、ワクワク感に味を占めることができたと思います。
さて、この2つのプログラミングの授業の経験から得られる教訓はこのようなものです。
GUIアプリより書いていて結果がすぐ分かるCLIで学ぼう。 また、いきなりJavaのようなオブジェクト指向必須な言語はきつい
 CLIからはじめる 僕の経験からも学べることですし、例えば「Webサービスを作りたい！」という人ですと、 ついつい、いきなりブラウザで結果が確認できるプログラムを書こうとしがちです。 個人的にはCLIと呼ばれる「コマンドラインインターフェース」のプログラムを作って実行していくのが 言語を習得する際に一番早い、というか気持ちがいい気がします。
例えばの話をします。 言語入門の際には「Hello World」を表示するだけのプログラムを書くのが定石と言われていますので、 それをPerlで書いてみます。もしブラウザで表示させたい！とCGIなるものを作ってみるとこのようなコードになります。
 #!/usr/bin/perl print &#34;Content-type: text/html \n\n&#34;; print &#34;Hello World&#34;;  ここでいきなり躓きがちなのは「Content-Typeほにゃららってなんぞー」ってことです。 しかも、このプログラムが正確に実行されるのかを確かめるにはCGIが動くサーバを用意しなくてはいけません。 めんどくさいし時間がかかります。さらに、ちなむと最近のPerlを使ったWebプログラミングでは、 このようなCGIはあまり使いません。いきなりWebアプリを作ると、 どうしてもサーバの実行環境依存を考えなくてはいけないので言語習得に向いていないと思うのです。
ではCLIで「Hello World」はどうするか。このようなコードになります。
 print &#34;Hello World\n&#34;;  一行になりました！しかも単純明快です。多分Perlを知らない人でも意味はわかると思います。 「printってのが表示させる命令なんだなぁ」と。ちなみに「\n」は改行を表します。
実行も簡単です。Mac OSXを使っているならば、このプログラムを「hello.pl」などの名前にして保存し、 以下のコマンドをターミナルというアプリから起動します。
 $ perl hello.pl  おそらくこれで「Hello World」という文字が出力され、Perlを触ったことの無い人でしたら「Perl処女」を 脱出したことになります。
CLIプログラムを作るということは言語理解そのものを考えるのに最低限のことを書けばよく、 また、実行までの時間が極力短いため、作っては試すという繰り返しがしやすいです。 上記CGIの例の「Content-Typeほにゃららってなんぞー」という疑問に対して答えられる知識は後ほど必要ですが、 いきなりそこで躓く必要はないのです。
とある高校生の話 誰と言うとかなり問題がありそうなので言いませんが、とある高校生の話をします。 ちなみに残念ながら女子高生ではありません。男子高校生です。
YAPC::Asia 2011 Tokyo というPerlのカンファレンスでの出来事。 一度だけお会いしたことのある高校生の方が発表するということで勇んで発表を見に行きました。 主題はなぜ高校生の自分がPerlを使ってプログラミングをするかということで、そのキッカケについて触れられてました。 過去に何度か本を読んだりしてPerlを学ぼうとしたが挫折したという話のあと、面白いことが起こります。 「再び僕がPerlをはじめるキッカケになったのは...」と切り出すと、 僕のBlog「ゆーすけべー日記」が紹介されているではありませんか！
とあるBlogのこの記事に触発されたからです
 そこで見せられたのは過去に書いた 「いかにして効率よく大量のおっぱい画像をダウンロードするか」という記事でした。 題名からして発表会場内は爆笑。僕も声をあげて笑ってしまいました。
該当するBlog記事では「おっぱい」というキーワードで検索をした結果の画像を一気に何千枚も手元にダウンロードするという CLIのプログラムを掲載していました。以下は実行している様子の当時のスクリーンショットです。
高校生の彼は「あくまで」例として「おっぱい画像」に触れていて、 彼曰く、Webから何かをダウンロードするCLIを作ることが楽しいことを知ってPerlにのめり込んで行ったとのことです。
まぁ高校生に対して「おっぱい画像ダウンロードするのっていいよね」ってあまり公に言えないので言いませんが（笑）、 確かに一般的にはクローラーと呼ばれるWeb上のリソースを取得するCLIプログラミングは非常に楽しいです。</description>
    </item>
    
    <item>
      <title>データ表現についてわかった瞬間</title>
      <link>https://yusukebe.com/posts/2012/0223030620/</link>
      <pubDate>Thu, 23 Feb 2012 12:06:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0223030620/</guid>
      <description>データの表現と操作 Webサービス等に必要な言語取得についてです。 プログラミング言語を勉強しようという時にデータの表現方法を把握した瞬間に、 「パッ」とその言語に対する理解が明るくなった気がします。
プログラミングは、抽象的に言えば、目的を果たすために「データ」を「操作する」プログラムを書く行為と呼べるでしょう。 例えば二つの数字を足し算するプログラムを考えてみます。これは「4+3=7」などを機械的に行ってくれるものです。 プログラム内の流れはこのようになるでしょう。
 二つの数字を受け取り、それぞれデータとして保持する 二つのデータを足し算して結果というデータに入れる 結果を出力する  実例を見た方が早いと思います。 この足し算プログラムをエラー処理とかすっ飛ばして分かりやすいPerlのコードにするとこのようになります。
 use strict; #おまじない use warnings; #おまじない my $number1 = $ARGV[0]; #第1引数を変数に入れる my $number2 = $ARGV[1]; #第2引数を変数に入れる my $result = $number1 + $number2; #結果に入れる print &#34;Result: $result\n&#34;;  「sum.pl」などのファイル名で保存して、ターミナルから以下のように実行します。
 $ sum.pl 4 3  「 Result: 7 」という文字列がターミナルに出力されたはずです。 ここで出てきた「 $number1」「 $number2 」「 $result 」というのが、 Perlにおいてスカラーと呼ばれるデータを表す変数になります。 スカラー とはようは数字だったり文字だったりして「4という数字なら4だけだよ」と単一データを表せます。 ここまでの理解はそう難しくないはずです。
配列とハッシュ Perlで言うスカラーを理解したら、次は 配列とハッシュ について把握しようというのが定石です。 配列なら配列のみ、ハッシュならハッシュのみを表現する分にはこれも結構簡単です。
僕の好きな食べ物を適当に列挙するとしましょう。配列を使って以下のように表現できます。
 my @foods = ( &#39;ラーメン&#39;, &#39;寿司&#39;, &#39;カレー&#39;, &#39;スパゲッティ&#39;, &#39;ステーキ&#39; );  @foodsってのには頭から
 ラーメン 寿司 カレー スパゲッティ ステーキ  が入っています。先頭のラーメンを取得したければ「 $foods[0] 」と表現すればよいでしょう。 中に入っている5つの文字列を順番に処理したければこのような「配列の操作」方法があります。
 for my $food (@food) { print &#34;</description>
    </item>
    
    <item>
      <title>無ければつくる</title>
      <link>https://yusukebe.com/posts/2012/0222223527/</link>
      <pubDate>Thu, 23 Feb 2012 07:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0222223527/</guid>
      <description>車輪の再発明 車輪の再発明という言葉があります。ある目的を果たすためのライブラリや先行事例があるにも関わらず、 同じことを叶えるためについつい自分で作ってしまう行為を指します。 例えば、SinatraというRubyの特徴的なWebアプリケーションフレームワークがありますが、 そのPerlバージョンを作ろうとすれば、 他にもDancerやMojolicious::Liteといった似たようなものが、 Perlのライブラリには存在していて「 でも、いいっか！ 」と制作に入るのがまさに「車輪の再発明」な感じです。 車輪の再発明は一般的に非効率だと言われ推奨はされません。 ただ、僕は勉強のためならばよいと思ってSinatraライクなフレームワークを作ってたりもします。 既存の似たようなものを参考にできるため、学ぶことが多いです。 状況によっては再発明は効果的なこともあると思っています。
とはいえやはり、目的を最短で果たすためには車輪の再発明は避けた方がよいでしょう。 Japan Perl Association （JPA）現代表理事の牧大輔さんと お仕事をしたことがあるのですが、その際に彼は以下のように話していました。
車輪の再発明はしてもいいけど、仕事の時は絶対駄目だよ
 この端的な方針は僕も参考にしたいところです。
車輪が無いときは？ しかし、自分がこれをしたいという目的を果たすものが世の中に存在しない時も多々あります。 特に自分一人や数名で使う特殊なケースで最適なものが無いということがよく見受けられるます。 そのような時、あなたがクリエータ、もしくはクリエータを目指すのであれば、「無ければつくる」方針でいきましょう。
書籍執筆のための環境を作る 実は、この記事。将来出版させたい書籍のための原稿の意味も兼ねて書かれています。 編集者さんと連絡しつつ作業をしているのですが、 原稿を書き始めてちらほらと集まってきているのでそのドキュメントを共有したいと先日から思ってました。 文章は記事ごとに小分けにしてMarkdown書式のプレーンテキストで執筆しています。 ならばとDropboxの共有フォルダを作成し、 その中にMarkdownファイルを入れれば編集者の方も見ることができるだろうと考えてみました。 すると当然のことながらMarkdownのテキスト一覧を閲覧し、ファイルもエディタなどで開けるとのことなのですが、 以下のような質問をいただきました。
ちなみにmarkdown形式のファイルは、普通にエディタで 見ればよいのだと思いますが、適したツールなどは あるのでしょうか？？
 うーん、僕が以前から自作しているMarkdown Viewerはありますが、 いかんせんPerl製のコマンドラインのソフトなんで勧めてみたものの、少しハードルが高いかなぁと感じました。 そこであらためて、僕と編集者の方、2人にとってのニーズを整理してみましょう。
 僕が主にファイルを編集をする 編集者さんがそのMarkdownをHTMLとして確認したい ファイルはDropboxで逐一共有されている  このニーズを簡潔に叶えるアイデアを考えてみるとこのようなものになりました。
Dropbox上のファイルを一覧できて、 指定ファイルがMarkdown形式ならばHTMLにレンダリングしてかっこよく表示させる内向けのWebサービス
 そして、このようなサービスは軽くGoogleで検索調査したところ無い、 もしくは一般には利用できないということがわかります。
書籍執筆のための 環境も無ければつくる 。この方針にのっとります。 DropboxのDeveloper向けサイトを見てAPIの仕様について調べます。 どうやら作ったものを一般に公開するにはDropbox側の審査が必要になるようですが、 開発者モードでは5名までのユーザーに使ってもらうことができそうです。 「REST APIを使って、OAuth 1.0 で認証する」というだいたいの仕様が把握できたところで、 Perlのライブラリ倉庫である「CPAN」を覗いてみました。 「Dropbox」で検索をすると、いくつかライブラリが出てきまして「さすがCPAN！」と思いましたが、 今回は「WebService::Dropbox」というモジュールが分かりやすかったので、こちらを使用したいと思います。「無いものをつくるために車輪を利用している」わけですね。 ところでこのモジュール、非常に便利です。
実装方針が決まったところで、Dropbox APIを使ってどのようなことができるのか？どのようなデータを取得できるのか？ を知るためにサンプルプログラムを作成。 だいたい分かってきたのでいよいよサービスの名前を「Dropdown」として、Webアプリを作ります。 Markdown形式のテキストをHTMLへ変換するにはこれもまたCPANモジュールの「Text::Markdown」を使いました。 Dropboxのファイルもしくはディレクトリの名前を受け取とり、ファイルだったらそのデータをダウンロード。 Markdown形式にマッチすればHTMLに変換して綺麗に表示させる部分がこのアプリの肝です。 そのControllerのコード部分はちょっと長いですが以下のようになりました。
 package Dropdown::Dropbox; # Web Application FrameworkにはMojoliciousを使用した use Mojo::Base &#39;Mojolicious::Controller&#39;; use Text::Markdown qw/markdown/; use Encode; use Plack::Session; sub dropbox { my $self = shift; # $nameにはDropboxファイルへのパスが入る my $name = $self-&amp;gt;stash-&amp;gt;{name}; my $dropbox = $self-&amp;gt;app-&amp;gt;dropbox; # sessionにはPlack::Sessionを使用 my $session = Plack::Session-&amp;gt;new( $self-&amp;gt;req-&amp;gt;env ); my $access_token = $session-&amp;gt;get(&#39;access_token&#39;); my $access_secret = $session-&amp;gt;get(&#39;access_secret&#39;); return $self-&amp;gt;render_not_found if ( !</description>
    </item>
    
    <item>
      <title>30分、JavaScriptで作るWebサービスのモックアップ</title>
      <link>https://yusukebe.com/posts/2012/0221231031/</link>
      <pubDate>Wed, 22 Feb 2012 08:10:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0221231031/</guid>
      <description>Instagramは日本のユーザーも多く、日常を切り取った写真がほとんどで、 またお洒落なものも混じっているのでたまに眺めると気持ちがホッコリしたりします。 特定のキーワードでInstagramの最新の写真を検索したい時があります。 例えば、みんなが今どんな「ご飯」を食べているのか、今日の「日の出」はどのような具合なのか、 がInstagramの写真を通して分かるかもしれません。 Instagramの写真検索サービスを探してみると、 Instagram自身が検索機能を提供してないので他の第三者が作ったサービスがいくつか出てきます。 使ってみたところ、もう少し自分で見た目やら機能を変えてみたいなーなんて思いました。 そこで、「Instagramの今の写真を検索できるサービス」といういわばWebサービスを作りたい欲求にかられます。 今回はこのようなちょっとした欲求から考えた「Webサービスのモックアップ」をJavaScriptで素早く作ることについて、 解説してみます。
Webサービスを「誰かの欲求を満たすWebのサービス」という一面から捉えると、 もちろんJavaScriptだけで記述可能です。HTML/CSSの知識は多少必要ですが、 PHPやRuby、Perlなどのサーバサイドについて知らなくてもよいわけです。 また、JavaScriptでWebサービスのモックを作る作業はサーバサイドを実装する場合でも、 UIやアイデアを試行錯誤するための意味をなすこともあります。 JavaScriptのAjaxと呼ばれるような仕組みを利用すれば、今回扱うようなTwitterのWeb APIとの通信も可能ですし、 インタラクティブにブラウザ上で表示を変化させることができます。
「Instagramの今の写真を検索できるサービス」。実際にJavaScriptで作ってみました。 すると30分ほど集中すると、Webサービスを構成する必要最低限の行程を踏むことができたのです。 もちろん作り込みはだいぶ必要なので、それについては後述しますが、 実際に動くサービスを使うことが可能なのでユーザとして欲求はある程度満たせるものです。 30分、JavaScriptでWebサービスをサクッと作る行程は以下のようなものでした （時間は適当な目安です）。
 HTMLとCSSの雛形を用意する(3分) JSの雛形を作る(2分) APIのドキュメントを読む(5分) JSコード、CSSを記述する(15分) 公開する(5分)  それぞれについて解説します。
1.HTMLとCSSの雛形を用意する(3分) WebサービスとなるとHTMLとCSSは必須です。 実はここを作り込むのが一番時間かかったりするのですが、 今回は雛形だけで満足することにしましょう。CSS Frameworkを利用します。 BlueTripはCSSが簡素に記述されていて使いやすいだけではなく、 zipやtarをダウンロードして解凍すれば今すぐ使えるようなファイル構成になっているのでこちらを使ってみます。
index.htmlをエディタで編集してタイトルだけの表示にします。
 &amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&amp;gt; &amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xml:lang=&#34;ja&#34; lang=&#34;ja&#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html;charset=utf-8&#34; /&amp;gt; &amp;lt;title&amp;gt;Instagram検索&amp;lt;/title&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/screen.css&#34; type=&#34;text/css&#34; media=&#34;screen, projection&#34; /&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/print.css&#34; type=&#34;text/css&#34; media=&#34;print&#34; /&amp;gt; &amp;lt;!--[if IE]&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/ie.css&#34; type=&#34;text/css&#34; media=&#34;screen, projection&#34; /&amp;gt; &amp;lt;![endif]--&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34; type=&#34;text/css&#34; media=&#34;screen, projection&#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&#34;container&#34;&amp;gt; &amp;lt;div class=&#34;span-24&#34;&amp;gt; &amp;lt;h1&amp;gt;Instgram検索&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&#34;</description>
    </item>
    
  </channel>
</rss>