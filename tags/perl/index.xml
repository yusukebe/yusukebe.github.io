<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl on ゆーすけべー日記</title>
    <link>https://yusukebe.com/tags/perl/</link>
    <description>Recent content in Perl on ゆーすけべー日記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>© Copyright yusukebe.com</copyright>
    <lastBuildDate>Mon, 24 Aug 2015 10:35:00 +0900</lastBuildDate>
    
	<atom:link href="https://yusukebe.com/tags/perl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ありがとう！ #yapcasia</title>
      <link>https://yusukebe.com/posts/2015/0824103531/</link>
      <pubDate>Mon, 24 Aug 2015 10:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2015/0824103531/</guid>
      <description>8月20日〜22日までの3日間、東京ビックサイトにて開催された「YAPC::Asia Tokyo 2015」に「参加＆トーク」してきました。

昨今のYAPC運営母体である「Japan Perl Association」が主催する「YAPC::Asia」は今回が最後となります。 YAPC::Asiaは今回でちょうど10周年目、会場が東京ビックサイト、そしてラスト。 主催の @lestrrat さんが「大花火を上げるぞ！」と 言っていた通り「ドでかいYAPC」でしたね。@lestrrat さんをはじめ、スタッフの方々、参加者の方々、スピーカーの方々お疲れ様でした！
#yapcasia 僕はYAPC::Asiaには2008年から参加したのですが、 その当時からYAPC::Asia関連について、Twitterでは#yapcasiaのタグをつけてツイート、また、その他Flickr、YouTube、はてブなどでもこのyapcasiaというタグが付けることが推奨されていました。 特にTwitterの検索を駆使すると、YAPC当日にはトークの感想がリアルタイムに流れているのを見ることができ、YAPC終了後には感想ブログ記事を追うことが可能です。

今現在もものすっごい量のツイートがバンバン上がってるので、熱量感じますねぇ〜 普段からオンラインのツールに強い属性の人たちが参加するオフラインのミーティングってことでTwittr etcも含めて楽しめるってのがなんつーかYAPC::Asiaの特徴かと思いました。
ちなみに
yapcasia OR &#34;yapc lang:ja&#34;
 を僕はTwitterクライントの検索窓に入れてずっとツイートを追ってます。
さらに今年はtogetterさんがスポンサーだったのでこうしたツイートをトークセッションごとにリアルタイムにまとめてくれて、発表が終わったらもう「まとめ」が出来てる状態になってて めっちゃいいな、って思いました。
Podcastを支える技術、エンジニアのためのWebメディア、そしてCPAN 
僕は21日YAPC本編1日目に60分の枠で「Podcastを支える技術、エンジニアのためのWebメディア、そしてCPAN」という題名でトークさせていただきました。
Podcastを支える技術、エンジニアのためのWebメディア、そしてCPAN - YAPC::Asia Tokyo 2015yapcasia.org
60分という尺の発表は初めてなのですが準備していくと
 言えることは以外と少ない とはいえ時間が長めなので疲れる  ということが発覚。「エンジニアでもコンテンツ発信したいよね！」ってことに関してもっと話したかったところをシュリンクさせて「Podcast」に照準を絞って話させてもらいました。
   Podcastを支える技術、エンジニアのためのWebメディア、そしてCPAN  from Yusuke Wada  上記した通りtoggeterでもまとめてもらってます。
一人収録は孤独との戦い…！yusukebeさんが語るPodcast収録の裏側 #yapcasia #yapcasiaEtogetter.com
「Podcast」とニッチなテーマになりましたが、実際やッてみたい！と思ってくれる方が意外や多くて良かったです。

Podcastやりたくなるｗ #yapcasia #yapcasiaE
— 高木 翔太 (@0su43) 2015, 8月 21   
podcastやってみたい #yapcasiaE
— Fat fat fat!@Niigata (@dictav) 2015, 8月 21     PodCast を始めるためのツール、意外を自分には揃ってるじゃないか！  というコトに気がつけたのが良かったです。
『ニート』だけど YAPC::Asia Tokyo 2015 に参加してきました！ - カラクリサイクル
 あ、あと、ひたすら僕が使っている機材を生々しく販売価格付きで紹介するコーナーがあったのですが、それによって「Podcastお金かかるんじゃないの...」という印象を持たれちゃったかもで、反省してるのですが、最小限でやればOKだと思います。例えばの構成ですが</description>
    </item>
    
    <item>
      <title>素PlackアプリとMojoliciousアプリを同居させる</title>
      <link>https://yusukebe.com/posts/2013/1012024917/</link>
      <pubDate>Sat, 12 Oct 2013 11:49:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/1012024917/</guid>
      <description>Plack::App::URLMap 使えば出来るんですが... リクエストをPlack::Requestとしてゴニョってレスポンスが配列リファレンスなコードリファレンスを返す「 素Plack 」なアプリと Mojolicious アプリをパスによって振り分けて同居させるもうひとつの方法の例。
Web::MojoliciousはMojoliciousクラスを継承したアプリのベースクラスね。to_appメソッドでコードリファレンス返しているんで.psgiではこれを呼び出せばOK。ってかもう一度言いますがほとんどのケースは Plack::App::URLMap で間に合うかと思われます。
 package Web; use strict; use warnings; use Plack::Request; use Web::Mojolicious; use Mojo::Server::PSGI; sub new { my ($class, %opt) = @_; my $self = bless {}, $class; my $mojo_app = Mojo::Server::PSGI-&amp;gt;new( app =&amp;gt; Web::Mojolicious-&amp;gt;new ); $self-&amp;gt;{mojo_app} = $mojo_app; return $self; } sub to_app { my $self = shift; return sub { my $env = shift; my $req = Plack::Request-&amp;gt;new($env); if( $req-&amp;gt;path_info =~ m!^/mojo! ) { return $self-&amp;gt;{mojo_app}-&amp;gt;run($req-&amp;gt;env); } return [200, [ &#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39; ], [&#39;This is not Mojolicious app.&#39;]] } } 1;  Plack::Requestのインスタンスを使ってディスパッチする前とかに2つのアプリ共通の処理が起こるケースあるかなーと思って考えてみた次第。三度言いますが Plack::App::URLMap でおおよそ解決出来るかと！</description>
    </item>
    
    <item>
      <title>PerlベースのWebアプリ作成を「委譲」する際のスキルチェックリスト20！</title>
      <link>https://yusukebe.com/posts/2013/1003095639/</link>
      <pubDate>Thu, 03 Oct 2013 18:56:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/1003095639/</guid>
      <description> え〜とあるアプリのバックエンドを僕一人が書いてるのですが、 さすがにキツくなってきたので大工事をして「楽に」分業出来るようにしています。 その構成はちょいと置いといて〜 ウマく行けば「とある部分」を誰かに任せることになりますよね。 すると「弊社は（そのための）エンジニア募集中です！」という展開をご期待かもしれませんが、 もう既にアサインが済んだので「弊社はエンジニアを募集しておりません！」すいません... m(__)m
本来ならばその「とある部分」の実装においては僕がメインで使っているPerlじゃなくても、 PHPでもRubyでもPythonでもなんでも良かったのですが、 当の担当する方が「Perl書けます」とのことで「じゃあPerlでいこう」という展開になってます...
ただ、全然、彼のスキルセットをまだ分かってないので、これから話すという段階なんすよね... そこで、僕、人事的なこととかやったことないので、なんとも言えないかもしれませんが、 とりあえず「ピンポイントで求めている」能力といいますか経験をピックアップしてみました。 うんで、足りない部分があれば僕が補いつつ、やっていこうかと！そしたら結果、 チェックリスト的に使える20個にまとまったのでどうせならってことで共有してみますね。 タイトルにもある通り「PerlベースのWebアプリ」をつくるのに確認したい点が列挙されてます。 が、僕らがこれからつくる「とある部分」に関して特化しているので一般的ではない点もあることはご考慮してください！
 
 HTML/CSS/JSが無理なく書ける Perlのプリミティブなデータ表現、つまりスカラー、配列、ハッシュを理解している リファレンスを使いこなして複雑なデータを表現したり操作出来る bless関数によるオブジェクト作成とMoose/Mouse/Mooの使用 システムPerlではなくperlbrewもしくはplenvでコンパイルしたperlを利用している cpanシェルではなくcpanmでモジュールをインストールしている PSGIについてアプリの返却値が配列リファレンスである等、仕様についておおよそ知ってる .psgiファイルを書いてPlack::Middleware::*を使った経験がある Catalyst/Mojolicious/Amon2などWeb Application Frameworkを使ったアプリ制作経験 Cartonの利便性について語れる URI/LWP::UserAgent/JSONあたりのモジュールを組み合わせWeb APIを利用出来る PSGI互換サーバによる本番環境の構築、デーモン化 nginx+リバースプロキシなどによるフロント+アプリサーバ構成をつくれる 静的コンテンツ配信の最適化、フロントエンドのチューニングが出来る MySQL/memcachedの環境構築、運用経験 何らかの形でMySQL/memcachedをPerlコードで利用出来る TAPを理解しTest::Moreを使ったことがある Amazon AWSに対して例えばec2など、経験とノウハウを多少でも持っている GearmanなどのJob Queueを使用して非同期という概念を把握している 最低限のGitコマンドを理解している   
まぁ、あとは僕の本2つを読んでもらえるといいかも！
 Webサービスのつくり方 ~「新しい」を生み出すための33のエッセイ (Software Design plus)posted with amazlet at 13.10.03  和田 裕介 技術評論社 売り上げランキング: 58,406
 Amazon.co.jpで詳細を見る    
 Perlについて語ろうposted with amazlet at 13.10.03  和田裕介 (2013-03-13)
売り上げランキング: 3,260
 Amazon.co.jpで詳細を見る    </description>
    </item>
    
    <item>
      <title>My Summer is Over, YAPC::Asia 2013</title>
      <link>https://yusukebe.com/posts/2013/0923233254/</link>
      <pubDate>Tue, 24 Sep 2013 08:32:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0923233254/</guid>
      <description>好きな季節は？ と聞かれると花粉症の春、雨が降る梅雨を除いて... と消去的に考えがちですが、 とはいえ気分が高揚する熱い夏が好きだなーって結論になって大抵「 夏 」と答えます。 そんな夏がこのBlogエントリーを期に終わろうとしています。
毎年、プログラミング言語Perlの祭典である「 YAPC::Asia 」は季節の節目として存在していて、 大抵9月/10月の夏から涼しくなる時期に行われる開催されています。なので僕は
YAPCが終わるまで夏だ！
 なんて勝手に思い込んでいます。「YAPCの感想Blog記事を書くまでがYAPC」という素晴らしい スローガンがあるので、この記事をポストした時点で2013年の僕の夏は終わりますね。 実際、YAPCが終わってからここ数日はちょうど涼しくなって、それがまた、 一抹の寂しさと共に名残惜しさを感じています。

季節の節目としても僕の中にあるYAPC::Asiaですが、それが「 いつも存在している 」ことに対しての危機が 顕在化したのがクロージングでのYAPC運営トップである牧さんの発言でした。
YAPC::Asiaのキーマンである「牧さんとくしいさん」がその運営から引退するとのこと
 これはつまり「俺がYAPC::Asia 2014をやるぜ！」と言い出す人がいない限りは来年のYAPC::Asiaは 開催されず 、 当たり前に存在していた僕にとっての夏の終わりが不明瞭になることを意味します。 暑い夏のラストを飾るにふさわしい熱いイベントであるYAPC::Asiaが無くなることは非常に残念で、 ただ、自分のおかれている身としては「俺がやるぜ！」とも言いがたい状況でもあり、 モヤモヤした気分で一杯になります。
声を上げてくれる人がいるとしたらそれがベストで何か僕に助けられることがあればいくらでも 協力したいのですが、それもまた他人任せな気がするんで、ウマい方法を模索したいところですし、 一人で出来ないところをチームで解決出来るとしたらその一員として声をかけていただきたいと思っています。 夏のフィナーレを飾るイベントの灯火をこのまま消したくはありません。
 
さて、今年の夏の終わり「YAPC::Asia 2013」はどうだったか？相変わらずエキサイティングなイベントでした。 僕はなんだかんだ、非公式イベントも合わせて4つの発表をさせてもらいました。
 LTソン「サンフランシスコIT企業見学とその雑感」 本編 LT「YAPC::NAへ行って来た」 非公式イベント 大人のYAPC キーノート 本編 一般発表「Mojoliciousでつくる！Webアプリ入門」  発表前は落ち着かなかったり、発表後はやりきった感に満ち足りていたために他の個別トークはぶっちゃけ全然 聞いていないのですがw 前夜祭の夜に朝4時までとある方とサシのみをしたり、初めて会う方とお話出来たり、所属するオモロキでスポンサーをしたためにそのメンバーに雰囲気を体験してもらったりと様々な絡みがありました。
各トークセッションは俯瞰してみるとどうもWebアプリ開発の話とテストの話が多かったようで、世の中の関心具合が分かりますね。また、プレゼンが行われている会場を見ると、参加者の人がだいーぶ真面目にトークを聞きながらメモを取っていたりして、それはそれでいいのですが、hallway=廊下でのコミュニケーションがもっとあってもいいんじゃないかなーなんて思いました。
 
僕のトークで一番デカイのが一般発表で40分間の「Mojoliciousでつくる！Webアプリ入門」でした。 本来ならもう少しMojoliciousの奥深いところまで話したかったのですが、どうしても、ターゲットを初心者に 絞りたかったので導入の話題が多かったです。発表資料はこちらに貼付けるので、参考にしてください。
  Mojoliciousでつくる！ Webアプリ入門 from Yusuke Wada  なるたけ「表に現れていないビギナー層に向けて」という方針で噛み砕いて説明してみたのがよかったのが、 ありがたいことに「 ベストトーク賞1位 」をいただきました！なんと2年連続です。 若干すいません＞＜という感覚もありますが、発表するからには狙うために頑張りました。

嬉しかったです＆ありがとうございました。副賞が海外カンファレンスへの渡航費補助なので、 今度はYAPC::Europe行きたいなーなんてぼんやりと考えています。
また、Mojoliciousについて、Webアプリのつくり方について、深堀したいという要望を聞くので、 今後このBlogでも何かしらネタがあれば共有していきたいですね。
 
こうして、一年の節目に当然のごとくなっていたYAPC::Asiaはスタッフの方々に 支えられているのだなーと「失われつつあり」はじめて分かった感もあります。

本当に牧さん、くしいさんお疲れ様でした！そしてありがとうございます。 来年もYAPC::Asiaが行われますように。
Shut The Fuck Up And Write Some Code
 ではないですが、願うだけじゃなく、実際のアクションが出来ればいいですね。 ひとまず、ありがとうYAPC::Asia 2013！これで僕の夏が終わります。</description>
    </item>
    
    <item>
      <title>YAPCを最大限に楽しもう！/ GETTING THE MOST OUT OF YAPC</title>
      <link>https://yusukebe.com/posts/2013/0919041025/</link>
      <pubDate>Thu, 19 Sep 2013 13:10:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0919041025/</guid>
      <description>今日はいよいよ YAPC::Asia 2013 の前夜祭！そして、明日あさってと本編ですね！ところで、6月に YAPC::NA 2013 に参加させてもらったのですが、その際に「YAPC BINGO」と書かれたカードが配られてました。

で、なんかその裏に書かれている「GETTING THE MOST OF YAPC」つまり「 YAPCを最大限に楽しもう！ 」っていう4つの項目が割と当たり前のことながら興味深く、今回の YAPC::Asia にも当てはまる気がしました。なので、超意訳で掲載させていただきますねー。
 
その1「Be Social」 YAPCはソーシャルカンファレンスなんだ！だから、プレゼンテーションを聴くだけってのは間違っているよ。会期中は hallway = 廊下 で初めて出会う人と交流をしよう！
その2「でも気になるトークを聴こう」 バラエティーに富んだプレゼンテーションがあるね。自分が知らないと事柄についてのトークであたらしい発見があるかもしれないね。例えば次世代のテクノロジーについてとか！
その3「LTはまだ間に合う」 もし、あなたがスピーカーになりたければ、まだ Lightning Talkの募集をしている から応募するんだ！それこそがリアルワールドで叶えられるよい経験になるよ。
その4「シェアしよう」 YAPCの経験をみんなと共有しよう。あなたのボスに体験や学んだ事を伝えたり、一緒に働いている同僚にYAPCで会ったグレイトな人々のことを話す、なんてーのもいいよね。
 
これから始まる YAPC::Asia でも通用するシンプルな楽しみ方だと思います。ってことでYAPCで会いましょう！あ、ちなみに、僕は21日土曜の朝一、大ホールにて「Mojoliciousでつくる！Webアプリ入門 」という題目で40分間のトークをさせていただきますので、よろしくお願いします！</description>
    </item>
    
    <item>
      <title>大人のYAPCでキーノートします 〜 XXXXXXXXXX-Detectもあるよ！</title>
      <link>https://yusukebe.com/posts/2013/0809075639/</link>
      <pubDate>Fri, 09 Aug 2013 16:56:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0809075639/</guid>
      <description> つい先ほど「参加者が1,000人に達した！」という快挙を達成したらしいエンジニアのお祭りYAPC::Asia 2013。僕も本編でトークをしたりトークを聴いたりするわけですが、今回は非公式のイベント「大人のYAPC」というモノが開催されます。
  大人のYAPC - YAPC for Grown-ups | PeaTiX / 募集ページ 2013/09/20 (金) 19:00 - 21:00 慶應義塾日吉キャンパス協生館内 多目的教室2  タイトルからご想像付くように本編では喋りにくい話題、まぁ、端的に言ってエロとかエロとかおっぱいとかおっぱいとかブラックな話を、参加者の同意のもと、やってしまえというYAPC本体とは全く関係の無い野良的イベントです。某氏と話していて盛り上がったので僕も登壇者の方へのお声がけとか司会的な立ち位置の役回りになります。なおかつ、キーノートも勝手にやらせてもらいます。
そのトークでは以前からの個人的命題であった「おっぱい画像をいかに効率よく収集するか？」の解である「Oppai-Detect」に引き続き、いかにして「XXXXXを効率よく見つけるか？」の解である「XXXXXXXXXX-Detect」を紹介したいと思います。キーノートとはいえスピリチュアル要素は少なくデモも伴った発表になる予定です。
その他、一般発表の20分もしくは30分の枠はもう既に登壇者の方が決まりつつあり、動画の検索系のガチな工夫とおっぱいに関する話題が聴ける予定です。また、5分間のLightning Talksを発表していだける方を若干名募集しておりまして、興味のある方は @yusukebe までメンション飛ばしていただけるとこちらで考慮します。以下のようなテーマをマジで話したい！という方は連絡ください。
 アダルトアプリケーション開発の苦労話 写真や動画などを取り扱う技術 ユーザーの欲望解析 物理デバイスとの連動 ブログは当然のことTwitterやFacebookでは言えない話 見かけた汚すぎるコード 未来への妄想  募集は9月に入ってから行いますが、参加に際して、募集ページにある注意事項に同意していただければYAPCのチケットを持っていなくてもOKです。ただ、どうせならばYAPC本編にも参加することを推奨します。チケットの発売は11日(日)までなのでお早めに！
 http://yapcasia.org/2013/tickets/  </description>
    </item>
    
    <item>
      <title>YAPC::Asia 2013 でMojoliciousについてのトークをします #yapcasia</title>
      <link>https://yusukebe.com/posts/2013/0808023035/</link>
      <pubDate>Thu, 08 Aug 2013 11:30:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0808023035/</guid>
      <description> Perlだけじゃない？エンジニアの祭典「 YAPC::Asia 2013 」が9月に行われます。
 9月19日(木) 前夜祭 9月20日(金) 本編1日目 9月21日(土) 本編2日目  YAPCというイベントは2008年から参加していて... ってことを今思い出すと僕にとっては今年が5年目のYAPC体験なんですね。スーツ率が異常に低いカジュアルな雰囲気があり、憧れのギークの話が聞けたり、たっぷりの熱気が充満していて、かつ自由に過ごせる個人的にはベストなイベントです。

初参加した時を思い出すと、トークの内容が分からなくても「なんかすごい！」「あの人カッコいい」と刺激をもらえる場所です。Perl初心者な方にもオススメなんで、興味ある方はチケット買って参加してみるとよいでしょう！締め切りが11日(日) と迫っています。
 http://yapcasia.org/2013/tickets/  さて、僕は以前から「 Mojoliciousでつくる！Webアプリ入門 」というタイトルで40分のトークを応募していたのですが、おかげさまで採択されまして発表させていただきます。去年のYAPC::Asiaでは「ベストスピーカー賞」をいただいたのですが、今回の発表もその時と同じ「土曜日の朝一」「大ホール」という条件です！！
内容はタイトルから分かる通り「Mojolicious」というPerlのフレームワークを取り扱うのですが、結果的にMojoliciousを使わないにしろ、Webアプリケーションの実装項目を網羅的に把握出来るような内容、チュートリアルになるかもです。以下、予定しているトピックのリスト。たっぷりなので全部は取り扱えないと思われますが参考にしてください。
 
 Web Applicationをつくろう！ Web Application Framework = WAFって？ MVCフレームワーク概要 Mojoliciousの紹介 Mojolicious::Liteを使った第一歩 VCオンリーな件 柔軟なルーティング シンプルなコントローラ記述 Perlが書けるテンプレート CPANモジュールを組み合わせて使う FormValidator::Liteを使った入力値の検証 Mouseを使ったクラス作成 Tengを使ったDB操作 実用的なアプリをつくる Twitterログインによる「gist」モドキ セッションの管理と応用 フックについて デプロイ構成例 PSGIによる起動 Cartonを使ったモジュール管理 今後へ まとめ   
またMojoliciousの発表だけではなく、LTにも応募しようとしていますし！「大人のYAPC」と呼ばれる非公式のイベントでも話す予定です！気になった方は是非。重要なのでもう一度言いますが、チケットの発売は11日(日) までですよ！
 http://yapcasia.org/2013/tickets/  </description>
    </item>
    
    <item>
      <title>Object::Containerを応用したModel呼び出し</title>
      <link>https://yusukebe.com/posts/2013/0725091627/</link>
      <pubDate>Thu, 25 Jul 2013 18:16:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0725091627/</guid>
      <description>各種Model群についてObject::Containerを応用しつつ管理するとカジュアルにシングルトンになって効率いいかも！って思って、手元の小さなWebアプリで実装してみた。実験的にやってるんで、これおかしいって点あるかもなんでその場合はお手柔らかにツッコんでくだされ。
だいたい僕はこんな感じでWebアプリのファイル、クラス構成をとっています。
 ./ └── MyApp ├── Model │ └── Entry.pm ├── Model.pm ├── Web │ └── Controller │ └── Root.pm └── Web.pm  うんで、Controllerからはtokuhiromからよく「Catalystっぽいよねー」って言われているけど頑なに$self-&amp;gt;model(&#39;Entry&#39;)のようなインターフェースでModelへアクセスしています。
 package MyApp::Web::Controller::Root; use Mojo::Base &#39;Mojolicious::Controller&#39;; sub index { my $self = shift; my $entries = $self-&amp;gt;model(&#39;Entry&#39;)-&amp;gt;get_recent_entries(); $self-&amp;gt;stash-&amp;gt;{entries} = $entries; $self-&amp;gt;render(); } 1;  呼ばれるはずのMyApp::Model::Entryには呼び出されるはずのメソッドが定義されています。
 package MyApp::Model::Entry; use Mouse; sub get_recent_entries { ...; return $entries; } 1;  ここまでは個人的にいいとして、Modelをどのようにロードさせるかって話です。Object::Containerを使った今回の例ではまず、MyApp::Loader::Modelをつくりました。
 package MyApp::Loader::Model; use Mouse; use Module::Load qw//; has &#39;instances&#39; =&amp;gt; ( is =&amp;gt; &#39;rw&#39;, isa =&amp;gt; &#39;HashRef[Object]&#39;, default =&amp;gt; sub { +{} } ); sub load { my ($self, $name) = @_; my $instances = $self-&amp;gt;instances; return $instances-&amp;gt;{$name} if $instances-&amp;gt;{$name}; my $class = &#34;</description>
    </item>
    
    <item>
      <title>ORMにValidation機構を持たせる</title>
      <link>https://yusukebe.com/posts/2013/0724022022/</link>
      <pubDate>Wed, 24 Jul 2013 11:20:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0724022022/</guid>
      <description>ユーザーからのPOST等された入力値の妥当性をチェックする Validation をどこでやるか問題が個人的にありまして〜、DBを使わないケースならばいわゆるFomrValidator::*を使ってControllerでやればいいのですが、Modelを経由するようなアプリだとControllerだけじゃ不安よねぇ〜、Modelだけ使う時もあるし、Model単体のテストで再現出来ないよね〜なんて思ってます。で、実際の実装をControllerではFormValidator::Lite、Modelの一部にData::Validatorを使っているのですが、なんかコレも効率悪い感じしてたんで、ちょいと実験的に理想の一つを実装してみました。
こんな条件です。
 エラーメッセージを簡単に設定したいのでValidationモジュールにはFormValidator::Liteを使う 色々錯誤していたらORMの段階でValidationしてResultオブジェクトを返すってのがいいのではないか Resultオブジェクトではhas_error/error_messagesメソッドをはやしてControllerで扱いやすくする Validationが通ればentryメソッドで生成されたORMのオブジェクトを取得出来る WAFはMojolicious、ORMにはTengを使う前提で書いてみる  するとController側はこんな風に書ける。
 sub post { my $self = shift; my $user = $self-&amp;gt;stash-&amp;gt;{user}; return $self-&amp;gt;render_not_found unless $user; my $result = $self-&amp;gt;model(&#39;Entry&#39;)-&amp;gt;create({ user_id =&amp;gt; $user-&amp;gt;id, title =&amp;gt; $self-&amp;gt;req-&amp;gt;param(&#39;title&#39;) || &#39;&#39;, body =&amp;gt; $self-&amp;gt;req-&amp;gt;param(&#39;body&#39;) || &#39;&#39;, }); if($result-&amp;gt;has_error){ $self-&amp;gt;stash-&amp;gt;{error_messages} = $result-&amp;gt;error_messages; return $self-&amp;gt;render(&#39;/entry/create&#39;); } $self-&amp;gt;redirect_to(&#39;/entry/&#39; . $result-&amp;gt;entry-&amp;gt;id); }  $self-&amp;gt;model(&#39;Entry&#39;)ってのはMyApp::Model::Entryを呼び出しすショートカットなんだけど、createメソッドの返り値が例のResultオブジェクトになっている。
Model側はもちろん他の処理も入るけど最小限これでイケる。
 sub create { my ($self, $args) = @_; my $result = $self-&amp;gt;db-&amp;gt;insert(&#39;entry&#39;, { title =&amp;gt; $args-&amp;gt;{title}, body =&amp;gt; $args-&amp;gt;{body}, user_id =&amp;gt; $args-&amp;gt;{user_id} }); return $result; }  肝心なのは通常「use parent &#39;Teng&#39;」するMyApp::DBモジュール。これをちょいと拡張する。
 package MyApp::DB; use Mouse; use String::CamelCase qw//; use Module::Load qw//; use MyApp::DB::Result; extends &#39;Teng&#39;; sub insert { my ($self, $table_name, $args, $prefix) = @_; my $class = &#34;</description>
    </item>
    
    <item>
      <title>Perl徹底攻略とWeb開発の基礎徹底攻略が出ます</title>
      <link>https://yusukebe.com/posts/2013/0718220836/</link>
      <pubDate>Fri, 19 Jul 2013 07:08:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0718220836/</guid>
      <description>WEB+DB PRESS plusのムック本として
 Perl徹底攻略 Web開発の基礎徹底攻略  の2冊がいつもお世話になっている技術評論社さんから来週火曜日23日あたりに出ます。どちらとも以前WEB+DB PRESSに寄稿した僕の記事が一部もしくはだいぶ修正して掲載されています。著者として献本いただき昨日手に入れましたよ。

僕が関係している記事は Perl徹底攻略 だと、
 Part.3 応用と実践 第1章「YouTube Data APIから学ぶWeb APIのキホン」 Pert.6 小飼弾のPerlハッカーに逢いたい♥「和田 裕介（ゆーすけべー）」  Web開発の基礎徹底攻略 は
 一般記事「Twitter時代の技術者コミュニケーション術」  です。特に「YouTube Data APIから学ぶWeb APIのキホン」の場合、初出の記事ではTwitter Search APIを題材にしていたのですがいかんせんAPIがVersion 1.1へ移行した関係上、OAuthの認証が必要になり、それを解説していたら本質から外れてしまうと思い、YouTubeのAPIを利用した解説記事に全面リニューアルしました。
ざーっと眺めてみたんですが、2つの関連記事が掲載されていることもありPerl徹底攻略の方はだいぶ思い入れというか、オーガナイズしてくれているYappoさんの巻頭記事とか読んでいるとここまでまとまった形で出版できて皆さんよかった！！と 熱いものが混み上がる 感じです。ってか個人的には表紙のこの並びがヤバい。

ちょw ラリー、宮川さん、そして、俺とかwww
 さて、肝心の内容、Perl徹底攻略 に関しては一部気になるモノを列挙すると
 冒頭にらくだ本の訳者である近藤嘉雪さんの伝家の宝刀的、丁寧なリファレンス入門があり初心者も取っ付きやすい ikasam_aさんによるCarton &amp;amp; cpanmの記事はおそらく中でも最新の記事でホットトピックス。個人的にCarton便利やわーって使いだした身なので読んでもらいたい 「Amon2によるWebアプリケーションの高速開発」とか「Xslate」の記事は中の人が書いてあるので分かりやすいし、モジュールのコンセプトが分かる naoyaさんによる書き下ろしの「モダンPerlリファクタリング」はテストとCIを使ってコードをリファクタリングしている様子をmd2inaoという技術評論社さん入校向けのプログラムを題材にして解説してあってすごくいい パフォーマンス改善、ロギングなども網羅してある Perlで音ならすとかAcmeモジュールの話もある  って感じで凝縮感たまらないっす。
Web開発徹底攻略 の方はぶっちゃけあんままだ読んでないのですが、これからWeb開発をはじめるぞーって人向けにかなり優しくトピックが設定されてます。
自分がまさに Perlで / Web開発 を行っているので献本もらっていなかったら即買いな2冊であり、興味がある方だったら手に取ってみたり、ポチってみたりするといいんではないでしょうかね！
 Perl徹底攻略 (WEB+DB PRESS plus)posted with amazlet at 13.07.18  大沢 和宏 cho45(さとう) 小林 篤 和田 裕介 嶋田 裕二(xaicron) 牧 大輔(lestrrat) 奥 一穂 広木 大地 伊藤 直也 長野 雅広 藤原 俊一郎 伊藤 智章 まかまか般若波羅蜜 小飼 弾 近藤 嘉雪 中川 勝樹 宮川 達彦 tokuhirom 藤 吾郎(gfx) 村瀬 大輔 技術評論社 売り上げランキング: 132</description>
    </item>
    
    <item>
      <title>Mojoliciousでエラー時に特別な処理をさせる</title>
      <link>https://yusukebe.com/posts/2013/0718145632/</link>
      <pubDate>Thu, 18 Jul 2013 23:56:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0718145632/</guid>
      <description>たまたま、こんな感じのツイートを見かけたので...
Mojoliciousで404、500等のWAFで用意されている標準画面を出さないようにする方法を知りたいのですがどなたか教えて頂く事はできますでしょうか
 僕の返答
templates/not_found.html.ep とかにテンプレート置いておくとそれがrenderされるようになりますよー
 っていうのが常套手段なんだけど...
ありがとうございます！テンプレートをやっぱり設置しないといけないのですね、静的ページにリダイレクトするか、汎用例外処理みたいなのがあれば良かったんですが、CGIだと仕方ないですね...。
 再び返答
あー、hook 使えばできそうっすよー＞リダイレクト。でも個人的には404ページ出した方がいい気がします
 ってことでhookを使って500番エラーをキャッチする再現出来るコードを書いてみた。Mojolicious::Lite です。
 use Mojolicious::Lite; app-&amp;gt;hook( after_dispatch =&amp;gt; sub { my $c = shift; if ( $c-&amp;gt;res-&amp;gt;code =~ /500/ ) { $c-&amp;gt;render( text =&amp;gt; &#39;hooked!!&#39; ); } } ); get &#39;/&#39; =&amp;gt; sub { my $self = shift; $self-&amp;gt;render( text =&amp;gt; &#39;index&#39; ); }; get &#39;/error&#39; =&amp;gt; sub { die; }; app-&amp;gt;start;  これで「/error」にアクセスすると「hooked!!」って出る〜！！</description>
    </item>
    
    <item>
      <title>Getした値が空であることをキャッシュする</title>
      <link>https://yusukebe.com/posts/2013/0712010821/</link>
      <pubDate>Fri, 12 Jul 2013 10:08:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0712010821/</guid>
      <description>Perlはご存知の通りTrue/Falseと言った真偽値を扱うBooleanな型は標準で備わっていない。例えば以下のテストは偽の値と解釈され全てFailする。
 use Test::More; ok(0); # Fail ok(undef); # Fail ok(&#39;&#39;); # Fail done_testing;  つまり
 0 undef / 未定義値 空文字列  が偽として解釈される。普段はこうした挙動で問題は無いんだけど、キャッシュの制御の時に困ってしまい考えた挙げ句、解決策のような実装が見つかったので紹介とツッコミいただきたい次第。
 
追記 以下、ふつーに defined でごにょればイケる！
 unless(defined $value) { ...; }  koba04さん、toku_bass さんあざっす。とりま自分のアプリで試してみます。
 
キャッシュの常套手段的にこんなフローをよく使う。
 キャッシュにヒットしたらその値をそのまま使う とって来た値が偽だったら算出するメソッドを発行する 算出された値をキャッシュにsetする  うんで、実装はこんな感じ。
 my $value = $cache-&amp;gt;get(&#39;key&#39;); unless($value) { $value = get_value(); $cache-&amp;gt;set(&#39;key&#39;, $value); } say $value;  で、問題になるのは上のコードで言う「get_value」サブルーティンが「空」など偽と判断される値を返す時。さすればせっかく値をsetしているのに再びgetしたタイミングにこのコードだと値が偽であることからunlessブロックに入り、再度「get_value」が呼ばれることになる。「get_value」を呼び出すためのコストがかかる場合は一度「空」が返却されたんだからそれを覚えておいてもらいたい。つまり
「空であること」自体をキャッシュさせたい
 ってことになる。そこで使ってみたのが Ingy の boolean.pm 。Perl標準のコンテキストとは別にTrue/False の真偽につかえる値を提供する。とりあえず「false」だけを使う。
 use boolean; my $value = boolean::false; say ref $value; # boolean say $value == boolean::false ? &#39;false&#39; : &#39;true&#39;; # false  falseで特別に偽を定義することが出来るので、キャッシュの件だと、falseを値としてsetしちゃって、後ほどgetする時に判断させれば「空であること」自体をキャッシュさせることが出来そう。こんな感じのコードになった。
 use Cache::Memcached::Fast; use feature qw/say/; use boolean; my $cache = Cache::Memcached::Fast-&amp;gt;new({ servers =&amp;gt; [&#39;127.</description>
    </item>
    
    <item>
      <title>最近の開発周辺事情と職質テックトーク</title>
      <link>https://yusukebe.com/posts/2013/0709121252/</link>
      <pubDate>Tue, 09 Jul 2013 21:12:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0709121252/</guid>
      <description>ここ最近の僕の開発で指標になっているのは「システムとしてのクオリティを上げるか」であり、それって当然のごとく行われているかもしれなくて、いわゆる Quality Assurance = QA なんて言葉があったり、某社では Test Engineer の方がいたりするわけです。ただ、あまりにも僕としては「ずさんな」ところが多々あると考えています。「よしAを変更した → デプロイ → Bがエラー出てる」なんてことがないように「機能が望むように動作しているか」をテストコードで担保しようと努めている次第です。例えば、先日サービス内で使用している Flickr API の一部メソッドが正常に機能しない（ どんなに一般的な語彙で探しても検索結果が空で返ってくる ）なんてことがありましたが、テストコードのおかげで問題の切り分け、つまり、これは本当に Web API が壊れているのだ！ということがテストスクリプトを走らせるだけで分かって「あ〜 テスト書いててよかったですね」と改めて思いました（ Flickr API はその後、開発者同士のメーリングリストに投げかけたところ、同じ症状で悩んでいる人、さらには中の人も現れ、直してくれました ）。
前置きが長くなりましたが、こうしたテストも含め開発周辺の便利なリソースやツールで最近使っているものを紹介してみます。ちなみに使用言語はPerl、Web Application Framework に Mojolicious を使った、公称月間1億PV以上のWebサービス / モバイルアプリのバックエンド例で、僕一人が開発を担当しています。
GitHub Private Repository Git レポジトリに GitHub の Private Repository を利用。そもそも開発、運用にまつわるリソースはなるべく出来るものに関してはアウトソースする方針にしています。アウトソースと言っても人を使うのではなく便利なサービスに委譲する形です。そのためにどのサービスを使うかは慎重に身構えつつ、時にはノリで選ぶ感じです。GitHub は無料で使う分には Public Repository しか持てないので、月額$12の Small プランの契約をして10個の Private Repository が持てる状態になっています。Git の Repository と クールな UI を構築したりマネージするコストを考えるとアリじゃないか！と考えています。
Carton v0.9.15 Perl における Ruby の Bundler に相当するのが Carton です。「v1.0.0 が出るまで API の変更の可能性がある！」... けれど、現行 CPAN に上がっている v0.9.15 を使っています。モジュールのバージョンまで面倒を見て依存性を解決して環境をつくることが可能です。例えば分かりやすい例を挙げると Mojolicious が最近メジャーバージョンアップして 3.xx 系から 4.xx 系にアップグレードしたのですが、どーしても 3.xx 系を使いたいよねぇ〜 なんて時は cpanfile でバージョン指定しちゃうことが出来ます。
 requires &#39;Mojolicious&#39;, &#39;== 3.97&#39;;  この cpanfile を用意して
 $ carton install  するといい具合に 3.</description>
    </item>
    
    <item>
      <title>ナウなPerlを勉強するためのリソースはいずこ</title>
      <link>https://yusukebe.com/posts/2013/0630011725/</link>
      <pubDate>Sun, 30 Jun 2013 10:17:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0630011725/</guid>
      <description>__papix__ 君が主催をして開催している Perl入学式 というイベントがあります。Unix/Linux/OSXの環境構築から始まり最終的にはWebアプリケーションをつくるハンズオン形式の勉強会を今年は年6回に分けて開催しているようです。かなり丁寧にPerlを教えているという印象があって、それがどんな雰囲気か以前から気になっていたのですが、昨日「Perl入学式 in 東京 #2」にサポーターとして途中から参加させてもらいました。

簡単に感想を述べると「これはすごくいい」。肝は最適な練習問題が所々出され、するとみんな黙々とコーディングし始めるんだけど、それが終わると、参加者同士でコードを見せ合って「これで合ってるかな？」「私はこんな風に書いたよ」と言うようなコミュニケーションが生まれてたりしているのです。正直その様子を見て感嘆しましたよ。


 
＊追記「Perl入学式の補講があるらしいよ！」 「Perl入学式 in 東京 #2」の参加に溢れちゃった人向けに補講があるらしいよ！募集人数増えるかもしれないし、いい機会だから気になった人は参加するといいかも！
 Perl入学式in東京 #2 補講 on Zusaar   
さて、その際に話題にあがったりしたんだけど「今風の」Perlに関する勉強するための情報はコツを掴むまではなかなか辿り付くのが難しいって思いました。例えば、Googleで「perl」と検索しても例えば「use strict; use warnings;」の解説をしてないページが上位に出てきます。そこで「ナウな」Perlの書き方を学ぶ上で参考になるリソースへどのように辿り着くか、もしくは、僕がどのようにしているかをまとめてみましょう。
 
Perlビルトインの機能はリファレンスとして 昨日のPerl入学式でも途中で「chompってなんなんですかー？」って言う質問があったんだけど、Perlそのものに組み込まれた標準的な関数＝ビルトイン関数に関しては、ググって出て来たページを見てその場で使い方を把握するのがいいでしょう。また、Perl公式のドキュメントを日本語化した「 perldoc.jp 」ってのもありまして、当然 chompに関する記載 が記述されているのですが、説明が固いのと前提知識が必要だったりするんで、これはある程度Perlに慣れて来たら使うとよいと思います。
ちなみに Pod::PerldocJp というモジュールを入れると「perldocjp」コマンドが使えるようになりブラウザを立ち上げなくてもドキュメントを見ることが出来ます。
 $ perldocjp -J perlfunc  するとこんな感じ。

「perldoc perlfunc」で英語のドキュメントが見れるので、ぶっちゃけこのコマンド初めて使いましたがw Perl入学式でモジュールのインスコ方法が紹介されてたっぽいので「cpanm Pod::PerldocJp」して試してみるのもいいでしょう！
例えば「CGI」を避ける 実行環境としてのCGIを否定するわけではないですが、CGI前提で書かれたWeb上のリソースはあんま信用しないっすねー。学習のとっかかりとして「PerlでCGIをしよう！」って言うのは無駄なYak Shaving（目的を達成するために他の問題が次から次へ出てくる状況 参考: yak shaving で人生の問題の80%が説明できる問題 - bkブログ ）な感じがするので最低限 CLI=Command Line Interface である程度のことをしているリソースを見るといいんじゃないでしょうか。
また、ナウなPerlではCGI以外にもWebアプリを動かす手段がいくつかあって、ってかそれがまさに「ナウな」ので「Web Application Framework」とか「デプロイ」っていうようなキーワードを使って探していくといいと思います。
はてぶの「perl」タグをチェックする ナウなPerl情報、割とみんながBlog書いていてすごい役に立つのですが、そこまでどう辿り着くのか？色々考えたんだけど、とっかかりとしては「 はてなブックマークのperlタグの新着 」を見るといいかなーって具合です。

こうすれば今回のPerl入学式のようなイベント情報もキャッチアップ出来るでしょう！また、難しい話題が出てきがちですが、その辺は「あーこんなのもあるんだー」程度に把握しておくと後ほど役に立つかもです。
Advent Calendar がまとまっている 毎年年末の12月1日からクリスマスの25日に向けてリレー形式でみんなでPerlに関するTipsを掲載していくJPerl Advent Calendarってのが日本で2008年から始まりました。このJPerl Advent Calendarの記事が、特に最新のモノにしたがって、すっごく役に立ちます。これは僕自身も最近読みてて例えば、
 Perl Advent Calendar Japan 2011 Test Trac Perl Advent Calendar Japan 2011 Teng Trac Perl Advent Calendar Japan 2011 Dbix Trac  あたりを参考にさせてもらってます。JPerl Advent Caledarの一覧は Perl-users.</description>
    </item>
    
    <item>
      <title>Mojolicious 8-Tips</title>
      <link>https://yusukebe.com/posts/2013/0623234219/</link>
      <pubDate>Mon, 24 Jun 2013 08:42:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0623234219/</guid>
      <description>依然としてPerlのWeb Application Framework=WAFは Mojolicious推し です。ボケてほどの大きなトラフィックを集めるようになったサービスでも使っている実績がありますし、自分で使っていてたまにバージョンアップの互換性で問題が出るくらいで、すっごく困った事が無いので重宝しております。今回は備忘録的な意味も兼ねて、Mojoliciousをある程度使用した時に便利なTips 8個を個人的にまとめてみます。え、何？「Mojoliciousっていったいどういうものなの？」「Mojoliciousって名前を聞いた事があるけれど使った事がないんだけど...」そんな方は9月に開催されるYAPC::Asia 2013で僕が入門チュートリアルな発表をやろうと企んでいるので、そちらへ足を運んでください！ちなみにトークはまだacceptされたわけではないので、以下のページのソーシャルボタンで応援してもらえるといいかもしれません！
 Mojoliciousでつくる！Webアプリ入門 - YAPC::Asia Tokyo 2013  さて、これでマーケティングな記事であることが暴露されたのですが8個のTipsを紹介します。
 
前提 mojoコマンドを以下のように叩いたプロジェクトをベースに解説します。
$ mojo generate app MyApp::Web
つまり Mojolicious::Lite のアプリでは無いです。
1. plackup で起動する .psgi ファイルをつくって plackup もしくは本番環境ならば starman / starlet で Mojolicious アプリを動かしています。Plack::Middleware::* が使えたりして便利です。こんな感じで .psgi を書けばOK！
 use strict; use FindBin; use lib &#34;$FindBin::Bin/lib&#34;; use Mojo::Server::PSGI; use Plack::Builder; use MyApp::Web; my $psgi = Mojo::Server::PSGI-&amp;gt;new( app =&amp;gt; MyApp::Web-&amp;gt;new ); builder { enable &#34;Runtime&#34;; $psgi-&amp;gt;to_psgi_app; };  2. ログを出力する Controller の中でこうすればログが出力されます。ちなみに開発環境でデフォルトだと「log/development.log」に流れます。
 $self-&amp;gt;app-&amp;gt;log-&amp;gt;warn(&#39;Hello, this is warning text.&#39;);  ほらこんな感じ。
 [Mon Jun 24 07:32:24 2013] [debug] GET &#34;/&#34;. [Mon Jun 24 07:32:24 2013] [debug] Routing to controller &#34;</description>
    </item>
    
    <item>
      <title>YAPC::NA 2013に行って来た</title>
      <link>https://yusukebe.com/posts/2013/0609222915/</link>
      <pubDate>Mon, 10 Jun 2013 07:29:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0609222915/</guid>
      <description>Perlの祭典とも言うべきイベントYet Another Perl Conference = YAPC 。去年はYAPC::Asiaでベストスピーカー賞をいただきまして、その副賞が「YAPC::NA または YAPC::Europe へ派遣」というモノでした。YAPC::Europeは今年キエフでの開催でちょいと行くのが大変。なので、アメリカはオースティンで開催されるYAPC::NAへ行かせてもらえることになりました。ぶっちゃけ究極ネガティブに捉えると「俺英語出来ないし、オースティン遠いし、これなんて罰ゲーム？」みたいな感じですが、勇気を振り絞って（というか、いただいたからには行く流れになったのですがw）、先日の YAPC::NA 2013へ参加してみたら、ものすごい楽しかった！！

せっかくUSへ行くのだからと、経由するサンフランシスコにも帰りに2泊してWeb関係の有名企業を見学したりしつつ、日本から来ている知り合いにも会ったりして、充実した日々になりました。実は帰国したのが昨日の昼間なので、熱が冷めないうちに6月1日から9日までの旅の様子や感想を綴りたいと思います。ちなみに、一緒に行った tokuhirom が既に彼のBlogで感想エントリーを上げているのでそちらも参考にするといいかもです。なので彼の記事とは被る点もありますがそこはお見逃しを。
 Future Perl - YAPC::NA 2013 に参加して - tokuhirom&#39;s blog.  YAPC::NA 2013 in オースティン YAPC::NA の NAは「 North America 」の意味。今年はテキサス州 オースティン のテキサス大学で 6月3日から5日 をメインに開催されました。

会場は大学内の2カ所の建物を使っていて、平行で走る4トラックのうち3つが教室のようなところ、1つがメインホールでこれが1,000人弱のキャパを誇ります。

そういえば、オースティンに行くまでにトラブルで1日半くらいかかったんだけど、この話、悲壮感漂うだけで別に面白くないので割愛します。とにかくオースティンは40度近くの気温で暑い。多分今の俺を見たら
プログラミングのカンファレンスに行ったのになんで日焼けしてるの？
 ってくらい太陽が照りつけてました。諸々の裏工作的な何かのおかげで20分のトークがアクセプトされたので、僕は3日目にプレゼンテーションをすることになってます。ではトピックをピックアップして紹介していきましょう。
英語でも「たくさん絡んだ」感 このYAPC::NAでは Social って言うキーワードが出てきます。それは日本に置けるSNS的な感覚の意味合いとは微妙に違っていて、ようは「 この場で人と絡もうぜ 」って趣旨っぽい。実際に会場での配布物には「Be Social. YAPC is a social conference.」って明確に書かれています。当然ながら、日本語よりもディスアドバンテージのある英語でのコミュニケーションになるんだけど、話せる機会そして人が非常に多くて「たくさん絡んだ感」がすごくある。

例えば、廊下にtokuhirom曰く「 無限コーヒー 」が設置されていて、これが実は美味いのですが、いいキッカケになっていました。

例えば自分のプレゼン終わった後に廊下でコーヒー飲んでるとすっごい気さくに
Good presentation !
 と言ってくれたりして、すっごい嬉しいし、みんな笑顔で声をかけてくれる。逆にこちらから声をかけてもしっかり対応してくれるし、話をよく聞いてくれるのがいいですね。個人的に、日本人としては「ドモリ」って感じで聞こえる理解が非常に難しい英語を喋る mst に声をかけたのが印象的でした。彼のプレゼン手法、Mooについて、イギリス出身だけどサッカーは苦手な件について話しましたね。アメリカって性質上、特にPerlについての話題だけじゃなくて「どこから来たの？」で会話がはじめられるのもよかった。アメリカといえども広いですから、各地から来てる人が多いのです。
以下の写真は「pm-uninstall uninstall pm-uninstall」っていうNAでも鉄板なネタを見せた xaicron がまさに絡んでいる様子。

また無限コーヒー＋廊下だけではなくて、2日目夜の懇親会や3日目のSpeaker&#39;s Dinnerというようにバー/レストランを（一部）貸し切りにして自由にコミュニケーション出来るのも充実してました。

そういえば、英語で会話ってどうなの？って件ですが、1日目、2日目、3日目と頑張って人と絡んでると結構出来るようになりますね。いや、出来るようになるというか「何を聞かれるかが予想出来る」ってのと「度胸がつく」ってのが大きいっすね。なんとかなります！
Perl6に関する話題多め、みんなプレゼンの表現がウマい 廊下でのコミュニケーションもありながら、興味のあるトークを適当に見てたのですが、全体的に「Perl6」もしくは「Perlそのもの」に関するトークが多かったですね。それはこうした開発者がUSに多いからでしょう。逆に日本で多いWebの運用話なんかはほとんど、いや、全くと言っていいほど無かったみたい。辛うじて聞くWebの構築系の話ではCatalyst+DBICという構成がメインっぽいですね。
内容よりも気になってしまったのは先ほどの mst のキーノートをはじめとして、皆さん 身振り手振りを加えた表現の力が非常に高い ことですね。例えば、Asynchronous programming FTW!  というトークは初心者向けのAnyEvent入門だったのですが、クイズ大会があって面白かった。
これから見せるコードを実行したらどうなるか。分かるヤツは手を上げて答えろ！
 みたいなノリw またLightning Talksの最終にダンスを見る事も出来た。</description>
    </item>
    
    <item>
      <title>ELB配下のEC2インスタンスにデプロイをする</title>
      <link>https://yusukebe.com/posts/2013/0520020744/</link>
      <pubDate>Mon, 20 May 2013 11:07:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0520020744/</guid>
      <description>Amazon Web Services＝AWSの話。実運用で使うかどうかは検討中なんだけど、とあるELBにぶら下がっているEC2インスタンスを自動的に取得して、それに対してデプロイ等を行うってのをPerlでやってみた。デプロイツールとしてCinnamonを使い、ELBやEC2情報を取得するのにAWS::CLIWrapperを利用した。
awscliのPerlラッパーであるAWS::CLIWrapperを使うにはそもそも「awscli」をインストールしなくてはいけないので入れる。
 % sudo eazy_install awscli  これでawsコマンドが使えるようになるんだけど、補完が効いた方がいいので、設定する。zshの場合はちょっと工夫が必要で以下のようにする。どのファイルを扱うかはお好きなように。
 % mkdir ~/.zsh &amp;amp;&amp;amp; cd ~/.zsh % wget &#34;https://raw.github.com/aws/aws-cli/develop/bin/aws_zsh_completer.sh&#34; % echo &#34;source ~/.zsh/aws_zsh_completer.sh&#34; &amp;gt;&amp;gt; ~/.zshrc % source ~/.zshrc  ターミナルで素早くコマンドを試したい時にはこのawsコマンドを使う。
さて、ここからが本題。デプロイ先はEC2のPublic DNS Nameを利用すると仮定し、そのリストをAWS::CLIWrapperを使って取得し、Cinammonに渡せばいい。流れは以下の通り。
 elb describe-load-balancers を実行してターゲットとするELBの情報を一覧で取得する ELBの情報には、それぞれ組み付いているEC2インスタンスのIDのみが入っている ecs describe-instances を実行してEC2の情報を一覧で取得する 一覧をループで回して先ほどのELBと関連しているEC2のIDと比較する マッチしたらそのPublic DNS Nameを配列リファレンスに入れる Cinnamonの「Lazily evaluated」機能を使ってそのホスト情報でデプロイさせる  動作可能性の高いコードは以下の通り。具体的な設定をしたら動きました。
 use AWS::CLIWrapper; use Cinnamon::DSL; use YAML; my $aws = AWS::CLIWrapper-&amp;gt;new(); role api =&amp;gt; sub { my $res = $aws-&amp;gt;elb(&#39;describe-load-balancers&#39;); die Dump $AWS::CLIWrapper::Error unless $res; my $elb; for my $r (@$res) { if ( $r-&amp;gt;{LoadBalancerName} eq &#39;myapp-test-elb&#39; ) { $elb = $r; } } die get(&#39;target_elb_name&#39;) . &#34; is not found.</description>
    </item>
    
    <item>
      <title>DMMのWeb APIに今更気づいたので...</title>
      <link>https://yusukebe.com/posts/2013/0513232521/</link>
      <pubDate>Tue, 14 May 2013 08:25:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0513232521/</guid>
      <description>ムフフなビデオも網羅的に扱うDVDや動画の提供サービス「DMM」のWeb APIがいつの間にか公開していたらしく、なにぶんノーマークだったもので昨日の夜知ってビックリした。というかDMMは一生API出さないだろうなんて決め込んでいたのが良くなかったですね。

ってことでとあるAV女優の商品一覧を出力するようなスクリプトを書いてみました。API固有の「癖」でいくつか実装する際の注意すべきポイントがあるのでそれをまず紹介します。Perlコードですが参考になるかもです。
リクエストパラメータにはタイムスタンプがいる リクエストのパラメータにはタイムスタンプが必須です。形式は
2013-05-14 08:03:16
 というもの。僕はDateTime派なので、以下のコードで現在のタイムスタンプの文字列をつくっています（＊ある方から指摘を受けてコードを修正させていただきました！）。
 use DateTime; my $timestamp = DateTime-&amp;gt;now( time_zone =&amp;gt; &#39;Asia/Tokyo&#39; )-&amp;gt;strftime(&#39;%F %T&#39;); print &#34;$timestamp\n&#34;;  この文字列は後でAPIにリクエストを送る時に使います。
リクエストパラメータはeuc-jpでエスケープさせる イマドキじゃない！？リクエストのパラメータはeuc-jpでエスケープさせることが必要なのです。通常のutf-8でエスケープさせたパラメータ値を含むURLを構築するにはURIモジュールの「query_form」メソッドが重宝するのですが、今回の場合はURIモジュール使わない方がいい？ってことでハッシュでつくったパラメータのキーとバリューの組み合わせを、URLに落とし込むには以下のコードを記述しました。
 use URI::Escape qw/uri_escape/; use Encode; use utf8; my $params = { key1 =&amp;gt; &#39;値その1&#39;, key2 =&amp;gt; &#39;値その2&#39; }; my $url = &#39;http://affiliate-api.dmm.com&#39;; my $queries; for my $key ( keys %$params ) { my $value = uri_escape( encode( &#39;euc-jp&#39;, $params-&amp;gt;{$key} ) ); push @$queries, &#34;$key=$value&#34;; } $url .= &#39;?&#39; . join &#39;&amp;amp;&#39;, @$queries; print &#34;$url\n&#34;;  返却されるXMLもeuc-jp レスポンスとして返されるXMLもeuc-jpな作りになっております。とりあえず簡単にXML::SimpleでPerlのデータ構造へパースする場合この文字コードの関係で細工がいります。「$url」変数に正しいリクエストURLがあるとした場合のコード。
 use LWP::UserAgent; use XML::Simple qw//; use YAML; my $ua = LWP::UserAgent-&amp;gt;new; my $res = $ua-&amp;gt;get($url); die $res-&amp;gt;status_line if $res-&amp;gt;is_error; my $content = encode(&#39;utf-8&#39;,$res-&amp;gt;content); $content =~ s!</description>
    </item>
    
    <item>
      <title>ささみさん＠がんばらないを見るために</title>
      <link>https://yusukebe.com/posts/2013/0512131501/</link>
      <pubDate>Sun, 12 May 2013 22:15:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0512131501/</guid>
      <description>放送終了してたアニメをバッファリング無しで快適に見たくなったので、スクリプトを書いた。あんま真似しないでください。
 use LWP::UserAgent; use URI::Escape qw/uri_unescape/; my $list_url = $ARGV[0] or die; my $url_list; my $ua = LWP::UserAgent-&amp;gt;new( show_progress =&amp;gt; 1 ); { my $res = $ua-&amp;gt;get($list_url); die $res-&amp;gt;status_line if $res-&amp;gt;is_error; @$url_list = $res-&amp;gt;decoded_content =~ m!class=&#34;page_item&#34;.+?href=&#34;(.+?)&#34;!smg; @$url_list = reverse @$url_list; } { for my $content_url (@$url_list) { my ($title) = $content_url =~ m!([^/]+?)/$!; my $res = $ua-&amp;gt;get($content_url); die $res-&amp;gt;status_line if $res-&amp;gt;is_error; my ($embed_url) = $res-&amp;gt;decoded_content =~ m!(http://auengine\.com/embed\.php\?file=[a-zA-Z]+.+?)&#34;!; $res = $ua-&amp;gt;get($embed_url); die $res-&amp;gt;status_line if $res-&amp;gt;is_error; my ($mp4_url) = $res-&amp;gt;decoded_content =~ m!(http://s[0-9]+\.auengine\.com%2Fvideos%2F.+?)&#39;!sm; $mp4_url = uri_unescape($mp4_url); $ua-&amp;gt;get($mp4_url, &#39;:content_file&#39; =&amp;gt; &#34;$title.mp4&#34;); } }  こんな感じで実行する。
 $ perl get_list.pl http://eyeonanime.com/sasami-san-ganbaranai/  ってことで、全話DL完了するのを待ちつつ、パスタつくるお！</description>
    </item>
    
    <item>
      <title>Devel::KYTProfのログをファイルに書き出して、I/Oのボトルネックを知る</title>
      <link>https://yusukebe.com/posts/2013/0414004205/</link>
      <pubDate>Sun, 14 Apr 2013 09:42:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0414004205/</guid>
      <description>Webアプリケーションが遅いとか感じる時って、僕の場合、I/Oがボトルネックなケースが多いのです。つまり、MySQLへクエリーを投げて返却を待つとか、memcachedにget/set等のメソッドを発行した時の待ち時間が長くかかってたり... とかです。そうすると計測して原因を突き止めたくなります。PerlのプロファイラはDevel::NYTProfとか色々ありますが、こうしたI/Oに関しての計測は「Devel::KYTProf」が便利です。適当な場所にて
 use Devel::KYTProf;  するだけで標準エラー出力に「空気読んで」ウマいこと色付きで、I/O周りのかかった時間とどこの箇所か？を表示してくれます。
ただ、この「標準エラー出力に表示」ってのは開発時にターミナルで確認する分には便利なのですが、例えば本番環境などで一時的にパフォーマンスを計測するためにはちょっと不便なことがあります。出来れば確認がしやすいようにファイルに書き出したくなります。Devel::KYTProfではlogメソッドを実装してあるロガーを指定すれば、柔軟に出力を制御出来るので、それを利用してファイルに書き出すことが出来ます。
ネームスペースをどうするか？Mouse使っている！ってのは置いておいて以下のようなロガークラスを定義します。
 package Nopaste::Logger; use Mouse; use Log::Dispatch; use Term::ANSIColor qw/colorstrip/; use File::Spec; use Encode; has &#39;filename&#39; =&amp;gt; ( is =&amp;gt; &#39;ro&#39;, isa =&amp;gt; &#39;Str&#39;, default =&amp;gt; &#39;kytprof.log&#39; ); has &#39;logger&#39; =&amp;gt; ( is =&amp;gt; &#39;ro&#39;, isa =&amp;gt; &#39;Log::Dispatch&#39;, lazy_build =&amp;gt; 1 ); sub _build_logger { my $self = shift; my $file = File::Spec-&amp;gt;catfile(&#39;./log/&#39; . $self-&amp;gt;filename); my $log = Log::Dispatch-&amp;gt;new( outputs =&amp;gt; [ [ &#39;File&#39;, min_level =&amp;gt; &#39;debug&#39;, filename =&amp;gt; $file, mode =&amp;gt; &#39;append&#39; ], ], ); return $log; } sub log { my ($self, %args) = @_; my $message = $args{message}; $message = colorstrip($message); $message = encode_utf8($message); my $time = scalar localtime; $message = &#34;</description>
    </item>
    
    <item>
      <title>miyagawaさんPodcast ep7に出演しました</title>
      <link>https://yusukebe.com/posts/2013/0403064135/</link>
      <pubDate>Wed, 03 Apr 2013 15:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0403064135/</guid>
      <description> miyagawaさんに声をかけていただき、彼のPodcast番組にゲストとして出演させていただきました。
 ep7 ゲスト: ゆーすけべー (yusukebe) - Tatsuhiko Miyagawa&#39;s Podcast  「ゲスト呼ばれたいな〜」と思っていたのですごく嬉しい反面、Podcast番組が始まった当初から前回までそうそうたるメンツが出ていたので軽く恐縮しつつ、でも、楽しいトークでした。内容はウマい事miyagawaさんが編集して40分にまとまっているので聴いていただけばよかと思います。ここでは本編に盛り込めなかったトピックごとの詳細や個人的なエピソードを簡単に紹介します。
 
ノマドワーキングの話題もありましたが、基本Perlのライトな話が中心になりました。miyagawaさんのPodcastだからかもしれませんが、そこで出てきたPerlの話題ってのが、ほとんど、彼が関わっているプロダクトだったり概念だったりして面白いです。4つほど紹介しましょう。
Blog Hacks miyagawaさんが伊藤直也さんと共著で出して、今や絶版になっている書籍。

番組内で触れている通り、Perlの小ネタがBlogといういじりやすいツールを対象に書かれているので、 初学の時分だいぶ楽しく読んだ記憶があります。 著者の二人以外にも寄稿している人が多数いてHackがバラエティに飛んでるのも良かった。 Blogってのは書く楽しみもあるんだけど、いじる楽しみもあるんだなーってことで、 MovableTypeをごにょごにょして動画をアップロードすると自動的にエンコードしてくれるオレオレYouTubeみたいなPluginも延長線上でつくった気がします。
Plagger miyagawaさんがつくった「プラガブルなフィードアグリゲーター」。 色んなところで「Plaggerがキッカケで本格的にPerlプログラミングを始めた」って言っているんだけど、 改めて学習できるという面でもいいプロダクトだと思います。 Filter::EntryFullTextの話で正規表現を覚えていったと語ってますが、 他にも色々なPluginを使って最終的には満足がいかなくなってソースコードを覗いたりして勉強させてもらったなー。この「ソースコードを覗く」っていう行為が自分にとって自然に出来るようになったのはPlaggerのおかげです。
Plack/PSGI WebアプリケーションとWebサーバーとをつなぐ取り決め＝PSGI、そのための実装＝Plack。 miyagawaさんとtokuhiromを中心に仕様決定と開発がなされ2009年のYAPC::Asiaではホットトピックスでした。僕はその開発の瞬間をIRC等で生で見ていたのでその素早さとOpennessに感動しましたね。 Plackが出てきて面白かったのは、本来ならばWeb Application Framework＝WAFを使わなくてはいけないところを車輪の発明的にオレオレWAFを何個かつくった件。Plack::RequestとかPlack::Utilとか使いやすいし、Router::SimpleやText::Xslateなんかも出てきたので組み合わせでだいたい出来ちゃう。今はMojoliciousをメインのWAFとして使うのに落ち着いたけど、回り道的にオレオレWAFをつくったのは勉強になったし楽しかった。
PerlCasual これも2009年のYAPC::Asiaが終わったあとのお話。その時に気づいた事を「Where are &#34;Casual Perlers&#34; ?」としてBlog記事に書いたら、 miyagawaさんが「On module writers and users」なるタイトルでレスポンス記事を投稿してくれた。そこがキッカケで「PerlをCasualにつかおう」っていう概念を打ち立て「PerlCasual」のイベントをやったりしてます。今日のmiyagawaさんとの話で海外のYAPCではモジュールを使ったアプリケーション事例みたいなトークが割合として多いということを聴いて興味深かったですね。
 
僕にとって大きな影響を与えている4つの事柄について、全てmiyagawaさんが関わっているのがやっぱすげーって感じですし、そんなmiyagawaさんから声をかけてもらって改めて嬉しかったです。
さてPodcast番組の方、自分で聴いてみると相づちで「そうですね」「そうっすね」ってフレーズが頻出してますw 寝る前に聴く方は数えてみるとよく寝れるかもしれません！またなんとなくオチがついているのでそれにも期待して聴いていただけると幸いですー。
 ep7 ゲスト: ゆーすけべー (yusukebe) - Tatsuhiko Miyagawa&#39;s Podcast  </description>
    </item>
    
    <item>
      <title>PerlCasual #05 を開催しました #perlcasual</title>
      <link>https://yusukebe.com/posts/2013/0330015031/</link>
      <pubDate>Sat, 30 Mar 2013 10:50:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0330015031/</guid>
      <description>昨日29日（金）の夜、渋谷ヒカリエにあるNHN Japanさんのカフェスペースにて「PerlCasual #05」を開催しました。 PerlCasualのイベントは、前回2011年4月29日にtomi-ruさんの「Perl CPANモジュールガイド」出版を記念して行ったイベントから数えて2年ぶりの開催です。発表者や関係者など合わせておおよそ70名弱の方に参加していただきました。ありがとうございます。いくつかのトピックに分けて今回のイベントを振り返ってみましょう。

開催に至った経緯とその準備 とある2月の日。大学の後輩であり現在はヒカリエの一番上に勤務しているすがちゃん（@yoshirock55）と夜飯を食った帰り際、久しぶりにPerlCasualのイベントをやろう！と個人的に熱くなったのが今回のモチベーションです。すがちゃんは会社の同僚と、社内ベンチャー的にWebサービスやそれと絡んだiPhone/Androidアプリを開発していて、そのバックエンドを担当するルイ（@ruik）がPerlでシステムを組んでいたので、その件について何か発表する場が欲しいと言われたのでした。「あー確かにアプリケーション事例とかを発表できるイベントとしてPerlCasualをやりたいなー」と思ったので、その晩に構想をだいたい練って、次の日の午前に941さんに会場を借りれるかを相談しつつ、発表者候補の人に個別でアプローチ。皆さん快く引き受けてくれてる風だったので、プログラムを組んで昼過ぎにATNDで募集を開始。結果夕方には参加候補の定員が埋まるという24時間かけずに勢いでイベント企画が進んだという形です。
今回の狙い 発表者に関しては全て「僕がこの人の話を聞きたい！どういうトークをするのか気になる！」という基準で声をかけたので完全に「ゆーすけべーアワー」を目指しましたw 結果的に運用系の人からRubyの人まで色々なトークが聞けて、普段あまり絡みの無い人同士の懇親もある程度深められたのでは無いかと思います。
と、それと同時に新しいことが始まるこの時期にやったので、なるべく「Perlで（もちろんPerlじゃなくてもいいけど）こんなこと出来ます！」と言ったアプリケーション寄りの発表が多くなるようにしてみました。参加者の方が「こんなこと出来るんだ！俺も何かつくってみよう！」と感じてくれれば嬉しいですね。
こうした諸々の結果とも言えますが、hidekさんから
あんだけ Perl 書いていない人が参加してるなら、スピリチュアルな話より、初めての Perl 的なトークがもっとあっていいんじゃないかなーとかマジレス #perlcasual
— hidekさん (@hidek) 2013年3月29日   というマジレスをいただきまして、確かにその通りですね。今回はPerlを含めたエンジニアリングで「What=何」をやるか？やったか？みたいな点が発表の中で多く見受けられたので、次回やる時には「How=どうやって」やるのか？の部分にフォーカスしてみてもいいですね。
個性が出た発表達 冒頭のそれぞれ20分のトークではルイと@koba04さんが登場。個人から少数チームで開発する過程と何をつくったかが聞けたので「カジュアル」という趣旨に非常に沿っていてよかったですね。僕も以前から小さなWebアプリをつくっては壊しているため、共感する点ポイントがたくさんあってうなずきながら聞きつつ、やる気になりました。

その後は@sugyanによるライブコーディング。さすがに様々な要素が詰まっているWebアプリを30分でリアルタイムで書いていくのは少々無茶ぶりだった気がしますが＞＜ 2分オーバーしつつも、最後Heroku上で動くものが出来てうまくまとめてくれました。
最後のLTでは7名の方に発表していただき、冒頭「Perl書いていません」というトークが連続しつつも皆さん個性がある発表で楽しかったっすね。
統計情報 さて、イベントの参加者についての統計情報を簡単に紹介。実際に開催してATNDの募集定員が100人埋まっている状態でいわゆるドタキャンが多めに出て、上記で述べた通り会場に出入りした人はのべで70名程度となったはずです。歩留まりで実際足を運んでくれた方のパーセンテージが低めだなーという経験則からの感想ですが、期末ということもありしょうがない事ですね。結果、会場がほどよく埋まりつつ、ゆったりとしたスペースも出来たのでよかったですね。
困ったのはすがちゃんにお任せしていた懇親会の居酒屋の予約状況だったのですが、散々「懇親会来てね！」とアナウンスしたり、当のすがちゃんの最後の押しもありで40名ほど参加していただき、会費が「炎上プライス」にならなくてよかったですw
次回？へ向けて 久しぶりですが、やってよかった！と思うのと、もう少しこーしたいな〜という反省点もあるので、不定期な形で次回、それ以降もやっていきたいです。今回開催にあたってのモチベーションになったのはすがちゃんの一声だったので、リアルでもTwitterやFacebookでも「こんなのやってよ」「こういう場が欲しい」と言っていただければ採用するかもしれないので、お気軽に声をかけてください。
そういえばLingrチャット 当日言うの忘れてたんですが、少し前から「ゆるふわにPerlの話題を話せる」チャットがLingr内で立ち上がってるので、そちら知らない方は是非Joinしてみてください！
 http://lingr.com/room/perl_jp/  最後に 参加者、発表者、お手伝いの皆様、会場を貸していただいたNHN Japan様、ありがとうございます！</description>
    </item>
    
    <item>
      <title>Kindle本「Perlについて語ろう」を出版しました</title>
      <link>https://yusukebe.com/posts/2013/0315014846/</link>
      <pubDate>Fri, 15 Mar 2013 10:48:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0315014846/</guid>
      <description>プログラミング言語「Perl」の入門書「Perlについて語ろう」をKindle向け電子書籍として出版し販売を開始しました。

 Perlについて語ろうposted with amazlet at 13.03.15  和田裕介 (2013-03-13)
 Amazon.co.jpで詳細を見る    
本書は週刊で発行しているメルマガ「 ゆーすけべーラジオ」内の連載を原稿とし、加筆修正したものとなります。文字数はトータルで11万文字ちょい。紙媒体にして100ページ前後というボリュームで、480円という値付けにしてみました。Perl処女脱出から、基本的なデータ構造の解説、様々なCPANモジュールの紹介、Webアプリケーションフレームワークの使い方などを「サクっと」した文章とコードでまとめました。Perl初心者の方を対象に、読み終わった頃にはWebアプリ開発ができている！ところまで持っていくことを目標にした入門書です。以下目次になります。
 
 はじめに Perlとは？ 初めてのPerl 関数とスカラー、配列 Perlにおけるデータ表現 データを操作する CPANモジュールを使ってみよう おっぱいスクリプトを読み解く その1 おっぱいスクリプトを読み解く その2 おっぱいスクリプトを読み解く その3 Twitter Search API を使ってみよう まだまだあるぞ、CPANモジュール まだまだあるぞ、CPANモジュール その2 Webアプリを動かす環境 Mojolicious入門その1 Mojolicious入門その2 Mojolicious入門その3 O/R Mapper でデータベース操作 O/R Mapper でデータベース操作 その2 O/R Mapper でデータベース操作 その3 自作モジュールをつくる 入力値の妥当性をチェックする 一歩進んだPerlの環境つくり Instagram検索をPerlでつくる 運用環境にデプロイする ファイル操作のための便利なモジュール 実践「セッションについて」 イマドキのメール送信 終わりに   
Kindle Paperwhite に最適化していますので、Kindle端末では快適に読めるでしょう。その代わりiOSなどのKindleアプリだと少々プログラミングコードの部分が文字が大きく見えてしまったり、目次が対応してないなど使いにくい点ございます。その点、ご了承いただいて、アップデートを待っていただければと思います。端末での見た目はこのような具合です。
Kindle Paperwhite 
iPad mini 
 
今回の出版に当たっての経緯を簡単に紹介。以前からメルマガで連載していたPerl入門記事をまとめてKindle本化したいなーとちょこちょこ手元で電子書籍化してたりしたんですが、おととい、naoyaさんがChef Solo本をKindleで出したのを見て影響され、本腰を入れたという具合です。Kindleダイレクトパブリッシング＝KDPの仕組みを知るためにも、まず出してみようという意気込みだったのですが、案の定諸々と意図しないことが起こったり、また、上記した通りiOSのアプリでは表示がKindle端末と違ったりとバッドノウハウ的なことがありますね。原稿の電子書籍化の行程も含めて後ほど記事にしたいと思います。
さて、最後にもう一押し本書のアピールをさせていただきますと、メルマガの連載が元という性質上、一つ一つの「固まり」がそれぞれで完結している形になっていて、始めからちょっとずつ読んでコードを書いていくと自然とPerlに近づけるようになっています。学習の際に「キリ」がつけやすいって感じです。また、モジュールやWebアプリの紹介においては僕が楽しい！と思えるようなコード例を記載しているので、共感してもらえれば学習効率は高いでしょう。
えー、そんなわけでワンコインで読めちゃう「Perlについて語ろう」をぜひともよろしくお願いいたします！</description>
    </item>
    
    <item>
      <title>Facebookイベント参加者の名刺画像を自動生成！</title>
      <link>https://yusukebe.com/posts/2013/0311050010/</link>
      <pubDate>Mon, 11 Mar 2013 14:00:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0311050010/</guid>
      <description>@shinotraさんが先日行われたHokkadio.pm #9で面白いことを発表してました。その一つがATNDのイベント参加者の名刺画像を自動生成するというモノ。神奈川にいながら北海道の熱気を感じつつ、昔同じようなことを「Facebookのイベントを対象に」やったなーと思って、もう一度最初から書き直してみました。イベント参加者のリストを取得し、名刺っぽい画像を出力するって代物です。Facebookでの認証処理から画像生成まで興味深いポイントを含んだWebアプリになったので、つくる行程から解説してみます。
ちなみに実装はPerl、WebフレームワークにはMojoliciousを使っていますが、他の言語でも流れは同じなので参考にしてください。
Facebook認証を行う まず、Facebookから情報を取得するためにアプリケーション登録をします。 「facebook developers」のページからそれが出来るのでその後以下の文字列を取得します。
 アプリID アプリのシークレットキー  PerlでFacebookのAPIを扱うには、内部実装は置いておいてw Facebook::Graphというモジュールが便利です。使い方はこんな感じ。
アプリIDとシークレットキーを指定してインスタンスを作成。postback パラメータってのはFacebookの認証画面に行った後に戻ってくるアプリケーションのパスを指定する。
 use Facebook::Graph; my $fb = Facebook::Graph-&amp;gt;new( app_id =&amp;gt; &#39;your_app_id&#39;, secret =&amp;gt; &#39;your_secret&#39;, postback =&amp;gt; &#39;http://localhost:3000/callback&#39; );  Facebook側で認証するためのURLを作成する。基本的に「/login」とかそういうパスにアクセスされたら、この「$uri」へリダレイクトさせる。
 my $uri = $fb-&amp;gt;authorize-&amp;gt;extend_permissions(qw/user_events/)-&amp;gt;uri_as_string;  インスタンス作成時に postback で指定したパスへユーザーがリダイレクトされるので、その時にくっついていてくる code パラメータを食わせると access_token が取得可能になる。access_token の文字列などはセッションで覚えておくと吉。
 $fb-&amp;gt;request_access_token($self-&amp;gt;req-&amp;gt;param(&#39;code&#39;)); my $access_token = $fb-&amp;gt;access_token;  次回以降Facebook APIへアクセスするにはセッションから access_token を取得し、access_token メソッドの引数に渡しておく。
 $fb-&amp;gt;access_token($access_token);  これを踏まえて、Mojolicious::Liteでの実装はこんな感じになります。helperでFacebook::Graphのインスタンスを取得する「fb」メソッドをはやしていますが、ここはもう少し工夫できるかもですね。
 #!/usr/bin/env perl use Mojolicious::Lite; use Facebook::Graph; helper &#39;fb&#39; =&amp;gt; sub { my $c = shift; Facebook::Graph-&amp;gt;new( app_id =&amp;gt; &#39;your_app_id&#39;, secret =&amp;gt; &#39;your_secret&#39;, postback =&amp;gt; $c-&amp;gt;req-&amp;gt;url-&amp;gt;base . &#39;/callback&#39;, ); }; get &#39;/&#39; =&amp;gt; sub { my $self = shift; my $user; if ( my $access_token = $self-&amp;gt;session(&#39;access_token&#39;) ) { my $fb = $self-&amp;gt;fb; $fb-&amp;gt;access_token($access_token); $user = $fb-&amp;gt;fetch(&#39;me&#39;); } $self-&amp;gt;stash-&amp;gt;{user} = $user; $self-&amp;gt;render(&#39;index&#39;); }; get &#39;/login&#39; =&amp;gt; sub { my $self = shift; my $fb = $self-&amp;gt;fb; my $uri = $fb-&amp;gt;authorize-&amp;gt;extend_permissions(qw/user_events/)-&amp;gt;uri_as_string; $self-&amp;gt;redirect_to($uri); }; get &#39;/callback&#39; =&amp;gt; sub { my $self = shift; my $fb = $self-&amp;gt;fb; $fb-&amp;gt;request_access_token( $self-&amp;gt;req-&amp;gt;param(&#39;code&#39;) ); $self-&amp;gt;session( &#39;access_token&#39;, $fb-&amp;gt;access_token ); $self-&amp;gt;redirect_to(&#39;/&#39;); }; get &#39;/logout&#39; =&amp;gt; sub { my $self = shift; $self-&amp;gt;session( &#39;access_token&#39;, undef ); $self-&amp;gt;redirect_to(&#39;/&#39;); }; app-&amp;gt;start; __DATA__ @@ index.</description>
    </item>
    
    <item>
      <title>地域コミュニティが熱い！？Kansai.pmに行ってきました #kansaipm</title>
      <link>https://yusukebe.com/posts/2013/0225020413/</link>
      <pubDate>Mon, 25 Feb 2013 11:04:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0225020413/</guid>
      <description>先日の土曜日2月23日、大阪駅のすぐ近くYahoo!さんの会議室にてKansai.pm第15回ミーティングが開催されました。僕はJPA＝Japan Perl Associationさんの支援を受けてゲストスピーカーとして参加させていただいた次第です。大阪に行くのは高校の修学旅行で立ち寄った（確か...）以来。「大阪駅-梅田駅の地下とかがダンジョンで迷いやすい＞＜」なんて情報を事前に仕入れていたのでビクビクしつつも行ってきました。その報告をしつつなんとなく地域コミュニティとしてのKansai.pmについての考察、感じた事をまとめます。
僕の発表 どんなトークをしようかなーと悩んでいたのですが、後ほど盛大にフューチャーするpapix君から
Kansai.pm はスキル的に幅が広いのでなるべく全員に刺さるような発表を！
 みたいなことを言われ、テーマを決めました。題目はズバリ
「Webサービスのつくり方」のつくり方
 去年の11月末に出版した初めての著書「Webサービスのつくり方」を制作していく過程を紹介しつつ、そこで書けなかったことやPerlのもっとツッコんだ話をしました。最終的には「自分はWebサービスなどモノをつくる楽しさを伝えたかったから書いたよ！」という多少スピリチュアルなまとめになりました。とはいえ、本を出してみないと分からない編集作業のことや、その際、使ったPerl製のツール、MojoliciousやMVCモデルの実装の話などを織り交ぜたので人それぞれ興味を持ってもらうところがあったのではないでしょうかね。
発表資料は以下です。
 「Webサービスのつくり方」 のつくり方   from Yusuke Wada  Kansai.pmについて Kansai.pmは「日本で言えば東京に次ぐ大都市大阪を中心に行われている」という観点から言えば、ぶっちゃけ「あまり活動的ではないのかな？？」というイメージが個人的にありました。ところが参加して、色々な話を聞いたりすると「なんだ！盛り上がってるんじゃないか！」と印象が180度変わりました。
今回のイベントに限って言えば、たまたまかもしれませんが、募集ページで35名を集っていたところ実際参加した人が「34名」とのこと。しかもインフルエンザにかかってしまった人が直前でキャンセルしたなんてことを考慮するとドタキャン率がほぼ0に近い。素晴らしい！会議室の席がちょうどよく埋まり、僕が発表している最中に見渡すと皆さんしっかり話を聞いてくれていた様子で嬉しかったです。LTのコーナーでは学生さんが何人か発表していて若い人も積極的に参加してたのも勢いを感じます。

Kansai.pmはもちろん初参加だったのですが、さすが「.pm」イベントだけあり、 Perlという共通の話題で色々な方とお話しするのがすんなりとできました。@shiba_yu36さんと「Cinammonかわいいよ」「フレームワーク何使ってる？ああ、アプリごとに自作でいいよねー」と会話したり、@bool_foolの人がVimの話題になると急に盛り上がったり、@issmさんとアレなことについて検討したり、僕がCarton童貞だったのでみんなでCartonについてあーじゃないこーじゃない言ったり。楽しかったー。

papixについて そんなKansai.pmな人の中にも一押しのキャラがいます。それがpapix君。

去年のYAPCで出会った瞬間から「コイツいいキャラだなー」と目を付けていたのですが、ある意味地域コミュニティに貢献/参加しているという意味では今一番勢いある方ではないかなー。彼はこう見えても現在M1の大学院生。その割にはHachioji.pmにちょくちょく顔を出したり、他のHokkadioやFukuokaの.pmに参加したりと「どんだけ移動してるんだ！」とツッコミしたくなります。そう「papixは各地の地域.pmに偏在している」。
自らも大阪を中心に「Perl入学式」というイベントを、今回Kansai.pmを主催した若林さんと共に行っています。1年間かけてHello WorldからWebアプリをつくるまでの行程を少人数に教えるワークショップみたいです。
papixが自発的にこうした活動を行うようになったエピソードを聞いたのですがなかな面白かった。とある技術とは関係ないコミュニティに属していたんだけれど、そこの「お互い足をひっぱりあう」感じが気に入らなかった。ある時Perlのコミュニティに出会って足を引っぱりあうどころか、そんなことは無くて、みんな同じ立場で会話し、共通の技術の話で盛り上がっている。こうした姿に心を打たれ、自分でも楽しみつつも、イベントをガンガンやるようになって、のめり込んでいったんだって！
とにかくpapix君は勢いがあるし、やりたいことも明確、かつ自らの課題もしっかりと認識している23歳。応援しているし、手伝えるところがあったらいつでも声かけてください！という具合です。
まとめ 2010年YAPCの時に「PMグループディスカッション」なる企画があったり、今回の通りJPAの地方.pmへの講師派遣制度ができたからか、地方のPerlコミュニティが結構熱い。もしくは熱くなってるんじゃないかと個人的に感じるところです。実際、@myfinderさんがゲストで参加したFukuoka.pmとHachioji.pmが時を同じくして開催されていました。
Perlに限らずの話ですが、それぞれの人が愛する場所でテクニカルな話題やソレ以外で盛り上がれる仲間がいたりイベントがあったりするのはおそらく楽しいこと。今回、papix君をフューチャーしましたが、彼のような勢いがある人やそれについて行く人。立場はそれぞれだと思いますが、ウマい事回りを巻き込んで活性化していくといいですね。
全然話題変わりますが、大阪は特に食べ物の物価が安いですね〜 そしてウマいという。さすが「天下の台所」。串カツよかったー。また是非行きたいです！</description>
    </item>
    
    <item>
      <title>Mojoliciousでテンプレート置くディレクトリを追加したい時</title>
      <link>https://yusukebe.com/posts/2013/0222080919/</link>
      <pubDate>Fri, 22 Feb 2013 17:09:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0222080919/</guid>
      <description>一つの「lib」ディレクトリ内で複数のMojoliciousアプリを動かしてるんだけど、 するとMojoliciousが使うデフォルトのテンプレート置き場「templates」ディレクトリだけじゃ管理しきれなくなってきます。そこでアプリごとにテンプレートを置く場所を変えちゃえってのが今回の趣旨。
といっても この辺 のドキュメントに書いてある。Mojolicious::Rendererオブジェクトへパスを追加すればいい。Liteじゃない方のMojoliciousアプリだったら、 Mojolicious.pmを継承しているモジュールの「startup」内とかで
 unshift @{$self-&amp;gt;app-&amp;gt;renderer-&amp;gt;paths}, File::Spec-&amp;gt;catfile(MyApp-&amp;gt;base_dir, &#39;templates/sp&#39;);  とかすればよい。ちなみに MyApp-&amp;gt;base_dir ってのはアプリのベースディレクトリを返すモジュール及び関数が定義されている前提です。
こうすることで例えば、想像しやすいように絶対パスで書くと
/home/yusuke/www/myapp/templates/sp/not_found.html.ep
 がコントローラ内の「$self-&amp;gt;render_not_found」で呼ばれたりします。ふぅこれである程度のことがMojoliciousで対応できる！と言う感じです。</description>
    </item>
    
    <item>
      <title>PerlでGoogle AnalyticsへアクセスするならNet::Google::Analyticsが便利</title>
      <link>https://yusukebe.com/posts/2013/0221075705/</link>
      <pubDate>Thu, 21 Feb 2013 16:57:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0221075705/</guid>
      <description>fluentdとかTreasure Dataとかログを拾い集めて集計する新しい技術やプラットフォームが出て来てますが、Webの表層レベルだとGoogle Analyticsがやっぱり便利で使えます。ただ、サイト全体のトラフィックを観察するのには向いていますが、例えば、いくつかURLがあってそれぞれのPVを取りたい！って時に毎回毎回URLパスを入れては数字を確認するってのには骨が折れます。そこでGoogle AnalyticsのAPIを使って自動化すると捗ります。
Perlで実装するには Net::Google::Analytics というモジュールがサクッと使う分には便利です。
 Nick Wellnhofer / Net-Google-Analytics - search.cpan.org  厳密に言うならば「Google Analytics Core Reporting API」の「Version 3」に対応しているものです。では指定したURLからそのPVを取得するサンプルを紹介しましょう。
まず、OAuthの認証が必要なのですが、この Net::Google::Analytics だと以下のコードを使えば認証用のURLが出てきて必要なIDなどが手に入ります。これはイイ。ちなみに client_id と client_secret はGoogle API管理画面でアプリ登録をすると手に入ります。
 use Net::Google::Analytics::OAuth2; my $oauth = Net::Google::Analytics::OAuth2-&amp;gt;new( client_id =&amp;gt; &#39;your_client_id&#39;, client_secret =&amp;gt; &#39;your_client_secret&#39;, ); $oauth-&amp;gt;interactive;  Refresh Acces Token というのが取得できるので、それを使いつつ、実践スクリプトを書きます。必要な認証部分はこういう感じ。
 use Net::Google::Analytics; use Net::Google::Analytics::OAuth2; my $analytics = Net::Google::Analytics-&amp;gt;new; my $oauth = Net::Google::Analytics::OAuth2-&amp;gt;new( client_id =&amp;gt; &#39;your_client_id&#39;, client_secret =&amp;gt; &#39;your_client_secret&#39;, ); my $token = $oauth-&amp;gt;refresh_access_token(&#39;your_refresh_access_token&#39;); $analytics-&amp;gt;token($token);  次にいよいよ取得したいURLのパスを指定して、リクエストをかけます。$profile_id にはAnalytics用のサイトごとのプロフィールIDを入れてください。取得する期限は今年から今までって感じにしています。
 $profile_id = &#39;your_profile_id&#39;; my $req = $analytics-&amp;gt;new_request( ids =&amp;gt; &#34;ga:$profile_id&#34;, dimensions =&amp;gt; &#34;ga:pagePath&#34;, metrics =&amp;gt; &#34;ga:pageviews&#34;, filters =&amp;gt; &#34;ga:pagePath==/about.html&#34;, sort =&amp;gt; &#34;</description>
    </item>
    
    <item>
      <title>Kansai.pm 2/23 (土) でトークしてきます！</title>
      <link>https://yusukebe.com/posts/2013/0215004028/</link>
      <pubDate>Fri, 15 Feb 2013 09:40:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0215004028/</guid>
      <description>諸々な事情の結果、JPAさんのご支援でKansai.pmへ参加させてもらうことになりました。来週2月23日土曜日の「Kansai.pm 第15回ミーティング」です。ゲストスピーカーという扱いで40分間のトークをしてきます。色々話したい題目はあったのですが、@__papix__君というイキのいい好青年の要望を加味して、昨年末に出版した拙作「Webサービスのつくり方」の裏話的な内容にしました。タイトルは「『Webサービスのつくり方』のつくり方」です。
以下Twitterのツイートに収まるように書いた概要。
拙作の著書がどのような経緯で執筆を行ったかを脱線を挟みながらもプレゼン。Perl製ツールが大活躍した件。本書では書けなかったチームでのサービス開発、細かい実装話なども紹介する予定です
 本を書くというチャレンジをどのように楽しくこなして行ったか？を中心にその環境、使ったツール、個人的に立てた戦略などをお話します。また、本書で取り上げてない、よりPerlにツッコんだ事例や最近のボケて開発の実装・運用などの裏側、日々パートナーとどのようにPerlプログラマーとして仕事をしているか？も紹介したいと思います。... と言い出すと何でもありな感じですw まぁスライドはもちろん、まだ手をつけていないのでその時のノリで面白そうなネタを提供したいです。Kansai.pmにはスキル的にも興味的にも幅広い方が参加しそうなのでなるべく多くの人の関心をカバー出来るのではないでしょうかね！
本イベントの募集は
 Kansai.pm 第15回ミーティング on Zusaar  にて行っているようです。煽っておいてなんですが、今現在定員の35人ぴったり！ですがキャンセルとかでるかもなので、気になる＆大阪付近の方は是非お申し込みを！個人的にはKansai.pmの人とあまり絡みが無かった感があるのでこれをキッカケに仲良くなれたらいいなーと思っております。</description>
    </item>
    
    <item>
      <title>Webアプリのディレクトリ事情</title>
      <link>https://yusukebe.com/posts/2013/0130093800/</link>
      <pubDate>Wed, 30 Jan 2013 18:38:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0130093800/</guid>
      <description>現在進行中で開発・運用しているWebアプリのファイルとディレクトリが若干ゴチャゴチャしてたんで、整理したらだいーぶスッキリした。こんな感じ！
 MacBook@yusuke % tree -L 1 -F . ├── Makefile.PL ├── cli/ ├── config/ ├── deploy/ ├── etc/ ├── lib/ ├── log/ ├── psgi/ ├── public/ ├── sandbox/ ├── script/ ├── t/ └── templates/  ちなみにこのプロジェクトは以下が前提です。
 Perl製、WebのフレームワークはMojoliciousを使っている 一つじゃなくていくつかのアプリのエンドポイントがある つまり一つのModel、複数の「Contoroller郡」で構成されている  一個一個見て行こう！
 
Makefile.PL Perlプロジェクトをビルドするためのファイルだお。現状ではとりあえず「Module::Install」使っています。
cli/ CLI、つまりコマンドラインから実行する類いのスクリプトファイルが入っています。 cronなどで定期的に実行されるプログラムももちろんこの中。
config/ 設定ファイルを入れます。環境によってDBの接続先とかを変えたいからねっ♪ 最低でも「development.pl」と「production.pl」が入っていますな。 そうそう拡張子でも分かる通り、設定ファイルはPerlのスクリプトですね。YAMLとかはもう使いません。
deploy/ デプロイ＝サーバ環境への配置に使える便利なスクリプトが入っているよ。 作者の人 から「ステマよろ〜」と言われたので、ステマすると Cinnamon っていう薄いCapistranoみたいなすごく使いやすいデプロイツールの設定ファイルが入っているんだ。昨日から使いだしてるんだけどガチで、Cinnamonかわいいよ。
etc/ なんかどこに入れよっかなー？って迷った感じのファイルを入れてるよ。僕はDBのスキーマ定義ファイルが入ってるね。
lib/ Perlのライブラリ群だよ。一番肝心なところさ。ちなみに「MyApp」という名前のサービスだとしたら、 「lib/MyApp/Web/Controller」以下にコントローラを置いたり、「lib/MyApp/Model/Hoge.pm」というファイルにモデルの一つを定義したりしてるよ。この辺りの名前空間の切り分けが大事かもね。
log/ これはフレームワークが自動的に吐くログが入るよ。主に開発時にONにするね。
psgi/ 上記した通り複数アプリをこのディレクトリ内で扱っているから複数のPSGIファイルが存在するんだ。 だからこの中にぶち込んでる！
public/ 静的コンテンツを置く場所だよ。これもMojolicious標準で使われているディレクトリ構造に従っている。 フロントサーバに静的コンテンツの配信を任せたい時とかは、条件を指定してこのディレクトリを参照させるね。
sandbox/ 実験スクリプトを置く場所だよ。だからレポジトリには入れないんだー。
t/ テストファイルを入れるよ。頑張って書かないとね。
templates/ これだけディレクトリ名が複数系でちょっとキモいかもだけど、テンプレートファイル用のディレクトリ。 Mojolicious標準のテンプレートエンジンを使っているから拡張子が「.html.ep」のファイルだらけさ。
 
まぁ何が言いたいかって言うとCinnamonがすごいいいってことと、ディレクトリすっきりさせたりして気持ちが晴れたってことですね。ハイ。</description>
    </item>
    
    <item>
      <title>Webアプリにおけるキャッシュ。オレオレ事例</title>
      <link>https://yusukebe.com/posts/2013/0118074955/</link>
      <pubDate>Fri, 18 Jan 2013 16:49:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0118074955/</guid>
      <description>Webアプリにおいて、アクセスやデータ量が多く/大きくなってくると、 バックエンドのパフォーマンスが低下しがちです。 MySQLなどのRDBMSにデータを置いている場合は適切に クエリーを改善する、インデックスを張る、といった策で解決する場合もありますが、 キャッシュを効果的に利用することでより高負荷に対応できる可能性があります。 また、外部APIへの問い合わせなど、どうしてもネットワークや他のリソースのレスポンスタイムに 引きずられる部分に関しては情報を手元にキャッシュしておくと何かとよいでしょう。
今回はWebアプリケーションのレイヤーで最近僕がどのようにキャッシュを使っているのか？ の事例を紹介しつつまとめてみたいと思います。
 
キャッシュについてとその基本 そもそもキャッシュとは、簡単にふわっと表現するならば、 「一時的に情報を手元の近い場所に置いておいて利用する手法、もしくはその一時データ」 と捉えることができます。 拙作の「Webサービスのつくり方」にも書きましたが、 例で説明するのがてっとり早いし、具体的な使い方が分かるでしょう。
この「ゆーすけべー日記」のAtomフィードをどこかのアプリケーションで利用するとして以下のようなコードを書きます。parse_feed っていうのが出て来ますがこれはフィードをパースするためのメソッドが定義されていると仮定してください。
 use LWP::Simple qw/get/; ...; my $content = get(&#39;http://yusukebe.com/atom.xml&#39;); my $data = parse_feed($content); print $data-&amp;gt;title . &#34;\n&#34;;  もし、更新を逐一知りたかったらこのコードを改良していけばいいのですが、 例えば、エントリーのタイトルをとあるWebアプリのサイドバーに一覧表示させたいなんて時があります。 アクセスの度にユーザーエージェントが（この場合はLWP::Simpleのgetメソッドを使って行っている）、 僕のブログにアクセスしてAtomフィードをとってくることになるのですが以下のことが分かります。
 ネットワークを使って外部に、つまり yusukebe.com にアクセスするので時間がかかる 短い頻度で更新されているわけではないので、毎回情報を更新させる必要がない  そこで、キャッシュを使います。例えば30分間情報をキャッシュさせるとなるとこのようなフローになります。
 フィードコンテンツがキャッシュされているか？をチェックする キャッシュされていればそのデータをそのまま使って、終わり キャッシュが無ければ yusukebe.com からフィードを取得 有効期限を30分として、キャッシュをセットする 取って来たデータを使って、終わり  キャッシュを実装する時にはまずは「get」「set」「delete」辺りのメソッドを覚えておけばいいのですが、 それを使って疑似コードで表現するとこんな感じになります。
 use LWP::Simple qw//; # get メソッドが紛らわしいのでエクスポートしない ...; my $key = &#39;key_of_feed&#39;; # キャッシュのキーを予め変数に my $data = $cache-&amp;gt;get($key); # getメソッド unless($data) { # キャッシュが無ければ my $content = LWP::Simple::get(&#39;http://yusukebe.com/atom.xml&#39;); $data = parse_feed($content); # フィードをフェッチしてパースする $cache-&amp;gt;set($key, $data, 60 * 30); # キー、値、有効期限の秒数、この順番でset } do_something($data); # 何かする  memcachedなどのをバックエンドにしたキャッシュでは、このようにキャッシュを保持する有効期限を決めることが出来、上記のフローはキャッシュを使うに当たっての定石かと言えます。キャッシュについてとその実装を軽く説明したところで事例に入りましょう。</description>
    </item>
    
    <item>
      <title>Dailymotionの動画を手に入れてムラムラするスクリプト</title>
      <link>https://yusukebe.com/posts/2013/0115153123/</link>
      <pubDate>Wed, 16 Jan 2013 12:31:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2013/0115153123/</guid>
      <description>iPad miniを手に入れると寝転びながらそれで映像を見たくなる。 YouTubeで検索して好きなアーティストのライブ映像見たりするのもいいんだけど、 エンタメなコンテンツが見たい。 そういえばゴッドタンっていうテレ東の深夜番組の「キス我慢選手権」がすごい面白いので、 今まさに寝転びながらiPad miniで見たい。

で、Dailymotionにキス我慢の動画がたくさん転がっているなーって知っていたので、 DailymotionのiPad用アプリとかで試してみたんだけど、どーも回線の都合などであんまり快適ではない。 出来る事ならば、気になる動画をファイルとしてぶっ込みたいところ。 昔似たようなものを作っていたんだけど（ListPodと名付けていた...）、出来る事なら、 PC側で動画を検索してプレビュー、気に入ったらリストに入れて、それがPodcastになって、 iPadに入るなんてーいうローカルで楽しむためのWebアプリを作ろうとしている。 さらに言えば、Dailymotionだけではなく他の動画サイトにも対応させたい。
てなわけで、何か作ろうとしているんだが、その一歩である今日の成果発表。 とりあえず、Dailymotionをの動画をごにょった。
Dailymotion上の動画を検索する まず、これはDailymotionのAPIドキュメント見てもあんま載ってなかったんだけど、 動画の検索の仕方。URLのパスに検索語を含めるらしい。そしてこうすればJSONで値が返ってくる。
 use LWP::Simple; use JSON; use URI; use URI::Escape; use utf8; my $query = &#39;キス我慢選手権&#39;; my $uri = URI-&amp;gt;new(&#39;http://www.dailymotion.com/&#39;); $uri-&amp;gt;path( &#39;/json/relevance/search/&#39; . uri_escape_utf8($query) ); my $content = get($uri); my $result = decode_json($content); use YAML; print Dump $result;  はい。僕はYAMLダンプ派です。
Dailymotionのパーマリンクから動画ファイル（.mp4）をダウンロードする お次にいよいよ、指定された映像のパーマリンクを元に、動画ファイルをダウンロードする スクリプト。mp4の高画質、普通画質の物が選べる（動画によっては高画質が無い模様）ので高画質を優先的にゲット。まだ動画ファイルをiPadで開いていないけど、多分フォーマット的にいけそう。
 use LWP::Simple qw/get getstore $ua/; use URI::Escape; use JSON; $ua-&amp;gt;show_progress(1); my $url = $ARGV[0] or die &#34;URL argument is required!&#34;; die &#34;URL is not dailymotion link&#34; unless $url =~ m!^http://www\.dailymotion\.com/video/.+$!; my ($vid) = $url =~ m!/video/([^\?#]+)!; my $content = get($url); my ($text) = $content =~ m!</description>
    </item>
    
    <item>
      <title>ローカルで開発しているHTMLをLAN内のiPhone/iPadで確認する</title>
      <link>https://yusukebe.com/posts/2012/1228022852/</link>
      <pubDate>Fri, 28 Dec 2012 11:28:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1228022852/</guid>
      <description>タイトルの通り、CSSやJSを含むHTMLを編集していたとします。開発中のローカルのPCでのブラウザを使った確認は、「file://」から始まるURIをアドレスとすればできますね。これは当然です。まどろっこしく例を挙げると、ターミナル上で編集中のHTMLを指定してopenコマンドを叩き、ブラウザを立ち上げると再現できます。
 $ open index.html  ただ、スマホやタブレットを含んだマルチデバイスでの挙動を実機で確認したい時ってあります。すると「file://」から始まるURIによる参照は他の端末では出来ないので、サーバ上にファイルを置く等の施策が必要になります。それをいちいちFTPやSCPを使い、グローバルなサーバ上にアップロードしてWebサーバでサーブして... ってのはめんどくさ過ぎます。最近だとDropboxで共有かけちゃえ！ってのもやり方としてはアリですが、同期のタイムラグが若干気になったり。
ってことで僕はPerlを使うので、便利なモジュールを利用してコマンド一発でその辺り解決してます。
 開発マシンでHTMLを閲覧出来るサーバを簡易的に立てる iPhone/iPad のブラウザにて、開発マシンのLAN内のIPアドレスを考慮したアドレスを入力 閲覧できる、ウマー   
ここで追記！
@punytan の作ってるPADっていうモジュールを使えば3文字のコマンドでイケることが判明！さらにいろいろ便利な機能もある！
 PAD  ドキュメント読めば分かるけど、インストール後、ディレクトリにいって
 $ pad  ってすれば望む挙動をしてくれるし、オプションを選んだり、Markdownプレビュー向けのPluginがあったりする！ punytan++ すぎる！
追記ここまで。
 
で、肝心のサーバを立てるコマンドですが、予め
 $ cpanm Plack L  とPlack、Lというライブラリをインストールしておき、HTMLファイルのあるディレクトリまで移って
 $ plackup -ML -e &#39;Plack::App::File-&amp;gt;new-&amp;gt;to_app&#39;  コマンドを実行。「http://localhost:5000/」または、「http://{LAN内のIPアドレス}:5000/」としてWebサーバが立ち上がります。もし開発中のマシンのLAN内のIPアドレスが「192.168.1.100」で「test.html」というファイルを、同じLAN内のその他デバイスで閲覧したければ
http://192.168.1.100:5000/test.html
 というアドレスでアクセス可能です！ちなみにお分かりの通り「Plack::App::File」というPlackのミドルウェアを超簡単に使ってるだけです。
たった一行のワンライナーコマンドを長ったらしく紹介しましたが、フロントエンドだけ開発中、製作中って時には重宝するのではないでしょうか。OSXの場合、デフォルトでApacheが入っていてそれを使えば可能なことですが、わざわざ使うまでも無いので、PlackのAppモジュールを使った例がベストかと思います。他の言語にも似たようなものがあるとは思うので、Perlerじゃない人は探してみるといいかも！？ Perl分からないけど、これは使ってみたいよー！という方は「cpanm」でググってモジュールをインストールする手はずが整えば、なんとかなると思います。
PS.
songmuさんのLモジュール 使ってみたかったけど、plackup にはもう既に「-L」パラメータがあるので今回は2回もモジュール名を打ち込んでいる... → 「-ML」指定でブッキングしないらしいのでLモジュール使える... っぽい！</description>
    </item>
    
    <item>
      <title>Facebookのポスト内容をWebアプリケーションとして実行する</title>
      <link>https://yusukebe.com/posts/2012/1215021727/</link>
      <pubDate>Sat, 15 Dec 2012 11:17:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1215021727/</guid>
      <description>元★ネタ  Run a tweet like Perl - bulknews.typepad.com  前書き またまた、なんだかよく分からないと思われる記事のタイトルだと思うけど、間違ってはいないと思う。 miyagawaさんがTwitterのツイート内容をPerlスクリプトとして実行するっていう変態的クールなことを やっていたのですよってのは前回の記事のおさらい。
Perlコードを書いたツイートのURLを（ちょっと編集して）-e の引数に渡すとそれが実行出来ちゃう。
 perl -Mtwitter -e http://m.twitter.com/yusukebe/status/279638603611664384  でも、Twitterは140文字まで。どうしてもそれを超えるコードをなんとなくどこかに張ってから実行するという 誰得 なことをしたくなったのでFacebookで似たようなことが出来ないか考えてみた。
やること Facebookの場合、ポストの内容を取得するのにOAuth認証が必要になるので、ならば！いっそのこと Webアプリにしてしまえばいい。Facebookの投稿がそのままWebアプリとして実行されてブラウザで確認が出来る という具合だ。フローはこうなる。
 コードをFacebookに投稿 これから紹介するfacebook.pmをロードしつつポストのURLを引数で指定する サーバが立ち上がるので「http://localhost:5000/」とかにアクセスする OAuth認証ダイアログが開くので許可する コールバックされるとFacebookの投稿が実行されて標準出力部分がページに描画される  facebook.pm とりあえず以下のfacebook.pmを用意する。
 package facebook; use Plack::Request; use Plack::Response; use Plack::Runner; use Plack::App::URLMap; use URI::Escape; use LWP::Simple; use JSON; use HTML::Entities; use Encode; my $id; use overload &#34;/&#34; =&amp;gt; sub { $id = $_[1]; $_[0] }, fallback =&amp;gt; 1; sub import { my $pkg = caller; *{&#34;$pkg\::com&#34;} = *{&#34;$pkg\::posts&#34;} = sub() { bless {}, __PACKAGE__ }; } my $app_id = $ENV{RUNFB_APP_ID}; my $app_secret = $ENV{RUNFB_APP_SECRET}; my $app_redirect = sub { my $req = Plack::Request-&amp;gt;new(shift); my $uri = uri_escape_utf8( $req-&amp;gt;base .</description>
    </item>
    
    <item>
      <title>たった一つのツイートでひたすらアイドル水着画像を集める</title>
      <link>https://yusukebe.com/posts/2012/1214165851/</link>
      <pubDate>Sat, 15 Dec 2012 01:58:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1214165851/</guid>
      <description>元★ネタ  たった10行のコードでひたすらアイドル水着画像をあつめる - UT Startup Gym たった3行のコードでひたすらアイドル水着画像をあつめる（Rubyだよ） - maeharinの日記 たった数行のコードでひたすらアイドル水着画像をあつめるのをGoutteで書いてみた - iakioの日記  やること なんだかよく分からないタイトルだと思うけど、間違っていないと思う！ 目的の仕様としてはNAVERまとめに張られた水着写真のimgタグを持って来て、 imgタグだらけの.htmlをダンプすれば嬉しいよね〜っていうスクリプトを少ない行数で書けるか？ 他の言語ではどう書くのか？みたいなことなんだけど...
Perlでワンライナー書いてたら、Twitterのツイートに収まる文字数、つまり140文字以内になった。 コードをツイートするって言うと、なんか昔miyagawaさんが変態的なことをやっていたなと思い出す。
 Run a tweet like Perl - bulknews.typepad.com  「Run a tweet like Perl」＝「ツイートをPerlのように実行しますぉ」とそのままのことなんだけど、 これはどういうことか！？とりあえず今回の課題を元にやってみる。
ツイートする コードをつぶやく。URLがt.coで圧縮されているけど、これはNAVERまとめのアイドル水着記事ね。
 print for get(&#39;http://t.co/C4CkxAaD&#39;) =~ m!&amp;lt;img.+?class=&#34;MTMItemThumb&#34;.+?/&amp;gt;!g  そしてこのツイートは実行される
twitter.pm を用意する 上記でとりあげたmiyagawaさんのBlog記事にある「twitter.pm」を用意する。 一部、TwitterのAPIのアドレスが変更になっていたり、HTMLエンティティの扱いを施すために手を加える（このdiffちょっと正確じゃないかも）。
 *** twitter.pm.org 2012-12-15 01:50:17.000000000 +0900 --- twitter.pm 2012-12-15 01:50:00.000000000 +0900 *************** *** 4,9 **** --- 4,10 ---- package twitter; use JSON; use LWP::Simple; + use HTML::Entities; my $id; use overload &#34;/&#34; =&amp;gt; sub { $id = $_[1]; $_[0] }, fallback =&amp;gt; 1; *************** *** 15,22 **** END { if ($id) { !</description>
    </item>
    
    <item>
      <title>daemontoolsで起動しているstarmanのログをfluentdで</title>
      <link>https://yusukebe.com/posts/2012/1213003839/</link>
      <pubDate>Thu, 13 Dec 2012 09:38:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1213003839/</guid>
      <description>fluentdが面白そうなんで、散らばっているAppサーバのログを集計してみたい。 アプリケーションは
 基本、Perlで書かれてる Starmanで動かす .psgiで「enable &#34;Plack::Middleware::AccessLog&#34;, format =&amp;gt; &#34;combined&#34;;」してる daemontoolsでデーモン化  という条件で、fluentdに付属のサンプル設定ファイルをほんの少しいじる。 tailして標準出力に出すだけだけど、いい感じです。
 &amp;lt;source&amp;gt; type tail path /service/bokete_web/log/main/current format /^@[0-9a-z]+ (?&amp;lt;host&amp;gt;[^ ]*) [^ ]* (?&amp;lt;user&amp;gt;[^ ]*) \[(?&amp;lt;time&amp;gt;[^\]]*)\] &#34;(?&amp;lt;method&amp;gt;\S+)(?: +(?&amp;lt;path&amp;gt;[^ ]*) +\S*)?&#34; (?&amp;lt;code&amp;gt;[^ ]*) (?&amp;lt;size&amp;gt;[^ ]*)(?: &#34;(?&amp;lt;referer&amp;gt;[^\&#34;]*)&#34; &#34;(?&amp;lt;agent&amp;gt;[^\&#34;]*)&#34;)?$/ time_format %d/%b/%Y:%H:%M:%S %z tag starman.access &amp;lt;/source&amp;gt; &amp;lt;match starman.access&amp;gt; type stdout &amp;lt;/match&amp;gt;  これをmongodbに入れてごにょる！</description>
    </item>
    
    <item>
      <title>宮城大で一日だけ講師（270分）やります！ #myu2012</title>
      <link>https://yusukebe.com/posts/2012/1026050339/</link>
      <pubDate>Fri, 26 Oct 2012 14:03:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1026050339/</guid>
      <description>突然ですが、宮城大学で一日だけ講師をつとめることになりました。 90分の授業3つ分なので、合計270分というロング授業をします。 日時は来月11月24日（土）12時50分から17時40分までです。 「プログラマーの仕事」というお題が振られてるのでそれに答える形の内容になります。
以前から YAPC::Asia などでお会いしていた Sendai.pm （仙台を中心に活動するPerl使い？の集まり） の後藤さんからお声をかけていただいたのが、キッカケです。 実はこの授業、特別講義という形態をとっていて他にも
 11/10 typesterさん 12/08 dankogaiさん  が僕と同じように270分の講義を彼らなりに行う予定です。概要が、 非常によくまとまっているサイトがあるので、そちらをご参照ください。 ちなみに大学院向け授業で、また、外部の人でも申し込みをすれば参加可能です！
 宮城大学大学院 情報デザイン特別講義 2012  担当する時間が果てしなく長く、未体験ゾーンなのでw 構成をどうしようか検討中です。
実のところ、僕はただいま「Webサービスのつくり方」という題名の書籍を出版、発売する作業をしています。 予定通りいけば講義の数日前に完成して書店に並ぶので、書籍の内容をベースとした、 Webサービス制作に当たるトータルな話をしようかなーと思っています。 YAPC::Asia 2012 で発表した内容のより詳細版とも捉えられるかもしれませんね。
また、「いつの間にか社長になっていた」的な起業の話や、 ワークスタイルの話も是非混ぜ込みたいですね。
個人的にはケータイをパクられたことのある仙台の悪い印象を払拭させるためにも、 また、最近の大学生の人達はどのようなものに興味があるのかを知りたいという好奇心のためにも 楽しみにしています。もちろん大学生以外の方も歓迎です。
宮城大の近くの方は是非ご参加していただけると盛り上がっていいのではないでしょうか！</description>
    </item>
    
    <item>
      <title>Yokohama.pm #9 でラーメンの話をして来た！</title>
      <link>https://yusukebe.com/posts/2012/1019160833/</link>
      <pubDate>Sat, 20 Oct 2012 01:08:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/1019160833/</guid>
      <description> 先ほど終了した Yokohama.pm #9 。行って来た＆5分間の発表をしてきました。 今までの Yokohama.pm はあまりにも Yokohama 要素が少ないので、 みんなPerl の話をしている中、僕一人だけ横浜周辺のラーメンのトークをしました。 Perl の話を期待していた方ごめんなさい＞＜ だけど みんなお腹空いちゃう感じでよかったのではないでしょうか！
発表スライドはこちらです。 横浜駅周辺のラーメン屋、オレオレBEST5を主に収録しております。 以上！あ、運営の方々お疲れさまでした。楽しかったです。
   横浜ラーメン紀行  from Yusuke Wada  </description>
    </item>
    
    <item>
      <title>YAPC::Asiaで発表＆ベストトーク賞1位をいただきましたー</title>
      <link>https://yusukebe.com/posts/2012/0930034412/</link>
      <pubDate>Sun, 30 Sep 2012 12:44:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0930034412/</guid>
      <description>世界最大級のPerlの祭典「YAPC::Asia 2012」に参加＆トークして来ました。 そして参加者の投票で決まるベストトーク賞をいただきました！ 60個ほどのトークの中での1位です！ありがとうございます＞＜

どうやらベストトークの賞品が「YAPC::NA または YAPC::Europe へ派遣」ということで、 来年ヨーロッパもしくはアメリカのYAPCに行って発表してきます。 発表する際、エロ禁止って言われたので、 それ以外のネタを探りつつ、エロネタをなんとかごまかして喋れないかなーと策略をこれから 練ろうと思います。楽しみです。
ベストトーク賞は確か前々回のYAPC::Asiaで導入されました。 過去賞をもらった人たちを見て、僕も今年なんとかして取りたかったものです。 そこで割と狙いにいって1位になっちゃったんで、嬉しいという思いと、うまくいったという達成感と、驚きが、 混ざった気分にただいま浸っております。
肝心のトーク内容は以下のスライドを参照してください！
   「新しい」を生み出すためのWebアプリ開発とその周辺  from Yusuke Wada  さて今年のYAPCを振り返るとLTソンというサブイベントの導入やランチ企画等もあってか、 非常に濃いイベントでした。特にLTソンは好評だったようです。 LTソン主催のUzullaさん＆Hachioji.pmの皆さん、ありがとうございます！
941さんと牧さんをはじめとする運営陣の皆様も今までの経験からか、ものすごい安定感がありましたね。 会場が東大に変更されたことを考慮して、とてもスムーズにことが運んだ気がします。 本当にありがとうございます＆お疲れさまでした！
刺激をうけて思うところたくさんありますが、やっぱり来年もYAPC::Asiaがあると嬉しいなーと思いつつ、 YAPCを続けることへ何か貢献出来ることがあればやりたいなーという所存です。
いやー最高に楽しかった！</description>
    </item>
    
    <item>
      <title>YAPC::Asia 2012 で小規模開発とか「ボケて」について話します！</title>
      <link>https://yusukebe.com/posts/2012/0807002158/</link>
      <pubDate>Tue, 07 Aug 2012 09:21:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0807002158/</guid>
      <description> 世界最大級のPerlの祭典「YAPC::Asia 2012」。

YAPC::Asia Tokyo 2012 (Japan Perl Association) / CC BY-NC 2.1  
 
トークも出来てチケット代が無料になる！というモチベーションで発表のサブミットをしていましたが、 昨日、僕のネタが採択されたようです。
「新しい」を生み出すためのWebアプリ開発とその周辺
 わーい。日程的には2日目（9月29日土曜日）のしょっぱな、10時30分から40分間です。 裏番組にkazeburoさんや「らくだ本」の訳者の近藤さんがいるので、色々と負けないようにしたいです。
さて肝心のトークの内容は新たにスタートアップとしてWebアプリケーションを作ろうという方向けの 内容にしたいと思います。技術的な話も当然出てきますが、Webディレクターっぽいポジションの人も 楽しめる内容を目指します。また、2部構成っぽくしようかと思っていて、冒頭に理論や考え方、 次に「ボケて（bokete.jp）」という僕がシステムを担当しているサイトをスケールさせた事例を紹介したいと思います。
箇条書きに内容を列挙するとこんな具合です。
 
スモールスタートのための開発とその周辺  対象は小規模から1000万PV/月くらいのアプリケーション 企画から実装、PRまでスタートアップのWebサービス開発について 設計やFrameworkの選定、環境の話なども Mojolicious+DBIx::Skinny+Mouseでの開発方法 本当に検証したい点だけを考慮してモックを作る スケールする時には... ＞ボケての例   事例 ボケて「デルタ版」そのスケールについて 前提  株式会社オモロキで「鎌団子」さんと二人での開発/運営 少ないサーバリソースでもさばけていた 4年ほど前から続けている 5月13日にいわゆる「スラド効果」発生 だが、一時的なものではなく、アクセスのピークは下がらず  デルタ版  スケールアップ/スケールアウト フレームワークの変更、それに伴うソースコードの書き換え 全面的にキャッシュを利用した高速化 レプリケーション構成の導入 SSLの導入 ソーシャルボタンの設置 対象の写真とボケを一つにまとめた画像生成機能 広告の掲載 非公開APIの作成    
なんかてんこ盛り感ありますが、うまいこと調整します。 トークを見たい人は是非YAPC::Asia 2日目（9月29日）の朝、会場へお越し下さい！
 YAPC::Asia 2012 チケットについて 9月29日のトークスケジュール  </description>
    </item>
    
    <item>
      <title>miyagawanize2</title>
      <link>https://yusukebe.com/posts/2012/0805024551/</link>
      <pubDate>Sun, 05 Aug 2012 11:45:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0805024551/</guid>
      <description>はじめに miyagawa（宮川達彦）さんはスーパーギークの一人です。昨日のLL Decadeでも基調講演なさってました。 誰しもmiyagawaさんのようにコードを書きたいと思っているはずです。 しかし、僕たちは彼のようにはなれません。なぜなら「紫色の何か」が欠けているからです。
紫色の何か 


これは一体なんなんでしょうか？僕には分かりません... けれど、miyagawaさんのようになるには必要なものです。 そこでmiyagawanize2というWebアプリを作ってみました。
miyagawanizeの基本 miyagawanizeでは以下のモジュールを使います。
 use Imager; use Image::ObjectDetect;  ImagerはPerlらしく画像処理をするためのモジュール。 Image::ObjectDetectはOpenCVの物体検出の部分をPerlから利用できるラッパーモジュールです。 これらを駆使して、対象の人が映った画像の絶妙な場所に紫色の何かを貼付けます。
Image::ObjectDetectでは顔の座標を配列で受け取ることが出来るので、そこに対し、Imagerの操作で画像をオーバーレイさせます。
 for my $face (@faces) { my $purple = $purple_source-&amp;gt;scale( xpixels =&amp;gt; $face-&amp;gt;{width} / $aspect, ypixels =&amp;gt; $face-&amp;gt;{height} / $aspect, ); $image-&amp;gt;rubthrough( tx =&amp;gt; $face-&amp;gt;{width} / $aspect / 2 + $face-&amp;gt;{x}, ty =&amp;gt; $face-&amp;gt;{height} / $aspect + $face-&amp;gt;{y}, src =&amp;gt; $purple, ); }  リアルタイムにmiyagawanize 今回はさらにWebカムの動画に対してリアルタイムにmiyagawanizeするチャレンジをしてみます。 html5の「getUserMedia API」やWebSocketを使った実装です。 ちなみに「&amp;lt;video&amp;gt; 要素で Media Source API を有効にする」という設定がなされたChromeなどでしか動きません。

このような手順でアプリは動きます。
 0.5秒置きにgetUserMedia APIでWebカムに映った画像を取得 画像をData URLの文字列に変換 WebSocketでサーバへおくる サーバ側でmiyagawanize 結果の画像をData URLに変換 ブラウザ側に送信 ちくいち描画  実行結果 サーバを起動し、Chromeでアクセスすると以下の通りmiyagawanizeされた自分が映ります！

まとめ miyagawanizeでグレイトなコードが書けるようになるかも！？ この記事はLL DecadeのLTを元に作りました、各種リソースは以下です。</description>
    </item>
    
    <item>
      <title>MojoliciousとCPANモジュールで作る「Nopaste」チュートリアル</title>
      <link>https://yusukebe.com/posts/2012/0627091253/</link>
      <pubDate>Wed, 27 Jun 2012 18:12:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0627091253/</guid>
      <description>僕はWebアプリの開発言語にPerlを使っていますが、Perlで書くためのWeb Application Frameworkとして、 Mojoliciousを最近では利用しています。
Web Application Framework（WAF）とは、 Webアプリケーションの開発を効率的に行うためのライブラリ群（つまりフレームワーク）で、これがなければ少しでも大きめのアプリになると大変な思いをします。以下Mojoliciousについてとりあえずの、参考リンクです。 ちなみに昨日かな？Mojoliciousはバージョン3.0が出ました。
 PerlのWAFはMojolicious推しな件とそのノウハウ - ゆーすけべー日記 Mojolicious - Perl real-time web framework Mojolicious 3.0 released: Perl real-time web framework - Sebastian Riedel about Perl and the Web  
基本的には上記の記事で書いてる通り僕は「WAFはMojolicious推し」なのですが、イマイチ浸透していない感があるので、 ちょっと実用的なチュートリアルを載せてみます。Mojoliciousの他にもCPANモジュールをいくつか使っています。 作るアプリは「Nopaste」アプリと言って、タイトルとコメントを入力するとユニークなURLでページを生成して表示させるという代物です。よく、プログラミングのコードの一部などをコメント欄に入力して、出来たページを他の人に見せるなどという使われ方をされますね。

では、駆け足になるかもしれませんが、行ってみましょうー！
 
インストール＆ひな形を生成する MojoliciousはCPANモジュールなので、cpanmコマンドなどからインストールできます。
 $ cpanm Mojolicious  もしくはシステム全体にインストールするならば、
 $ cpanm --sudo Mojolicious  としてください。正常にインストールされれば、「mojo」コマンドが使えるようになりますので、プロジェクトのひな形を作ります。本当に小さいアプリならば、Mojolicious::LiteというRubyで言うSinatraチックな記述の仕方が出来ますが、今回は通常の「アプリ」としてひな形を生成します。
 $ mojo generate app Nopaste::Web  ここで、ネームスペースをNopaste「::Web」としているのは、個人的な趣向で、Webのライブラリを置く領域とその他DBなどをしっかりと分けたいからです。作られる「nopaste_web」ディレクトリに潜ると以下のファイルがあると思います。これらがWebアプリを作るためのひな形となります。
 ./ ├── lib │ └── Nopaste │ ├── Web │ │ └── Example.pm │ └── Web.pm ├── log ├── public │ └── index.html ├── script │ └── nopaste_web ├── t │ └── basic.</description>
    </item>
    
    <item>
      <title>MojoliciousでRails風のRESTディスパッチ</title>
      <link>https://yusukebe.com/posts/2012/0523205941/</link>
      <pubDate>Thu, 24 May 2012 05:59:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0523205941/</guid>
      <description>GET、POST、PUT、DELETEの4つのメソッドを使い切ってリソースをコントロールしようというRESTfulな概念には賛同だけれども、 ブラウザがGET、POSTのみのサポートだよねぇ〜っていう状況はよくあります。 Ruby on Railsではそこまで深く調べてないけど、POSTメソッドのパラメータ「_method」に「DELETE」か「PUT」という値を入れることでもう二つのメソッドをサポートさせているように見せている？ようだ。
Perlで僕がいつも使っているWAF、MojoliciousではサーバサイドのルータでPUT、DELETEに対応しているので、 Railsで使っている「_method」フィールドを活用すればそれなりにRESTfulでありコントローラの記述も スッキリするんじゃないかと思う。 つまりディスパッチ前にうまいことフックさせて_methodの値でメソッドを書き換える。
よって以下のMojolicious::Liteのコードがうまく動いた。
 #!/usr/bin/env perl use Mojolicious::Lite; app-&amp;gt;hook( before_dispatch =&amp;gt; sub { my $c = shift; if($c-&amp;gt;req-&amp;gt;method eq &#39;POST&#39; &amp;amp;&amp;amp; $c-&amp;gt;req-&amp;gt;param(&#39;_method&#39;)) { my $methods = [qw/GET POST PUT DELETE/]; if ( grep { $_ eq $c-&amp;gt;req-&amp;gt;param(&#39;_method&#39;) } @$methods ) { $c-&amp;gt;req-&amp;gt;method( $c-&amp;gt;req-&amp;gt;param(&#39;_method&#39;) ); } } } ); get &#39;/&#39; =&amp;gt; sub { my $self = shift; $self-&amp;gt;render(&#39;index&#39;); }; del &#39;/&#39; =&amp;gt; sub { my $self = shift; $self-&amp;gt;render_text(&#39;DELETE resource!&#39;); }; app-&amp;gt;start; __DATA__ @@ index.html.ep &amp;lt;form action=&#34;https://yusukebe.com/&#34; method=&#34;post&#34;&amp;gt; &amp;lt;input type=&#34;hidden&#34; name=&#34;_method&#34; value=&#34;DELETE&#34; /&amp;gt; &amp;lt;input type=&#34;submit&#34; value=&#34;DELETE&#34; /&amp;gt; &amp;lt;/form&amp;gt;  ふむ、なかなかよさげです。とあるプロジェクトのコードで試してみるとします。</description>
    </item>
    
    <item>
      <title>PocketIOのイカ娘語echoサンプル</title>
      <link>https://yusukebe.com/posts/2012/0523094100/</link>
      <pubDate>Wed, 23 May 2012 18:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0523094100/</guid>
      <description>SocketIOのサーバ側Perl実装のPocketIO。 Hachioji.pmが中心となって開発しているYairc（仮）でも使われているんで、 気になって触ってます。
実用的に使うにはPlackのMiddlewareとかAppを活用して他のWeb Application Frameworkのアプリと同居させるといいのかなぁーと なんとなく妄想してみる。そこで、Plack::App::URLMapのmountメソッドでPocketIOのHandlerとMojoliciousアプリのパスを分けて、簡単なイカ娘語変換のechoサンプルをつくってみる！といってもMojoliciousアプリの部分ってほとんど無いけど！
app.psgiはこんな感じっす。
 use Mojo::Server::PSGI; use File::Spec; use File::Basename; use lib File::Spec-&amp;gt;catdir(dirname(__FILE__), &#39;lib&#39;); use Plack::Builder; use PocketIO; my $psgi = Mojo::Server::PSGI-&amp;gt;new( app_class =&amp;gt; &#39;App::Web&#39; ); my $app = sub { $psgi-&amp;gt;run(@_) }; builder { mount &#39;/socket.io&#39; =&amp;gt; PocketIO-&amp;gt;new( class =&amp;gt; &#39;App::Handler&#39;, method =&amp;gt; &#39;run&#39; ); mount &#39;/&#39; =&amp;gt; $app; };  lib/App/Web.pmには普通にMojoliciousのルーティング等を書いて...
 package App::Web; use Mojo::Base &#39;Mojolicious&#39;; sub startup { my $self = shift; my $r = $self-&amp;gt;routes; $r-&amp;gt;route(&#39;/&#39;)-&amp;gt;to(&#39;root#index&#39;); } 1;  lib/App/Handler.pmには飛んできたテキストをイカ娘語変換して返すようにして...
 package App::Handler; use Acme::Ikamusume; use strict; use warnings; sub new { my $class = shift; return bless {}, $class; } sub run { my $self = shift; return sub { my $socket = shift; $socket-&amp;gt;on( message =&amp;gt; sub { my $socket = shift; my ($message) = @_; $message = Acme::Ikamusume-&amp;gt;geso($message); $socket-&amp;gt;send($message); } ); }; } 1;  publicディレクトリにjs等を配置する.</description>
    </item>
    
    <item>
      <title>イカ娘でTwitter OAuth認証</title>
      <link>https://yusukebe.com/posts/2012/0327085645/</link>
      <pubDate>Tue, 27 Mar 2012 17:56:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0327085645/</guid>
      <description>Webサービスのログイン方法の一つに「Twitterログイン」が最近多く見られるようになってきました。 サイト上でのユーザー登録無しでTwitterアカウントを引き回すことも工夫によってはできますので、 ユーザーや開発者にとって手間が省けるという利点があるのではないでしょうか。 今回はアニメ「イカ娘」を題材とした簡単なWebアプリを作りつつTwitterのOAuth認証の流れと実装を見ていきましょう。
Twitter OAuth認証の流れ Twitter OAuthでは主にキーと鍵のペアの値がいくつかでてきて混乱しがちなのでイカ、おっと間違えた、以下にまとめておきます。
 「コンシューマトークン、コンシューマシークレット」 アプリケーション固有のキーと鍵。Twitter Developerのページで発行される。アプリケーション開発者以外に知らせてはいけず、通常は設定ファイルなどに記載してアプリケーションで読み込ませる。 「リクエストトークン、リクエストトークンシークレット」 アプリと連携する際にTwitterのサイトでログインをしてもらうが、そのログイン画面へリダイレクトさせるURLが発行されるタイミングと同じくらいで使うトークン。リダイレクトさせる前に取得し、クッキーなどで保持し後ほど自サイトにユーザーが戻ってきた時に照合させる。 「アクセストークン、アクセストークンシークレット」 そのアプリにおけるユーザー固有のキーと鍵。これと上記のコンシューマトークン＆シークレットがあればTwitterにアプリケーションでログインが可能になりタイムラインの取得などができるようになる。実際にはTwitter上の認証画面から返ってきた際に初めて取得できる。  そして上記の言葉を使った、カタカナばかりでちょっと分かりにくい、開発の流れはこのようなものです。
 Twitter Developerのページにてアプリケーションを登録 アプリケーション固有のコンシューマトークンというキーとコンシューマトークンシークレットという鍵をもらう アプリを実装。設定からコンシューマトークン＆シークレットを呼び出せるようにしておく コンシューマトークン＆シークレットを元にリクエストトークンとリクエストトークンシークレットを作り出す リクエストトークン＆シークレットをクッキーで保持しておく Twitterの認証ページにリダイレクトさせる コールバックURLにGETパラメータの引数付きで返ってくるのでそれを元にユーザー固有のアクセストークン、アクセストークンシークレットを取得 アクセストークン＆シークレットをクッキーで保持しておく コンシューマキー＆シークレット、アクセストークン＆シークレットを使ってログイン、タイムラインなどを取得  サンプルアプリの方針 Twitterログインをして自分のタイムラインを見られるような機能をサンプルとして作成したいのですが、 少々それだけだと味気ないです。 Perlのライブラリ置き場CPANを漁っていると「Acme::Ikamusume」なる興味深いモジュールを発見したのでそれを使ったアプリを考えてみます。このAcme::Ikamusume、動かすのにMeCabという形態素解析のソフトが必要なのが多少敷居が高いですが、簡単に使えてかつ面白いです。
 my $text = Acme::Ikamusume-&amp;gt;geso(&#39;変更したいテキスト&#39;);  とするとアニメ「イカ娘」でイカちゃんがしゃべるような言葉に変換されます。自分のTwitterのタイムラインがイカ娘変換されるとどうなるか！？おもしろいんじゃなイカ！？ってことでやってみます。ちなみに作者の富田さんが自身でイカ娘変換を簡単に試せるサービスとAPIを公開していますのでそちらもご参考ください。
 侵略！ イカ娘変換でゲソ！  実装の方針ですが、PerlのMojolicious Liteを使ったものとさせていただきます。上記の流れを最低限の機能で追うので他の言語でも応用できると思います。また、Mojolicious Liteのセッション管理は若干貧弱なためPlack::Sessionを代わりに、Twitter APIの処理にはNet::Twitter::Liteを使います。
アプリケーションの登録とコンシューマキーの取得 まず、Twitter Developer のページでこれから作るアプリケーションの情報を登録します。
いくつかの項目は後から変更が効きますが「Name」の欄は変更がきかなかったり早い物勝ちだったりするので慎重に考えて入力しましょう。アプリケーションを登録したらいつでも「My Applications」からそのアプリを選んで、設定情報を確認することができます。コンシューマキー＆シークレットである「Consumer key」「Consumer secret」という文字列が表示されていると思うので、それを後ほど使います。
アプリケーションの実装、設定からキーを呼び出す いよいよアプリケーションの実装に入っていきます。mojoコマンドを使ってアプリケーションの雛形を作ったら「myapp.conf」などの名前で設定ファイルを作り、そこにコンシューマキー＆シークレットを書き込みます。またアプリケーション内でConfig Pluginを使い、設定を呼び出します。
myapp.conf  { consumer_key =&amp;gt; &#39;xxxxxxxxxxxxxxxxxxxxxx&#39;, consumer_secret =&amp;gt; &#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;, };  myapp.pl  my $config = plugin(&#39;Config&#39;); my $nt = Net::Twitter::Lite-&amp;gt;new( consumer_key =&amp;gt; $config-&amp;gt;{consumer_key}, consumer_secret =&amp;gt; $config-&amp;gt;{consumer_secret}, );  consumer_keyとconsumer_secretをそのまま渡してNet::Twitter::Liteのインスタンスを作ってそれを使い回していきます。
Twitterログイン画面に飛ばす 次に「/login」にアクセスするとTwitterのログイン画面に飛ぶために、URLを取得しリダイレクトさせる実装をします。 その際にリクエストトークン＆シークレットをセッションで保持しておくのを忘れないようにします。
 get &#39;/login&#39; =&amp;gt; sub { my $self = shift; my $session = Plack::Session-&amp;gt;new( $self-&amp;gt;req-&amp;gt;env ); my $url = $nt-&amp;gt;get_authorization_url( callback =&amp;gt; $self-&amp;gt;req-&amp;gt;url-&amp;gt;base .</description>
    </item>
    
    <item>
      <title>全裸で学ぶMVC事始め</title>
      <link>https://yusukebe.com/posts/2012/0305211542/</link>
      <pubDate>Tue, 06 Mar 2012 06:15:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0305211542/</guid>
      <description>一般的なWeb Application Framework（WAF）ではMVCという設計及び実装における概念が取り入れられています。 MVCに従ってつくるのが全てではありませんが、 WAFを使うと共に、一度はMVCを用いたWebアプリの開発経験はしておいた方がよいと思います。 MVCはモデル（Model）、ビュー（View）、コントローラ（Controller）の3つの単語を組み合わせた言葉で、 この3つで概念が成り立っています。 クライアントがWebに対してリクエストをした時に、これら3つがそれぞれ連動して結果を返します。 一般的には以下のような処理経路をたどります。
 クライアントがWebサイトにリクエスト コントローラがリクエストの処理を行い、モデルとビューを動かす 必要に応じてモデルを呼び出す 結果のデータをビューに渡す ビューがHTML化などをしたものをクライアントに表示する  MVCという概念を学ぶにはこうした一連の流れを網羅する小さなサンプルをつくるのが一番取っ付きやすい気がします。 そこで今回は「全裸で学ぶMVC事始め」と題し、 zenrizeというテキスト処理を行うだけのWebサービスをつくってみたいと思います。
zenrize zenrizeという聞き慣れない言葉が出てきましたが、これは単に僕がつくった言葉です。 zenrizeは「全裸bot」というsugyanがつくった 非常にくだらないTwitterボットの内部で行われている処理を指します。 全裸botではテキストの適切な位置に「全裸で」というフレーズを付け加えることにより、 Twitterのつぶやきを丸裸にします。 例えば、
これから歯磨きをするよ
 という文章はおそらく以下のようにzenrize処理されます。
これから全裸で歯磨きをするよ
 全裸botでは作者sugyanによる試行錯誤が行われているのですが、 今回はzenrizeを単純に「文章内の動詞の前に【全裸で】を必ずつける」と定義してみます。
Yahoo! 形態素解析APIを使う 日本語の文章内の品詞を特定するには形態素解析と呼ばれる処理をします。 お手軽に実装するには、Yahoo! APIで提供されている形態素解析APIを利用したいところです。
一からWeb APIにリクエストをし結果をパースするプログラムを書かずに今回は、 CPANモジュールから「WebService::YahooJapan::WebMA」を使ってみたいと思います。
簡単なスクリプトでzenrizeがされるかを試してみましょう。
 use strict; use warnings; use WebService::YahooJapan::WebMA; use utf8; $WebService::YahooJapan::WebMA::APIBase = &#39;http://jlp.yahooapis.jp/MAService/V1/parse&#39;; my $api = WebService::YahooJapan::WebMA-&amp;gt;new( appid =&amp;gt; &#39;yourappid&#39;, ); my $result = $api-&amp;gt;parse( sentence =&amp;gt; &#39;起きたのでご飯を食べます&#39; ) or die $api-&amp;gt;error; my $ma_result = $result-&amp;gt;{ma_result}; my $text = &#39;&#39;; for my $word ( @{ $ma_result-&amp;gt;{word_list} } ) { if ( $word-&amp;gt;{pos} eq &#39;動詞&#39; ) { $text .= &#34;</description>
    </item>
    
    <item>
      <title>言語習得にまつわるエピソード</title>
      <link>https://yusukebe.com/posts/2012/0226223542/</link>
      <pubDate>Mon, 27 Feb 2012 07:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0226223542/</guid>
      <description>完全に見逃していた「Kamakura Perl Mongers テクニカルトーク #2」というイベントでtypesterさんが「typester式Perl勉強法」なる題名でPerlの勉強方法についてトークしたとのこと。
今自分なりにも「Webサービスに必要なプログラミングの言語習得」にまつわる話をまとめようと思っていたので、エピソードを交えて書いてみます。
 
Webサービスを作るためにほぼ必須なプログラミングに対する知識。 プログラミング言語の習得法に興味のある方は多いでしょう。
はじめてのプログラミング 僕がはじめてプログラムを書いたのは、大学の情報処理の授業でいきなりJavaを触らせられた時にさかのぼります。 最終課題がJavaアプレットという仕組みを使ってGUIのゲームなりを作るというものでした。 基本的なデータの扱いや操作は分かるのですが、「オブジェクト指向」なるものがやはり馴染まずで、 何をやっているのかサッパリ。ただ課題では誰かが書いたコードをうまくパクることに成功。 当時得意だった映像制作ソフトを使って作った「アニメーションGIF」を埋め込んで見てくれをかっこ良くしたので、 それなりにハッタリの効くゲームができました。おかげで授業の評価は「A」でした。 ちなみにそのゲームの名前はJavaをもじって「ジャバシックパーク」と言い、恐竜を育てる今で言う育成ゲームです。 名前は気に入ってるのですが、まともにプログラミングで作品を作ったという感覚は得られなかったなぁという印象です。
次に受けたプログラミングの授業は「データ構造とアルゴリズム」というもの。これが面白かった。 Cを学びながら最終的には「シェル」と呼ばれるマシンとの対話ソフトを作っていく。 Javaに比べればCはより単純で、結果がコマンドラインですぐわかるような課題を毎回出してくれたので理解が早い。 Cの理解だけなのでいきなりWebサービスを作るのは難しいかもしれませんが、 言語を書いて結果が実行されるってことの楽しさ、ワクワク感に味を占めることができたと思います。
さて、この2つのプログラミングの授業の経験から得られる教訓はこのようなものです。
GUIアプリより書いていて結果がすぐ分かるCLIで学ぼう。 また、いきなりJavaのようなオブジェクト指向必須な言語はきつい
 CLIからはじめる 僕の経験からも学べることですし、例えば「Webサービスを作りたい！」という人ですと、 ついつい、いきなりブラウザで結果が確認できるプログラムを書こうとしがちです。 個人的にはCLIと呼ばれる「コマンドラインインターフェース」のプログラムを作って実行していくのが 言語を習得する際に一番早い、というか気持ちがいい気がします。
例えばの話をします。 言語入門の際には「Hello World」を表示するだけのプログラムを書くのが定石と言われていますので、 それをPerlで書いてみます。もしブラウザで表示させたい！とCGIなるものを作ってみるとこのようなコードになります。
 #!/usr/bin/perl print &#34;Content-type: text/html \n\n&#34;; print &#34;Hello World&#34;;  ここでいきなり躓きがちなのは「Content-Typeほにゃららってなんぞー」ってことです。 しかも、このプログラムが正確に実行されるのかを確かめるにはCGIが動くサーバを用意しなくてはいけません。 めんどくさいし時間がかかります。さらに、ちなむと最近のPerlを使ったWebプログラミングでは、 このようなCGIはあまり使いません。いきなりWebアプリを作ると、 どうしてもサーバの実行環境依存を考えなくてはいけないので言語習得に向いていないと思うのです。
ではCLIで「Hello World」はどうするか。このようなコードになります。
 print &#34;Hello World\n&#34;;  一行になりました！しかも単純明快です。多分Perlを知らない人でも意味はわかると思います。 「printってのが表示させる命令なんだなぁ」と。ちなみに「\n」は改行を表します。
実行も簡単です。Mac OSXを使っているならば、このプログラムを「hello.pl」などの名前にして保存し、 以下のコマンドをターミナルというアプリから起動します。
 $ perl hello.pl  おそらくこれで「Hello World」という文字が出力され、Perlを触ったことの無い人でしたら「Perl処女」を 脱出したことになります。
CLIプログラムを作るということは言語理解そのものを考えるのに最低限のことを書けばよく、 また、実行までの時間が極力短いため、作っては試すという繰り返しがしやすいです。 上記CGIの例の「Content-Typeほにゃららってなんぞー」という疑問に対して答えられる知識は後ほど必要ですが、 いきなりそこで躓く必要はないのです。
とある高校生の話 誰と言うとかなり問題がありそうなので言いませんが、とある高校生の話をします。 ちなみに残念ながら女子高生ではありません。男子高校生です。
YAPC::Asia 2011 Tokyo というPerlのカンファレンスでの出来事。 一度だけお会いしたことのある高校生の方が発表するということで勇んで発表を見に行きました。 主題はなぜ高校生の自分がPerlを使ってプログラミングをするかということで、そのキッカケについて触れられてました。 過去に何度か本を読んだりしてPerlを学ぼうとしたが挫折したという話のあと、面白いことが起こります。 「再び僕がPerlをはじめるキッカケになったのは...」と切り出すと、 僕のBlog「ゆーすけべー日記」が紹介されているではありませんか！
とあるBlogのこの記事に触発されたからです
 そこで見せられたのは過去に書いた 「いかにして効率よく大量のおっぱい画像をダウンロードするか」という記事でした。 題名からして発表会場内は爆笑。僕も声をあげて笑ってしまいました。
該当するBlog記事では「おっぱい」というキーワードで検索をした結果の画像を一気に何千枚も手元にダウンロードするという CLIのプログラムを掲載していました。以下は実行している様子の当時のスクリーンショットです。
高校生の彼は「あくまで」例として「おっぱい画像」に触れていて、 彼曰く、Webから何かをダウンロードするCLIを作ることが楽しいことを知ってPerlにのめり込んで行ったとのことです。
まぁ高校生に対して「おっぱい画像ダウンロードするのっていいよね」ってあまり公に言えないので言いませんが（笑）、 確かに一般的にはクローラーと呼ばれるWeb上のリソースを取得するCLIプログラミングは非常に楽しいです。</description>
    </item>
    
    <item>
      <title>PerlのWAFはMojolicious推しな件とそのノウハウ</title>
      <link>https://yusukebe.com/posts/2012/0224231052/</link>
      <pubDate>Sat, 25 Feb 2012 08:10:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0224231052/</guid>
      <description>Perlerな皆さん！WAFは何を使っていますかー！？ 昨日行われたという「Perl Beginners #1」のレポートを漁っていると @hsksyuskさんのエントリにこう書かれていましたので僕もつい乗っかってみたくなりました。
 PerlのWAFは何がいいの？  @ytnobodyさんはKossy推し。 僕はAmon2推し。   ぼ、ぼ、ぼ、僕はMojolicious推し！！！
ということでなぜ僕が今、Mojolicious推しなのかを探るためにその「いい点」と思っていること列挙してみました。 それと同時に悪い点も見えてきて、かつバッドノウハウもあるなーって感じなのでまとめてみます。
 
Mojoliciousのいい点 依存モジュールが無くポータブル ご存知の通りMojoliciousは標準で入っているモジュールに依存しているだけで、 残りは自前で実装しています。なので、
 $ cpanm Mojolicious  とすれば外部のモジュールをインストールしなくとも入るので非常にポータブル！ 以前Catalystを使っていて、Catalystが依存しているMooseのバージョンが問題になって、 アプリが動かなくなったりCatalyst自身のアップデートができないことがありましたが、 そういうことは起こらないですね。 最低限のアプリならMojolicious自体だけのバージョンだけを気にしていればよいです （とはいえモデル層で他のモジュールに依存しがちですが！）。
そこそこでかいアプリも書ける MojoliciousというとSinatraライクな「Mojolicious::Lite」が有名で、 一つのファイルでコントローラもビューも書けて簡単だぜ！というのがPRとして売りになってる気がします。 Mojolicious::Liteのアプリを作るための雛形は、
 $ mojo generate lite_app hoge.pl  とかして作ります。さてLiteで作ったアプリがどんどん大きくなっていくとしましょう。 hoge.plと同じ階層に「templates」というディレクトリを作って「index.html.ep」などのテンプレートファイルを置けば、 hoge.pl内のデータセクションに書いていたビューを切り離すことができます。 ただ、コントローラとディスパッチャ等を分割したモジュールで管理したいという時には、 Liteでは対応できません。そこでコマンドを打ち込みます。
 $ mojo generate app Hoge  すると以下の構造で「普通の」Mojoliciousアプリの雛形を作ってくれます。
 ./ ├── lib │ ├── Hoge │ │ └── Example.pm │ └── Hoge.pm ├── log ├── public │ └── index.html ├── script │ └── hoge ├── t │ └── basic.t └── templates ├── example │ └── welcome.html.ep └── layouts └── default.html.ep  「Mojolicious」でググると「Mojolicious::Lite」の話題ばかり出てくるのですが、 僕はこちらの「普通の」Mojoliciousアプリを使うケースが多いですし、そこそこの大きさのアプリにも耐えられます。</description>
    </item>
    
    <item>
      <title>データ表現についてわかった瞬間</title>
      <link>https://yusukebe.com/posts/2012/0223030620/</link>
      <pubDate>Thu, 23 Feb 2012 12:06:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0223030620/</guid>
      <description>データの表現と操作 Webサービス等に必要な言語取得についてです。 プログラミング言語を勉強しようという時にデータの表現方法を把握した瞬間に、 「パッ」とその言語に対する理解が明るくなった気がします。
プログラミングは、抽象的に言えば、目的を果たすために「データ」を「操作する」プログラムを書く行為と呼べるでしょう。 例えば二つの数字を足し算するプログラムを考えてみます。これは「4+3=7」などを機械的に行ってくれるものです。 プログラム内の流れはこのようになるでしょう。
 二つの数字を受け取り、それぞれデータとして保持する 二つのデータを足し算して結果というデータに入れる 結果を出力する  実例を見た方が早いと思います。 この足し算プログラムをエラー処理とかすっ飛ばして分かりやすいPerlのコードにするとこのようになります。
 use strict; #おまじない use warnings; #おまじない my $number1 = $ARGV[0]; #第1引数を変数に入れる my $number2 = $ARGV[1]; #第2引数を変数に入れる my $result = $number1 + $number2; #結果に入れる print &#34;Result: $result\n&#34;;  「sum.pl」などのファイル名で保存して、ターミナルから以下のように実行します。
 $ sum.pl 4 3  「 Result: 7 」という文字列がターミナルに出力されたはずです。 ここで出てきた「 $number1」「 $number2 」「 $result 」というのが、 Perlにおいてスカラーと呼ばれるデータを表す変数になります。 スカラー とはようは数字だったり文字だったりして「4という数字なら4だけだよ」と単一データを表せます。 ここまでの理解はそう難しくないはずです。
配列とハッシュ Perlで言うスカラーを理解したら、次は 配列とハッシュ について把握しようというのが定石です。 配列なら配列のみ、ハッシュならハッシュのみを表現する分にはこれも結構簡単です。
僕の好きな食べ物を適当に列挙するとしましょう。配列を使って以下のように表現できます。
 my @foods = ( &#39;ラーメン&#39;, &#39;寿司&#39;, &#39;カレー&#39;, &#39;スパゲッティ&#39;, &#39;ステーキ&#39; );  @foodsってのには頭から
 ラーメン 寿司 カレー スパゲッティ ステーキ  が入っています。先頭のラーメンを取得したければ「 $foods[0] 」と表現すればよいでしょう。 中に入っている5つの文字列を順番に処理したければこのような「配列の操作」方法があります。
 for my $food (@food) { print &#34;</description>
    </item>
    
    <item>
      <title>無ければつくる</title>
      <link>https://yusukebe.com/posts/2012/0222223527/</link>
      <pubDate>Thu, 23 Feb 2012 07:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0222223527/</guid>
      <description>車輪の再発明 車輪の再発明という言葉があります。ある目的を果たすためのライブラリや先行事例があるにも関わらず、 同じことを叶えるためについつい自分で作ってしまう行為を指します。 例えば、SinatraというRubyの特徴的なWebアプリケーションフレームワークがありますが、 そのPerlバージョンを作ろうとすれば、 他にもDancerやMojolicious::Liteといった似たようなものが、 Perlのライブラリには存在していて「 でも、いいっか！ 」と制作に入るのがまさに「車輪の再発明」な感じです。 車輪の再発明は一般的に非効率だと言われ推奨はされません。 ただ、僕は勉強のためならばよいと思ってSinatraライクなフレームワークを作ってたりもします。 既存の似たようなものを参考にできるため、学ぶことが多いです。 状況によっては再発明は効果的なこともあると思っています。
とはいえやはり、目的を最短で果たすためには車輪の再発明は避けた方がよいでしょう。 Japan Perl Association （JPA）現代表理事の牧大輔さんと お仕事をしたことがあるのですが、その際に彼は以下のように話していました。
車輪の再発明はしてもいいけど、仕事の時は絶対駄目だよ
 この端的な方針は僕も参考にしたいところです。
車輪が無いときは？ しかし、自分がこれをしたいという目的を果たすものが世の中に存在しない時も多々あります。 特に自分一人や数名で使う特殊なケースで最適なものが無いということがよく見受けられるます。 そのような時、あなたがクリエータ、もしくはクリエータを目指すのであれば、「無ければつくる」方針でいきましょう。
書籍執筆のための環境を作る 実は、この記事。将来出版させたい書籍のための原稿の意味も兼ねて書かれています。 編集者さんと連絡しつつ作業をしているのですが、 原稿を書き始めてちらほらと集まってきているのでそのドキュメントを共有したいと先日から思ってました。 文章は記事ごとに小分けにしてMarkdown書式のプレーンテキストで執筆しています。 ならばとDropboxの共有フォルダを作成し、 その中にMarkdownファイルを入れれば編集者の方も見ることができるだろうと考えてみました。 すると当然のことながらMarkdownのテキスト一覧を閲覧し、ファイルもエディタなどで開けるとのことなのですが、 以下のような質問をいただきました。
ちなみにmarkdown形式のファイルは、普通にエディタで 見ればよいのだと思いますが、適したツールなどは あるのでしょうか？？
 うーん、僕が以前から自作しているMarkdown Viewerはありますが、 いかんせんPerl製のコマンドラインのソフトなんで勧めてみたものの、少しハードルが高いかなぁと感じました。 そこであらためて、僕と編集者の方、2人にとってのニーズを整理してみましょう。
 僕が主にファイルを編集をする 編集者さんがそのMarkdownをHTMLとして確認したい ファイルはDropboxで逐一共有されている  このニーズを簡潔に叶えるアイデアを考えてみるとこのようなものになりました。
Dropbox上のファイルを一覧できて、 指定ファイルがMarkdown形式ならばHTMLにレンダリングしてかっこよく表示させる内向けのWebサービス
 そして、このようなサービスは軽くGoogleで検索調査したところ無い、 もしくは一般には利用できないということがわかります。
書籍執筆のための 環境も無ければつくる 。この方針にのっとります。 DropboxのDeveloper向けサイトを見てAPIの仕様について調べます。 どうやら作ったものを一般に公開するにはDropbox側の審査が必要になるようですが、 開発者モードでは5名までのユーザーに使ってもらうことができそうです。 「REST APIを使って、OAuth 1.0 で認証する」というだいたいの仕様が把握できたところで、 Perlのライブラリ倉庫である「CPAN」を覗いてみました。 「Dropbox」で検索をすると、いくつかライブラリが出てきまして「さすがCPAN！」と思いましたが、 今回は「WebService::Dropbox」というモジュールが分かりやすかったので、こちらを使用したいと思います。「無いものをつくるために車輪を利用している」わけですね。 ところでこのモジュール、非常に便利です。
実装方針が決まったところで、Dropbox APIを使ってどのようなことができるのか？どのようなデータを取得できるのか？ を知るためにサンプルプログラムを作成。 だいたい分かってきたのでいよいよサービスの名前を「Dropdown」として、Webアプリを作ります。 Markdown形式のテキストをHTMLへ変換するにはこれもまたCPANモジュールの「Text::Markdown」を使いました。 Dropboxのファイルもしくはディレクトリの名前を受け取とり、ファイルだったらそのデータをダウンロード。 Markdown形式にマッチすればHTMLに変換して綺麗に表示させる部分がこのアプリの肝です。 そのControllerのコード部分はちょっと長いですが以下のようになりました。
 package Dropdown::Dropbox; # Web Application FrameworkにはMojoliciousを使用した use Mojo::Base &#39;Mojolicious::Controller&#39;; use Text::Markdown qw/markdown/; use Encode; use Plack::Session; sub dropbox { my $self = shift; # $nameにはDropboxファイルへのパスが入る my $name = $self-&amp;gt;stash-&amp;gt;{name}; my $dropbox = $self-&amp;gt;app-&amp;gt;dropbox; # sessionにはPlack::Sessionを使用 my $session = Plack::Session-&amp;gt;new( $self-&amp;gt;req-&amp;gt;env ); my $access_token = $session-&amp;gt;get(&#39;access_token&#39;); my $access_secret = $session-&amp;gt;get(&#39;access_secret&#39;); return $self-&amp;gt;render_not_found if ( !</description>
    </item>
    
    <item>
      <title>Yomico。Markdownを快適に閲覧するために</title>
      <link>https://yusukebe.com/posts/2012/0222094049/</link>
      <pubDate>Wed, 22 Feb 2012 18:40:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0222094049/</guid>
      <description>構造化された文章をプレーンテキストで書くためにMarkdown形式を使っているというお話を以前しました。
 Markdownで文章を書こう！ - ゆーすけべー日記  上記の記事でも触れているのですが、Yomico（よみこ）というPerl製のMarkdownビューアーを作りつつ使っていて、 結構いい感じなので紹介いたします。 お気づきの方もいるかも知れませんが、YomicoというネーミングはTV、OVAアニメや小説などで展開している 「R.O.D -READ OR DIE-」の登場人物である「読子・リードマン」に由来しています。 この読子。神保町に本を置くだけのためのビルをまるごと借りるなど生粋の読書好き＝ビブリオマニアなのです。 理想として、このYomicoを使って読子にMarkdownのテキストを快適にガンガン読んでもらいたいなー なんて思って名付けました。
 R.O.D-READ OR DIE- 第1巻 [DVD]posted with amazlet at 12.02.22  SME・ビジュアルワークス (2001-05-23)
売り上げランキング: 37562
 Amazon.co.jp で詳細を見る    
メルマガやこのBlogの記事も含めてMarkdownの文章を書く機会が 急に多くなったんですが、そのMarkdown書式のテキストファイルをHTMLに変換しつつブラウザでサクッと 見たいなっていうのが、Yomicoを作っている動機です。 Mac OSXだとMarkdownNoteというソフトがあって、 それを使えば編集とプレビューの2ペインを同時に見ることができて同じような目的を果たすことができるのですが、 なんとなく「編集はBywordっていう他のソフトを使いたいなぁ」とか、 「編集とプレビューは同時に見えない方が逆にいいんじゃね？」とか思って自作した次第です。
開発はgithubで公開しつつ行っています。
 yusukebe/Yomico - GitHub  久しぶりに人に見せられて、頻繁にアップデートしたいと思うソフトです。まぁとはいえPerlのコード部分は200行弱の 短いものなんですけどねぇ。
Yomicoをインストールすると以下のことができます。
 「yomico」コマンドを使うことができる ターミナルからMarkdownファイルを指定してyomicoコマンドを実行するとブラウザで整形したMarkdownが見られる ファイル単体だけでなくてフォルダも指定可能 起動ポートはデフォルトで5000だけど変更できる CSS Frameworkに「inuitcss」を使っており文字が読みやすい Faviconもちゃんと設定したぉ  以下がこの記事自体を書きながらプレビューしている様子のスクリーンショットです。
インストールは「cpanm」というコマンドを入れて、ターミナルからこんな感じで行います。
 $ git clone git://github.com/yusukebe/Yomico.git $ cd Yomico $ cpanm .  うまく入れば、「yomico」コマンドを使うことができるので、 ファイルを指定したりディレクトリを指定したりして実行してください。
 $ cd notes $ yomico README.mkdn  とか、カレント指定しつつポートも任意のものにする場合は
 $ cd notes $ yomico . -p 5001  という具合です。デフォルトの場合は「http://localhost:5000」にお使いのブラウザでアクセスすると整形したMarkdownもしくはファイル一覧を見ることができます。</description>
    </item>
    
    <item>
      <title>Perlから非公式Google Reader APIにアクセスする</title>
      <link>https://yusukebe.com/posts/2012/0214083335/</link>
      <pubDate>Tue, 14 Feb 2012 17:33:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0214083335/</guid>
      <description>昔からGoogle Readerの非公式APIを使ってみたかったので、 こちらを参考にPerlでアクセスしてみてる。
既読のアイテムのタイトルを表示するだけのスクリプトなら以下のコードになりました。 上記のサイトだとCookieにSIDを設定しろって書いてあるけれど、 「Authorization」ヘッダーに適切な値を入れてアクセスしたらデータが取れた。
 use strict; use warnings; use LWP::UserAgent; use XML::Feed; my $email = &#39;my@emailaddress&#39;; my $password = &#39;mypassword&#39;; my $ua = LWP::UserAgent-&amp;gt;new; my $res = $ua-&amp;gt;post( &#39;https://www.google.com/accounts/ClientLogin&#39;, { service =&amp;gt; &#39;reader&#39;, Email =&amp;gt; $email, Passwd =&amp;gt; $password, source =&amp;gt; &#39;reader_from_perl&#39;, continue =&amp;gt; &#39;http://www.google.com/&#39;, } ); die $res-&amp;gt;status_line if $res-&amp;gt;is_error; my $content = $res-&amp;gt;content; my ($auth) = $content =~ /Auth=(.+?)\n/; $ua-&amp;gt;default_header( &#39;Authorization&#39; =&amp;gt; &#34;GoogleLogin auth=$auth&#34; ); $res = $ua-&amp;gt;get(&#39;http://www.google.com/reader/atom/user/-/state/com.google/read&#39;); die $res-&amp;gt;status_line if $res-&amp;gt;is_error; $content = $res-&amp;gt;content; my $feed = XML::Feed-&amp;gt;parse( \$content ) or die XML::Feed-&amp;gt;errstr; for my $entry ( $feed-&amp;gt;entries ) { print $entry-&amp;gt;title . &#34;</description>
    </item>
    
    <item>
      <title>ノンコードなファイルをモジュールと一緒にインストールしたければshareディレクトリを使う</title>
      <link>https://yusukebe.com/posts/2012/0206130152/</link>
      <pubDate>Mon, 06 Feb 2012 22:01:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0206130152/</guid>
      <description>Perlモジュールの話。当然のことかもしれないけど、知らなかったのでメモメモ。
配布したい小さなWebアプリがあって、出力のためのテンプレートファイルとかCSSとかどうやってモジュールに梱包したらよいだろうと思っていたんだけど、たぶんshareディレクトリを使うのがよさげ。Module::Installの場合はModule::Install::Shareにやり方とかが書いてある。通常はshareディレクトリにファイルを用意してMakefile.PLに以下でOK。
 install_share &#39;share&#39;;  もしくはshareの部分を省略できる。
 install_share;  ちゃんとModule::Install::Shareのpodには、リードオンリーなコードとは関係ないファイルを同封したい時があるよね！例えば、XMLスキーマだったり、YAMLデータファイルだったり。だったらこれだよ！と書いてある。
ちなみに
 /Library/Perl/5.12/auto/share/dist/Module-Name/  みたいなディレクトリに入る。ファイルを呼び出す時は、File::ShareDirモジュールを使えばよい。俺の場合はこんな感じでできた。
 use File::ShareDir qw/dist_file/; my $file = dist_file(&#39;Module::Name&#39;, &#39;filename.txt&#39; );  そういえば、shareってディレクトリ、CPAN漁ってたら結構あったな＞＜ とりあえず、やり方がわかってスッキリ！！</description>
    </item>
    
    <item>
      <title>シンプルなWebアプリを今、自分なりに書いてみる</title>
      <link>https://yusukebe.com/posts/2012/0131065441/</link>
      <pubDate>Tue, 31 Jan 2012 15:54:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0131065441/</guid>
      <description>Webアプリでユーザーからの入力がある部分を作る際、ユーザーフレンドリーでかつ実装も簡単な方法を模索するのにkazeburoさんのブログ記事をよく参考にしていました。
CGIとは〜〜だというのはたくさん答えがあるだろうけど、自分的には「ユーザからの入力をチェックして画面にだす」ものだというのがしっくりくる。当たり前のことを書いているようだがMVCモデルでいうコントローラーの作成がCGIだと。 シンプルなWebアプリなCGIを書いてみる : blog.nomadscafe.jp
 kazeburoさんはほんとにCGIで実装してたけど、フレームワークを使ったり、ライブラリを使ったりしたら、つまり、今風に、実用的に書いてみるとどうなるのかやってみています。kazeburoさんのとちょっとだけ仕様が違うがなんとなくこんなかなーという具合。あ、もちろん僕のことなんでPerlを使ってます。が、コードは非常に簡単です。
ちなみにサンプルの仕様はこんな具合。
 ユーザーからの入力フォームを表示、郵便番号7桁（ハイフンは入らない）を入れてもらう 郵便番号が7桁の数字かどうか、空ではないかをチェック エラーならばエラーを表示、フォームには先ほど入力した値が残っている状態 妥当なら入力された値を表示、特に保存などはしない  さての今回の実装の特徴は以下です。
 Mojoliciousというフレームワークを使っている。今回はとりわけMojolicious::Liteというsinatra風の書き方をしています 妥当性チェックにFormValidator::Liteを使っている（kazeburoさんはあえてライブラリを使ってないと思われます）。以下のソースコードではエラーメッセージをコード内に記述しているけど、外だしもできます HTML::FillInForm::Liteを使っている（HTML::FillInFormより速いらしい！）。このFillInFormの機能により、エラーが起こった時にフォームに値が残ったりってのが簡単にできる  なんか、Mojolicious::LiteとかFormValidator::LiteとかHTML::FillInForm::Liteとか最近はLiteが流行りですね！
で、いよいよコードです。
zip.pl  #!/usr/bin/env perl use Mojolicious::Lite; use HTML::FillInForm::Lite; use FormValidator::Lite; use utf8; get &#39;/&#39; =&amp;gt; sub { my $self = shift; $self-&amp;gt;stash-&amp;gt;{error_messages} = undef; $self-&amp;gt;render(&#39;index&#39;); }; post &#39;/&#39; =&amp;gt; sub { my $self = shift; my $validator = FormValidator::Lite-&amp;gt;new( $self-&amp;gt;req ); $validator-&amp;gt;set_message( &#39;zip.not_null&#39; =&amp;gt; &#39;郵便番号が空です&#39;, &#39;zip.length&#39; =&amp;gt; &#39;郵便番号が正しくありません&#39;, &#39;zip.uint&#39; =&amp;gt; &#39;郵便番号が正しくありません&#39;, ); my $res = $validator-&amp;gt;check( zip =&amp;gt; [ &#39;NOT_NULL&#39;, &#39;UINT&#39;, [qw/LENGTH 7/] ], ); my @error_messages; if($validator-&amp;gt;has_error) { for my $message ( $validator-&amp;gt;get_error_messages ) { push @error_messages, $message; } $self-&amp;gt;stash-&amp;gt;{error_messages} = \@error_messages; my $html = $self-&amp;gt;render_partial(&#39;index&#39;)-&amp;gt;to_string; $self-&amp;gt;render_text( HTML::FillInForm::Lite-&amp;gt;fill(\$html, $self-&amp;gt;req-&amp;gt;params), format =&amp;gt; &#39;html&#39; ); }else{ $self-&amp;gt;stash-&amp;gt;{zip} = $self-&amp;gt;req-&amp;gt;param(&#39;zip&#39;); $self-&amp;gt;render(&#39;thankyou&#39;); } }; app-&amp;gt;start; __DATA__ @@ index.</description>
    </item>
    
    <item>
      <title>jVideosのWebアプリケーション部分技術解説</title>
      <link>https://yusukebe.com/posts/2012/0115005835/</link>
      <pubDate>Sun, 15 Jan 2012 09:58:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2012/0115005835/</guid>
      <description>先日公開した「jVideos」という（エロ）サイト。
 XVIDEOSをiPhoneで快適に見られる「jVideos」を作ってみた - ゆーすけべー日記  jVideos - iPhoneで日本人好みのXVIDEOS （18禁）  Webアプリとしての技術的な観点で言えば、クローラーが収集したデータをただデータベースから取ってきて表示するだけの簡単なものになっている。基本的なところではJavaScriptも使ってない。そこで、「単純な上、構造がわかりやすい」いい題材と思ってこのjVideosを用いてWebアプリケーションの基本的な技術を解説したい。
1. Perlを使っています まず、Webアプリケーションを含むバックエンドでは全てPerlを使っている。まぁ何故Perlかと今更聞かれると一番手になじむ言語だったということなんだけど、クローラーやWebのための要素は全てPerlで揃っているので問題はない。というかむしろテキスト処理が得意なPerlはテキストをベースとしたWebを扱うのに優れていると思っている。
実はアプリケーションサーバもPerl製のStarmanという物を使っている。次に出てくるWebアプリケーションフレームワーク（WAF）で構築されたアプリをStarmanで動かしフロントエンドにはnginxを置いている。なんかこういうイメージ。
 クライアントブラウザ =&amp;gt; nginx =&amp;gt; Starman  2. WAFにはMojolicious Webアプリケーションフレームワーク（WAF）という言葉はよく聞くと思うが、これはWebアプリを作るためのひな形とそのクラス、スクリプト群である。安全で効率的に開発を進めたければ既存のよくメンテナンスされたWAFを使うのがよろしい。最近では、MojoliciousというWAFをよく利用させてもらっている。依存性が極端に少なく、いわゆるフルスタックな作りなんだが、基本機能に焦点を当てれば使えるので気に入っている。Mojoliciousを入れたら、mojoコマンドが使えるので、
 $ mojo generate app JVideos::Web  等としてアプリケーションのひな形を作る。「プロジェクト名::Web」と::Webを付けているのはディレクトリ構造を綺麗にしたいためである。
3. PSGIファイル Mojoliciousにも起動スクリプトが付いていて簡易サーバが立ち上がるんだけど、plackup使いたいのと、PSGIで制御したいのと、結局PSGIファイルを作るのでまずjvideos_web.psgiみたいなファイルを作っちゃっている。リバースプロキシに対応させるなら以下のようなもので、Middlewareなど足したいものがあればお好きにどうぞ。
 use Mojo::Server::PSGI; use File::Spec; use File::Basename; use lib File::Spec-&amp;gt;catdir(dirname(__FILE__), &#39;lib&#39;); use Plack::Builder; my $psgi = Mojo::Server::PSGI-&amp;gt;new( app_class =&amp;gt; &#39;JVideos::Web&#39; ); my $app = sub { $psgi-&amp;gt;run(@_) }; builder { enable_if { $_[0]-&amp;gt;{REMOTE_ADDR} eq &#39;127.0.0.1&#39; } &#34;Plack::Middleware::ReverseProxy&#34;; $app; };  これで普通に「plackup jvideos_web.psgi」すれば動くだが、確かStarmanの場合だと、
 $ starman -MFindBin jvideos_web.psgi  としなくてはいけないので注意。
4. APIモジュールを使う Mojoliciousは一般的なMVCになっているのだけれども、Mの部分の指針がない（と思う）ので独自で試行錯誤しながらやっている。なんとなく「API」と呼ばれる層を作ってデータを統合的に扱わせている。例えば「JVideos::API」や「JVideos::Web::API」のようなモジュール（クラス）を経由させてコントローラから操作するわけだ。このAPIはフレームワークに依存しないためにテストできる点やコマンドラインインターフェースから扱うことが容易だ。
例えば、複数の記事を取得するためのAPIのメソッドは以下のようになる。
 sub get_entries { my ( $self, $cond , $attr ) = @_; $attr-&amp;gt;{pager_logic} ||= &#39;MySQLFoundRows&#39;; $attr-&amp;gt;{page} ||= 1; $attr-&amp;gt;{limit} ||= 5; my ( $iter, $pager ) = $self-&amp;gt;db-&amp;gt;search_with_pager(&#39;entry&#39;, $cond, $attr); my @entries; while ( my $entry = $iter-&amp;gt;next ) { push @entries, $entry; } if( wantarray ) { return (\@entries, $pager); }else{ \@entries; } }  これを使い、最新記事とページャを取得するコントローラ部分はこのようになった。</description>
    </item>
    
    <item>
      <title>YAPC::Asia 2011ととある高校生との出会い</title>
      <link>https://yusukebe.com/posts/2011/1018235352/</link>
      <pubDate>Wed, 19 Oct 2011 08:53:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2011/1018235352/</guid>
      <description>今年もPerlの祭典「YAPC::Asia 2011」に行ってきました＆発表してきました。来場者数やスタッフ、トークの数などで過去最大と言ってもいいYAPCとなったようです。たしかに女性スタッフや参加者の数は例年より多かったですね！

YAPCの最大の楽しみは、たくさんのセッションからプロフェッショナルなトークが聴けるということよりも個人的にはそうしたネタをつまみにしつつ、たくさんのPerl Monger達と出会えることになると思っています。まぁ「Perl 出会い系」です。そこで、印象に残ったケースを紹介。
今年の2月に北海道のPerlコミュニティ「Hokkaido.pm」が主催する「Hokkaido.pm #4」にゲストとして参加させていただいた際に一人の高校生の方と出会いました。akiym君です。「Perlを志す高校生にちょっくらライブコーディングでも見せてやるかいっ」と懇親会の会場でMacbook開いて簡単なコードを見せたら、「あら、意外にもわかってる様子。。。ってかコイツできるな！！」という印象。別れ際に「なんで、Perlやってるの？」って尋ねてみると、意味深な笑顔。「コイツ、なにかあるな！！」とすっごく気になる感じのakiym君だったのです。
そんな彼がHokkaido.pmの支援を受け、Perl Mongerが集うYAPC::Asiaに今年初参加！さらには20分間のトークをするじゃーないですか！しかも題名は「なぜ、高校生がPerlを使うのか？」という俺が彼に質問した答えがそこにありそう！と、一番楽しみにして見に行きました。
Perlを触る前に小学生の時にHTMLを書き、ホームページを開設してたけど先生に怒られて... というような話から始まり、掲示板を作りたいからKE○TなCGIを参考にPerlを始めるも、通称「らくだ本」と言われるプログラミングPerlが分厚すぎて挫折したとか興味深い話が進んでいきます。そしていよいよ、彼が「こういうことにPerlを使えば楽しいのか！」と思うキッカケを知ることができます。と思ったら、なんか某ゆーすけべー日記という文字がwww 曰く「ゆーすけべー日記というブログのXXXという記事を見させてもらい」www
えーといろいろな事情で、どの記事を見たかを明記するのはいたしませんが、どうやら俺が現在16歳の彼に夢を与えたらしいwww 発表が終わり、質疑応答では彼が挫折したプログラミングPerlの訳者の近藤嘉雪さん本人が手を挙げて質問したり面白かったなー。
ということで、akiym君にもいっかい会えたのも嬉しかったし、同じようなケースで「ゆーすけべーさんの影響でYAPC来ちゃいました（うふっ」みたいな人が結構いたので、ブログを書くとかイベント開催するとか発表するとか、そもそもPerl書きまくるとか重要だなーって思いました。
ちなみに、俺の発表の「画像Hacks」の資料はSlideShareにアップしてあるので、以下に貼り付けて置きます。
画像Hacks  View more presentations from Yusuke Wada   以上、今年も楽しかったYAPC::Asiaでしたー。</description>
    </item>
    
    <item>
      <title>Windowsで作って日本語が含まれるZIPファイルをPerlで文字化けせず解凍する</title>
      <link>https://yusukebe.com/posts/2011/1008053718/</link>
      <pubDate>Sat, 08 Oct 2011 14:37:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2011/1008053718/</guid>
      <description> Archive::Zip使った。なんかEncodeの辺りが無理矢理な気がするが、こんな感じかしら。
 use Archive::Zip; use File::Spec; use Encode; my $file = $ARGV[0]; my $zip = Archive::Zip-&amp;gt;new(); die &#39;read error&#39; unless $zip-&amp;gt;read($file) == &amp;amp;Archive::Zip::AZ_OK; for my $member ( $zip-&amp;gt;members ) { my $to = File::Spec-&amp;gt;catfile(decode(&#39;shift_jis&#39;,$member-&amp;gt;fileName())); $zip-&amp;gt;extractMember( $member, $to ); }   </description>
    </item>
    
    <item>
      <title>gitweb.cgiをPlackで起動する</title>
      <link>https://yusukebe.com/posts/2011/0926214531/</link>
      <pubDate>Tue, 27 Sep 2011 06:45:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2011/0926214531/</guid>
      <description>というか、miyagawaさんのgistでいいんだけど...
俺の場合は
 &#39;/&#39;というパスでアクセスしてトップが表示される Plack::Middleware::Staticを使った  ってことで以下のような.psgiになった。
 use Plack::App::WrapCGI; use Plack::Builder; my $app = Plack::App::WrapCGI-&amp;gt;new( script =&amp;gt; &#39;/home/git/gitweb/gitweb.cgi&#39; ) -&amp;gt;to_app; builder { enable &#34;Plack::Middleware::Static&#34;, path =&amp;gt; qr{^/static/}, root =&amp;gt; &#39;/home/git/gitweb/&#39;; $app; };  これでplackupすればOK。もちろんstarmanなどのpsgi互換のサーバソフトでも起動できるので、応用でnginx等のフロントサーバを使えたりする。いやー便利！</description>
    </item>
    
    <item>
      <title>2月に北海道に行って「Hokkaido.pm #4」でトークしてきます</title>
      <link>https://yusukebe.com/posts/2011/0124025204/</link>
      <pubDate>Mon, 24 Jan 2011 11:52:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2011/0124025204/</guid>
      <description>  ありがたいことに JPA(Japan Perl Association) さんから援助してもらって、 北海道に行って「Hokkaido.pm #4」というイベントに参加させていただくことになりました。 2月19日(土)に札幌で行われるPerlの勉強会イベントです。募集は以下で行っています。  Hokkaido.pm#4 : ATND   今回せっかくお呼ばれして話す機会をもらえたので、 気合いを入れて発表したいと思います。 未成年の参加者の方もいる可能性があるということで、 その辺りは気をつかいつつ題名は 「エロサイト管理者の憂鬱3 - エロくない7つの開発することについて - 」 といたします。質疑応答を含めて40分のトークです。   概要は仮で以下のようなものです。   今回は、2009年YAPC::Asia 前夜祭で発表し、 WEB+DB Press vol.54 の第一特集記事「Webサービス即日開発」のネタ元になったという 「エロサイト管理者の憂鬱2」の続編をお送りいたします。 2009年の頃からわずかばかりの時間の経過ですが、 その間にWebアプリケーションを取り巻く状況は変化してきました。 PerlにおいてはPlackの開発が進行し普及しつつあり、 ユーザーからの視点で見るとiPhoneなどのスマートフォンがメジャーになり閲覧環境が変わってきてもいます。 また、運用環境のVPSなども出そろってきました。 エロサイト管理者の憂鬱「3」では、諸々の事項をこうしたアップデートに合わせつつ、 僕が個人で行っている開発の「全て」の「今」を解き明かし、 少しでも皆さんのWebアプリケーション開発のきっかけになればいいと思っています。  「個人がPerlで作るWebサービス」について以下の7つの項目を話します。  モチベーションは何か 企画をする &#34;sandbox&#34;ディレクトリで遊ぶ WAFとO/R Mapperをどうするか アプリを作る デプロイする 運用をしていく    かなりアプリよりの話で、かつ個人や小規模の方の開発向けの発表内容です。 また、Perlに限らずWebアプリケーションを作りたいという全ての方向けって感じにもしたいです。  都心やその周辺県でこそ.pm、つまりPerl開発者の集まりは充実していますが、 地方はもっと盛り上がってもいいし、そこからスターが飛びでてもいいかなーとも勝手に思っています。 仰々しいですが、その足がかりになれば嬉しいなんて勝手に想像しています。  ということで、北海道にいる方、もしくは北海道に行きたい方は、 是非ご参加ください!  Hokkaido.pm#4 : ATND  Hokkaido Perl Mongers Hokkaido.pm 公式ページの告知  </description>
    </item>
    
    <item>
      <title>Kamakura.pm テクニカルトーク#01 で「Blog Hacks 2011」を話します</title>
      <link>https://yusukebe.com/posts/2011/0124012958/</link>
      <pubDate>Mon, 24 Jan 2011 10:29:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2011/0124012958/</guid>
      <description>  発足したばかりの鎌倉周辺のPerl Mongersの集まりKamakura.pmの「まともな」テクニカルトークイベントが、 今週末28日(金)に開催されます。 そこで、鎌倉市民であり鎌倉で活動する僕も参加し、 「Blog Hacks 2011」という題名で20分ほどトークしたいと思います。   概要は以下。   2004年発売のオライリー「Blog Hacks」はBlogを書くこと、 Blogツールやそれを活用した技術ハックの楽しさを表現してくれました。 時代は巡る巡って2011年。 Twitter、Facebookなどのソーシャルメディアが出現し、 Blogの周りの状況は変わってきましたが、その楽しさは相変わらずだと僕は感じています。 ただ、2004年の「Blog Hacks」では通じない2011年なりの「Hack」の仕方があります。 そこで、今回はPerlのことにも触れつつその周辺の技術を利用したBlogの楽しみ方を、 「Blog Hacks 2011」と題しKamakura.pm テクニカルトーク#01で話したいと思います。 Facebookとの連動、CSS Frameworkについてのライトな事柄や、 Perlを使ったMovableTypeのHackなどコアな話など20分で解説していきます。   主催者のtypesterさんに聞くと、そこまでPerlにこだわらなくても周辺技術でもいいよーってことなので、 このテーマにしました。すでに募集定員の20人が埋まってしまっているので、 なんとも言えないのですが、 もしかしてキャンセルがでるかもしれないので「補欠」登録してみて参加できるかもしれないので、興味のある人は是非。  Kamakura Perl Mongers テクニカルトーク#1 : ATND  Kamakura Perl Mongers (Kamakura.pm 公式ページ)  </description>
    </item>
    
    <item>
      <title>Amazon S3にExpiresヘッダ付きでファイルをアップロードする</title>
      <link>https://yusukebe.com/posts/2011/0108054612/</link>
      <pubDate>Sat, 08 Jan 2011 14:46:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2011/0108054612/</guid>
      <description>  Amazon::S3を使ってみた。 Expiresヘッダとして現在の時刻から10年後を指定しています。 #!/usr/bin/perl use strict; use warnings; use Amazon::S3; use HTTP::Date qw(time2str); use YAML; my $aws_access_key_id = &#34;&#34;; my $aws_secret_access_key = &#34;&#34;; my $s3 = Amazon::S3-&amp;gt;new( { aws_access_key_id =&amp;gt; $aws_access_key_id, aws_secret_access_key =&amp;gt; $aws_secret_access_key, retry =&amp;gt; 1 } ); my $bucket = $s3-&amp;gt;bucket(&#39;your_bucket_name&#39;); my $key = &#39;test/image_from_perl.jpg&#39;; my $filename = &#39;./test_image.jpg&#39;; $bucket-&amp;gt;add_key_filename( $key, $filename, { content_type =&amp;gt; &#39;image/jpeg&#39;, expires =&amp;gt; time2str( time + ( 365 * 24 * 60 * 60 ) * 10 ), acl_short =&amp;gt; &#39;public-read&#39;, } ); # print key&#39;s configure my $conf = $bucket-&amp;gt;head_key($key); print Dump $conf;  </description>
    </item>
    
    <item>
      <title>今年もJPerl Advent Calendarの季節がやってまいりました！</title>
      <link>https://yusukebe.com/posts/2010/1126030013/</link>
      <pubDate>Fri, 26 Nov 2010 12:00:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/1126030013/</guid>
      <description>  成功すれば寿司を奢ってもらってさらに缶ジュースまでもらえる というステルスマーケティングされてるんで、 煽り気味で行きます。  Perlやっている人は書こー！ 今年もJPerl Advent Calendarが12月1日から始まります。 現在、English Track を含む3トラックが準備されています。  JPerl Advent Calendar 2010 - Casual Track : ATND JPerl Advent Calendar 2010 - Hacker Track : ATND JPerl Advent Calendar 2010 - English Track : ATND   Advent Calendarというのは今回のケースでは、 ATND上で25人の参加者を募り、12月1日から25日までの25日間、参加者1人がそれぞれある1日を担当し、 その日が来たらPerlに関する記事を書くというオンラインのイベントです。  その有効性についてはtokuhiromが以前書いた通りです。  技術的アドベントカレンダーの有用性について - TokuLog 改メ tokuhirom&#39;s blog  Perlを普段使っているという人にオススメはCasual Track。 自分の好きなモジュールとか、最近よく利用するモジュールについて書くといいでしょう。 Hacker Trackでは「俺のモジュールを見ろ」ということで、 自分が作ったモジュールについて解説するトラックです。 English Trackはその名の通り、英語で世界へ向けて発信するトラック。  僕はとりあえずCasual Trackにエントリーをしたところで、 趣味で今年いじった、 PodやMarkdownをレンダーするモジュールについてか、Facebook::Graphについて書こうかと思っています。 ちょっとした応用例でもいいと思います。  このAdvent Calendarのいい点は、 「みんなで作っている」という感覚です。 自分で書くという点に関してはいろいろな人に伝えられる、 いい意味でツッコミをウケられるという利点がありますし、 また他の人のモジュール応用事例や解説を見るのも楽しいです。 そして、 それに加えて、最後の方とか25日までリレーを繋ぐという緊張感と連帯感がでて興奮するのです！  ちなみに、25日まで無事完結したらかんかんという身体の大きな人がお寿司を奢ってくる！！  ネタが無いなーという人は自分が普段書いているスクリプトの「use Hogehoge」しているHogehogeについて、 ほんのちょっとしたことでもCasual Trackとかで書いてみたらいかがでしょうか！ たぶんネタとかぶりとかそんな気にならないはず！  参考までに去年のAdvent Calendarはこちらです。  JPerl Advent Calendar 2009  ということで Advent Calendar 書こうぜ！  JPerl Advent Calendar 2010 - Casual Track : ATND JPerl Advent Calendar 2010 - Hacker Track : ATND JPerl Advent Calendar 2010 - English Track : ATND  </description>
    </item>
    
    <item>
      <title>日本語の文章をzenrize(全裸化)するAcme::Zenraっていうのを作った</title>
      <link>https://yusukebe.com/posts/2010/1117021307/</link>
      <pubDate>Wed, 17 Nov 2010 11:13:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/1117021307/</guid>
      <description>かの有名なsugyanの全裸ボット。適当に人の発言に対して「全裸で」を付けて発言するボットなんだけど... これと、似た様なボットをたくさん作ろうとすると... 例えば「全裸で」を「動詞」の前につけるという部分のロジック、 つまり「zenrize」の部分を重複して作ることになる。 「夜の」というのを「名詞」の前につけて「夜のボット」を作りたい時も...  なので、「zenrize」を汎用的に行うAcme::Zenraっていうモジュールをでっちあげてみた。 githubにおいてあります。  yusukebe&#39;s Acme-Zenra at master - GitHub  このモジュールを使えば、IRCの発言をzenrizeしてNOTICEで返すIRC botも簡単に作れます。  実行例。   11:51 yusukebe: お腹が空きました
11:51 zenra_bot: 「お腹が全裸で空きました」ですね。わかります
  IRCボットのコード例。 #!/usr/bin/perl use Acme::Zenra; use AnyEvent; use AnyEvent::IRC::Client; use Encode; use utf8; my $channel = $ARGV[0] or die &#39;channel name is needed!&#39;; my $appid = $ENV{YAHOO_APPID} or die &#39;set $ENV{YAHOO_APPID}&#39;; my $zenra = Acme::Zenra-&amp;gt;new( yahoo_appid =&amp;gt; $appid ); my $c = AnyEvent-&amp;gt;condvar; my $irc = new AnyEvent::IRC::Client; $irc-&amp;gt;reg_cb( connect =&amp;gt; sub { print &#34;connected\n&#34; } ); $irc-&amp;gt;reg_cb( registered =&amp;gt; sub { print &#34;registered\n&#34;; } ); $irc-&amp;gt;reg_cb( disconnect =&amp;gt; sub { print &#34;</description>
    </item>
    
    <item>
      <title>オレオレ「Markdown-Viewer」</title>
      <link>https://yusukebe.com/posts/2010/1115114036/</link>
      <pubDate>Mon, 15 Nov 2010 20:40:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/1115114036/</guid>
      <description>とある原稿をMarkdownという書式で書いている。 Markdownについて、知らない人はぐぐってもらえればわかると思うんだけど、 実にシンプルで編集書式とHTMLでレンダリングされた結果が比較的似ていると認識できるから好きです。 あとマークアップにたいする「Markdown」っていう洒落が聞いた名前もいいっすね。  ただ、実際にエディタで書いた結果をHTMLで奇麗にみて確認したいよねーって思ったりもするんで、 Plack+Text::Markdownというモジュールもろもろを使ってビューアーをでっちあげてみました。 というか実は、牧さんのスクリプトを改変追加したオレオレになっています。  Plack + Markdown - D-6 [相変わらず根無し]  というかここまでのこの記事の展開も牧さんのエントリーまんまだったりして... （牧さんどもです）  CSSを調整すればこんな感じでブラウザでみることができます。   ちなみに、オレオレこだわりは  スクリプトを実行した際の第一引数に指定したMarkdownファイルがHTMLとしてレンダリングされてlocalhost:5000とかで見れるようにしておいた。 .jpgとかの拡張子をみて画像を配信するようにした。これはPlack::Middleware::Staticを使っているよ。 __DATA__以下にHTMLのヘッダーとフッターを書くようにした。Data::Section::Simpleを使っているよ。 ヘッダー内のCSSで奇麗にさせる   ということで以下コード例。 ちょっとしたこういうアプリ作るの楽しいのでそこら辺も「とある原稿」に反映させたいところ。 #!/usr/bin/perl use strict; use warnings; use File::Spec; use Plack::Runner; use Plack::Middleware::Static; use Text::Markdown qw/markdown/; use File::Spec; use Data::Section::Simple qw/get_data_section/; my $filename = delete $ARGV[0] or die &#39;$ARGV[0] needs markdown file!&#39;; my $app = sub { my $env = shift; my $file = File::Spec-&amp;gt;catfile($filename); open my $fh, &#39;&amp;lt;&#39;, $file or die &#34;Failed to open $file: $!&#34;; my $content = do { local $/; &amp;lt;$fh&amp;gt; }; my $html = markdown($content); $html = get_data_section(&#39;head.</description>
    </item>
    
    <item>
      <title>There&amp;#39;s more than one way to enjoy YAPC ! / YAPC::Asia 2010</title>
      <link>https://yusukebe.com/posts/2010/1018023730/</link>
      <pubDate>Mon, 18 Oct 2010 11:37:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/1018023730/</guid>
      <description>  14日の前夜祭から始まり、15日-16日と東京工業大学で行われた YAPC::Asia 2010。 みなさんお疲れさまでした！  さて最初にgihyo.jpの素晴らしいレポートにも書かれていない事実を紹介。 僕は、自分の発表「perl-casual特別企画 Twitter解析サービス(20min)」が始まる前に、 時間が余ったので適当に会場の皆さんのアンケートを取っていました。 その際に「YAPC初参加の人、手を挙げてください」と伺ったところ、 8割以上の人が手を挙げていて目を疑ったほどでした。 会場のキャパが80人くらい？でそのくらいの人数の方は、少なくとも「初YAPC」だったわけです。 ということで今回、YAPC::Asia 初参加の人が非常に多かった気がしたし、 事実だと思います。 で、さらに言うと「PerlCasualのイベントに参加したことのある人？」と聞くと、 だいたい6割だったので、もしかするとPerlCasualのイベントをキッカケにYAPC来てくれた方がいるかもしれないですね。  色々考慮すると今回のYAPC::Asiaの副題が「Welcome, Perl」なのは非常に意味を持つことだと思いました。 そもそもこの「Welcome, Perl」という言葉を聞いて「初心者の俺も行っていいんだ」と思ったという意見を懇親会で聞きました。 また、「perl-causual」枠を設けたことによって聞く側も話す側もレベルでのターゲッティングができた気がします。 「地方.pm」の対談があったことも地方Perlerを盛り上げていくキッカケになっていたようです。  こうしたYAPC初参加の人と話したり、感想のTwitter/Blogを見るとみんな感じてるのは、 「YAPCにおける自由さ」だと思います。 これを今回ゲストで来日したラリーの言葉に置き換えるとこうでしょうか。  「There&#39;s more than one way to enjoy YAPC !」   Perlはよく知られている通り、問題を解決するためには「やり方は一つじゃない」書き方ができる言語です。 これはPerl ConferenceのYAPCにも言えて、「YAPCを楽しむやり方は一つじゃない」んですよね。 いわゆる技術系のセミナーだと、決まりきった偉いさんの講演をじっと聞くってのが結構あります。 しかし、YAPC::Asiaは違います。 まず、自分が望めば発表者になれます。応募制なんで主催者側がアブストラクトを読んで面白いと判断されれば、 トークすることができます。 また、スタッフとして参加することももちろんできます。 当日では、講演会場が3つにわかれているので好きなトークを自由に行き来すればいいし、 逆に講演自体を聞かなくてもいいです。 Perl仲間と東工大の芝生で餃子くってもいいし、トークやっている会場のすぐ外のソファーでビール飲んでもいいし、 僕みたいに飯食いながら、韓国から来たPerl Mongerと片言の英語同士でお互いの国のPerlコミュニティについて話してもいいし。 今回そういう意味で印象的だったのは、 通常用意するはずの発表資料なしで「速いhttp clientが欲しくて、それがPerl Mongersの力があればできると思っている」とトークした tokuhiromがベストスピーカー賞をもらったことでした( 実際tokuhiromのトークで受賞対象になったのはシラフの方だけどね )。 そして、各自好きなことやっているようで、miyagawaさんのキーノートでは一致団結してみんな聞き入っているところが素敵でした。 ということで、いろんなやり方で楽しむことができたYAPC::Asiaだっと思います。  個人的にはこうしたYAPCの自由さ以外に、 myfinderさん、makamakaさん、刺身さんとかに「PerlCasualのおかげで今回プレゼンする気になりましたよ」的なこと言われて、 ちょー嬉しかったです。PerlCasualのイベントは年明けにやりたいと思います。  さて、前夜祭にゲストとしてお越し頂いた岡田有花さん、 スピーカーの皆さん、参加者の皆さん、スタッフの皆さん、 全体を指揮してくれた牧さん、くしいさん。お疲れ様でした！！  最後に、僕の方のトーク「Twitter解析サービス(20min)」のプレゼン資料を貼っておきます。 MongoDBの話あんまできなくてすいません。 とりあえず触ってみるにはMongoDB面白いし、CPANも「MongoDB」モジュールもO/R Mapperを少しでも使ったことあれば、 取っ付きやすいのでオススメです、と付け加えておきましょう。 YAPC::Asia 2010 Twitter解析サービスView more presentations from yusukebe.  </description>
    </item>
    
    <item>
      <title>本日はYAPC::Asia 2010 前夜祭 岡田有花たんも来るよ！</title>
      <link>https://yusukebe.com/posts/2010/1013211257/</link>
      <pubDate>Thu, 14 Oct 2010 06:12:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/1013211257/</guid>
      <description>  さて、いよいよPerlの祭典 YAPC::Asia 2010 が明日に迫ってきました。 ということで今日は全裸祭ならぬ「前夜祭」ですよ！ 今回は出張 PerlCasual #04として僕が全面的にプロデュースさせていただきます。 テーマは「Web Application (Framework)」ということで、 WAF開発者の話=WAF祭りを始め、 スペシャルゲストにIT戦士で有名なITMedia News記者の「岡田有花」さんを迎えて僕と対談しちゃいます。  WAF祭りでは  kamui - by nekokak Ark - by sugyan Amon - by tokuhirom Mojo - by charsbar   の4名の方に10分ずつのプレゼンをお願いしています。  また、Lightning TalksではPerlCasualの影響を受けた？と思われる方々も発表してくれるということで、 楽しみです！  そして、岡田有花さんとの対談では、「カジュアルなノリだったらWebのアイデアについても話してみようぜ」 ってことで以下のトピックの話を聴いちゃおうと思います。  面白いWebのサービス Blogからつぶやきへ/個人メディアの変遷 僕らの知らないターゲット層 ソーシャル戦争 デバイスの話 これから   まぁ、このあたり僕の個人的な興味がかなり入ってますが、 面白いと思いますよ！ そして、飛び入りであの人が割り込んだりするかもしれませんね！  YAPC::Asia 2010 前夜祭はYAPC::Asia本編のチケットが無くても、 1000円払えば入場できます！ 場所は東工大キャンパス内フェライト会議室、 開場は17時から、開演は18時からです。 参加申し込みはまだまだ以下のATNDページから受け付けております。  YAPC::Asia 2010 前夜祭 : ATND  皆様と開場でお会いできるのを楽しみにしていますので、 よろしくお願いいたします！ </description>
    </item>
    
    <item>
      <title>YAPC::Asia 2010、来週開催！</title>
      <link>https://yusukebe.com/posts/2010/1004100600/</link>
      <pubDate>Mon, 04 Oct 2010 19:06:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/1004100600/</guid>
      <description>  いよいよ、Perlの祭典YAPC::Asia 2010が来週15(金)、16(土)に迫って参りました。 チケットはまだ発売中です。 ちなみに前夜祭は14日(金)にPerlCasual主催、 つまり僕が基本的に仕切ってやることになっています。  さて、このYAPC::Asia 2010。この日記では紹介してこなかったので、 個人的な見所及び自分の発表について簡単に解説します。  まずは、例年のYAPC::Asia(以後YAPC)について。 僕がYAPCに参加したのは、一昨年なのですが、 非常に刺激的なものでした。刺激的という言葉では簡単に言い表せないほど「感動します」。 憧れのPerlハッカーがすぐそこにうじゃうじゃいたり、 いきなりdankogaiさんがビール片手に宴会始めたりといったお茶目な点を見れたりするのはもちろん。 また、技術的なことについて会社やスキルの隔たり無しにさらっと話せるのが楽しいのです。  同じようなことをdankogaiさんじゃない方の「dann」さんも言っておりました。 dannさんも一昨年から参加して、去年は発表を2本もしました。 その去年のエントリーでこう語っています。   YAPC::Asiaは純粋に技術について語れる場で、 純粋に技術者として楽しめるところが本当に魅力的でそこに引きつけられるものがあるなぁと感じています。  YAPC::Asia2009で発表してきました！ - dann@webdev - dann&#39;s portal   また、会場の東京工業大学の雰囲気がいいですね。 緑がたくさんあって、季節もいいのですっごい気持ちがいいんすよ。  では今年のYAPC、トーク内容についてです。 基本的にYAPCはゲストスピーカーもしくは一般応募されたスピーカーの20分もしくは40分のトークが3トラック並列に走って行われていきます。ちなみに、今回のゲストスピーカーにはあのPerl作者、ラリー・ウォールがいます！ 今年も様々なトークが目白押しな感じで興味深いです。  というだけではなかなか様子を把握しづらいと思うので、トークを簡単に分類してみます。 こんな感じのトークに分類されるでしょう。  大規模サービスでの運用を含めたPerlの活用 Perlライブラリ自体もしくは周辺の話 PerlCasual企画内、小中規模/個人でのPerl活用やコミュニティの話 その他テストについてや小話的な物   mixi、DeNA、といったPerlをメインで使っている企業のサービス話はもちろん、 はてなからGREEへのまさかの移籍を決めたnaoyaさんのトークも聞けちゃうっていうのが「大規模サービスでの運用を含めたPerlの活用」という分類です。まぁnaoyaさんのトークはPerl出てこないかもしれませんがね^^;  次世代テンプレートエンジンと言われてるXslateやFlash Media Serverであるkamaitachi、そしてPlackといったPerlライブラリの話やその周辺事項のトークも例年通り注目です。  また、今回はPerlCasual特別企画といたしまして、僕のトークを含む小中規模のPerl活用といったより初心者にとっても親しみやすいカジュアルな内容も用意しています。さらにコミュニティの話というちょっと例年とは特異なトークとして、地方.PMのトークセッションなんてのもあります。  そして、意外と多いのが「テスト」についての話で、データベースを使ったケースのテストの話や、Ajaxアプリケーションをテストするにはなんていうかゆいところに手が届く様な話もいくつかありますね。  という具合に改めて見てみるとトークの種類がやっぱり多彩で、発表する人のキャラが立っている感があるので、 面白そうですね。  YAPC::Asia Tokyo 2010 Timetable  個人的にはPerlに少しでも興味のある人に是非参加してもらいたいと思っています。 特に今年は二日目が土曜日なので、参加しやすいです。 また、いい感じに土曜日にPerlCasualの枠がありますしね！  さて、最後に僕の方の発表内容を簡単に説明。 タイトルは「NoSQLで作るTwitter解析サービス」。ですが、実のところ、 今運用しているそのTwitter解析サービスがNoSQLじゃあもはやなくなったので、 内容は若干異なります^^; というのは... という理由のところもしっかり本編のところでフォローします。 基本的には、個人とか小規模のチームがPerlでTwitter系サービスを作った場合どうなるかという、 去年のYAPC前夜祭で行った 延長線的な話をしたいと思います。 また、Twitter系のサービスでありがちなデータが膨んでパフォーマンスが出ない...という面での スケーリングを如何に省コストでやるかという内容も含んでいます。  さて、長々と今年のYAPC::Asia 2010について紹介してきました。 前夜祭ともに絶賛参加応募受付中ですので、少しでも興味のある方は是非！！  YAPC::Asia Tokyo 2010 [Oct 15 - Oct 16] YAPC::Asia 2010 前夜祭 : ATND  </description>
    </item>
    
    <item>
      <title>YAPC::Asia 2010 前夜祭の裏テーマは「私をYAPCに連れてって！」??</title>
      <link>https://yusukebe.com/posts/2010/0906072248/</link>
      <pubDate>Mon, 06 Sep 2010 16:22:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0906072248/</guid>
      <description>  *これは現時点ではYAPC::Asia本体、JPAとは全く関係のない見解です。  えー、10月14日に開催されるYAPC::Asia 2010前夜祭を PerlCasualで担当させていただくことになりました。そこで、 まだ正式に決まった訳ではないのですが、 プランを組んでみました。スピーカーを依頼する部分、 かなりの無茶ぶりを含んでいます。  ずばり、テーマは「Web Application (Framework)」です。 今まで3回やってきて要望が多いのにも関わらず触れられったものです。 Frameworkに括弧つけてるのはそれそのものじゃなくて それを応用した例の話もあってもいいかと思ったからです。  そして、裏のテーマは「私をYAPCに連れてって！」。 謎です。  詳細のタイムテーブルもプランの中にはあるのですが、 ちょろっとずつ決定していくということで、 今のところ見せられる概要はこんなんです。  基調講演(京都の人) Catalystを始めよう(全裸Bros.) WAF作者の集い LT(なんでもあり)   前夜祭はYAPCチケットを持っている人は無料、 持ってない人は1000円を払えば参加可能になる予定です。 LTを含め話したい！って人はTwitterとかで教えてください！ また詳細、決定し次第公式にアナウンスします。  俺がYAPCに連れてってやるぜ！(謎) </description>
    </item>
    
    <item>
      <title>PerlスクリプトでWebサイト死活管理</title>
      <link>https://yusukebe.com/posts/2010/0831030351/</link>
      <pubDate>Tue, 31 Aug 2010 12:03:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0831030351/</guid>
      <description>個人で作ってるサイトの死活監視を「再び」ちゃんとやろうと思っています。  そこで、Nagios使うまでも無く、Kazuhoさんの Kazuho@Cybozu Labs: 監視とは継続的なテストである、という話 (もしくは cronlog とテストスクリプトを組み合わせた監視手法について) みてシンプルに死活監視できるよなーと思って、 「Perlスクリプト」を書いてみました。 「死活」のみの監視なんで、サイトが正常では無かったらメールを飛ばすだけでいいという想定です。 設定をYAMLで持たせたかったり、メールをPerlから送りたかったりしたんで、 少しKazuhoさんのやってることより複雑になりましたが、まぁ簡単です。 #!/usr/bin/perl use strict; use warnings; use LWP::UserAgent; use Email::Sender::Simple qw(sendmail); use Email::MIME; use Try::Tiny; use YAML qw(LoadFile); use Path::Class qw( file ); my $file = $ARGV[0] || &#34;config.yaml&#34;; die &#34;Can&#39;t open $file&#34; unless ( -f file($file)-&amp;gt;stringify ); my $config = LoadFile( file($file) ); my $ua = LWP::UserAgent-&amp;gt;new( agent =&amp;gt; &#39;Monita/0.01&#39;, timeout =&amp;gt; 30 ); for my $url ( @{ $config-&amp;gt;{url} } ) { my $res = $ua-&amp;gt;get($url); send_report( $res ) unless $res-&amp;gt;is_success; } sub send_report { my $res = shift; my $email = Email::MIME-&amp;gt;create( header =&amp;gt; [ From =&amp;gt; $config-&amp;gt;{from}, To =&amp;gt; $config-&amp;gt;{to}, Subject =&amp;gt; $res-&amp;gt;request-&amp;gt;uri .</description>
    </item>
    
    <item>
      <title>ディレクトリ配下の.pmファイルでuseしているCPANモジュールを一気にインストールする</title>
      <link>https://yusukebe.com/posts/2010/0831013338/</link>
      <pubDate>Tue, 31 Aug 2010 10:33:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0831013338/</guid>
      <description>  これが一番簡単っぽい？ Module::Usedなるモジュールをインストールして付属のmodules-usedコマンドを使ってみる。 $ cpanm --sudo Module::Used $ modules-used ./ | cpanm --sudo --skip-installed   今、お試し中だよ。うまくいけば、 Makefile.PLのrequiresちゃんと書いてない時とか便利だね。 </description>
    </item>
    
    <item>
      <title>WEB&#43;DB PRESS vol.58に「Twitterから学ぶWeb APIのキホン」を寄稿しました</title>
      <link>https://yusukebe.com/posts/2010/0825225120/</link>
      <pubDate>Thu, 26 Aug 2010 07:51:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0825225120/</guid>
      <description>  もう発売になっているのですよね。 WEB+DB PRESSのPerl Hackers Hubというコーナーに恐れ多くも登場させていただき早漏。   今まで執筆しているのがmiyagwaさん、牧さん、typesterさんというすごいメンツなんで、 僕が書けるのはなんだなーと思っていたところ、やはりWeb APIかと。 Web APIのおかげでPerlのプログラミングでアプリ作ってるし、 Perlのおかげ？でWeb APIが楽しくいじれるしってことでTwitter Search APIを題材にして書いてみました。 前述の通り、PerlCasual#3 の時の発表とのメディアミックス(笑)になっております。  PerlでWeb API入門/Web APIでPerl入門 - PerlCasual#3より - ゆーすけべー日記  とにかく3つのことだけを言うことにしました。  リクエストURIを構築する Web APIにリクエストする 結果をパースする   で、それぞれモジュールの使い方についてサンプル付きで解説している初心者向けの記事です。 Web APIというとマッシュアップサイトとかボットを思い浮かべて、 なんかちゃらい感じしますが、ただ結構Webのアーキテクチャを理解するための要素が詰まっているので、 これを機に何か作る人が増えたら嬉しい早漏。  そして！これ一番大事。 興味持ってくれた人は、買ってもらって、読者はがきで 「ゆーすけべーさんの記事がxxxでした」って感想送ってもらえると嬉しいです！ この記事typesterさんが分かりやすいって言ってくれたしオススメだよ！  ということで買ってくれるんでしょ！あざっす！   WEB+DB PRESS Vol.58 posted with yusukebe.com::AmazonSearch on 2010.8.26 編  大型本 / 技術評論社  Amazon 売り上げランキング: 64  Amazon.co.jpで詳細を見る     </description>
    </item>
    
    <item>
      <title>PerlでWeb API入門/Web APIでPerl入門 - PerlCasual#3より</title>
      <link>https://yusukebe.com/posts/2010/0725234325/</link>
      <pubDate>Mon, 26 Jul 2010 08:43:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0725234325/</guid>
      <description>  先日7月23日(金)に株式会社ネイバーさんのご協力で行われたYokohama.pm#6 x PerlCasual#3。 イベント自体のまとめはアンケートの様子をみて後ほどさせていただくとして、 僕が発表を担当したPerlCasualセッションのことを少々。  PerlCasualのセッションは僕の割と独断で「どういう内容/スタイルが誰に求められているのか」を毎回試行錯誤で 探っている状況です。 この度は自分の原点に戻る感じでテーマを「Web API」としました。 というのも僕の最初のCPANモジュールはまさしく「WebService::Simple」ですし、 このPerl/Webの世界に入ってきたのも様々なWeb APIがキッカケだったからです。 また、対象のスキルレベルをかなり低いものと設定してみました。 何か新しいことを試す時には「極端なこと」をしてみて様子を探るっていうのは実は有効な手段だからです (これは学生時代にPHSを作ったとも言われる「小檜山賢二」教授に教えてもらったことです)。  で、そういうたくらみがあって、 sugyanによる「全裸ボットの作り方」というライブコーディングを中心に構成を組みました。 前半20分僕の「PerlでWeb API入門/Web APIでPerl入門」という発表、 後半30分はsugyanのライブコーディングです。  ライブコーディングの方、 結構無茶ぶり気味だったにもかかわらずsugyanはキョドリつつも引き受けてくれて、 直前の週のskype打ち合わせでガーっと内容固めていく感じでした。 結果、リハーサル無しでも、彼の素晴らしいアイデアフルなコーディングと僕のアドリブマイクフォローでいい感じに仕上がったと思います。 それにsugyanがなんだかいろいろやる気になったのが僕としては嬉しいですね！  僕の「PerlでWeb API入門/Web APIでPerl入門」ですが、 こちら実は来月末に発売される技術評論社「WEB+DB PRESS vol.58」のPerlHackers Hubというコーナーとのメディアミックスでお送りしました。 メディアミックスってどいうこと？って感じですが、 要は次回のPerlHackers Hubの担当が僕でテーマが「Web API」でそれが雑誌での展開になり、 このPerlCasualの発表もそれと大変酷似しているがイベントでの発表という展開形式を取るという意味です。 決して流用ではありません！のであしからず。  メディアミックスという都合上、 内容のもっとツッコんだことを知りたいなーという方は是非8月末に発売される「WEB+DB PRESS vol.58」を買えば 雑誌の特性を活かしてゆっくりと読むことができますね！ そして読者はがきで「ゆーすけべーさんの記事がよかったよー」って書いて送ると僕の株も上がるし、 もしかしてプレゼントが当たるかもしれなくてすごくいいですね！  ということで、今回の発表内容の解説は最低限に押さえないとさすがに技評の中の人に怒られそうなんで、 スライドだけSlideShareにあげておきました！ とはいえUstreamでも当日の録画があるんで、見たい方は見てみてくださいね。 PerlでWeb API入門View more presentations from yusukebe.   さて、イベントに参加していただいた方向けのアンケートはまだまだ受付中です。 未記入の方は是非ご協力ください！  Yokohama.pm#6 x PerlCasual#3 アンケート 第6回 yokohama.pm ＆ Perl Casual, Recorded on 10/07/23 yokohama-pm on USTREAM. Conference PerlでWeb API入門 on SlideShare 第6回 yokohama.pm ＆ Perl Casual でライブコーディングに挑戦してみた - すぎゃーんメモ  </description>
    </item>
    
    <item>
      <title>今日(7/23金)はYokohama.pm#6 x PerlCasual#3だよ！/アンケート/スタッフ若干募集</title>
      <link>https://yusukebe.com/posts/2010/0723053608/</link>
      <pubDate>Fri, 23 Jul 2010 14:36:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0723053608/</guid>
      <description>  今日、23日(金曜日)はいよいよPerlのイベント「Yokohama.pm#6 x PerlCasual#3」です！ 最終確認のエントリーを書きます。 ATNDで参加希望を出した方は必ず以下を確認してください。  Yokohama.pm#6 x PerlCasual#3 : ATND 必ずATNDで自分が出席可能かどうかを確認してください どうしても行けないという方は必ずATNDでキャンセルをお願いします イベントは18時開場です！   今後の活動の参考にするためWebアンケートを用意しました。「イベント終了後に記入」ということなんで、 まだ記入しちゃだめだよ！って感じですが、URLは以下ですので、是非「イベント終了後に」ご回答ください！  http://bit.ly/perlcasual03   また、イベント中に若干のお手伝いをしていただくスタッフを募集しています。 15分ほど一部セッションみれなくなっちゃうかもしれませんが＞＜ 人員が足りないので、もしご協力してくれる方がいたら18時開場時点で僕かclouderさんに声をかけてください。 もしくは事前に @yusukebe へ向ってつぶやいてもらえると助かります！  さて、PerlCasualのセッション「初心者向け勉強会 テーマ: Web API と Twitter ボット等」は僕のトークとsugyan氏のライブコーディングで進める予定です。そこまで準備完璧というわけではないのですが、 sugyan氏が徐々にテンションを高めて脱ぎだしているところなんでこれは期待できるかもしれませんね！  他のセッションも面白そうなものがいっぱいですし、懇親会も楽しみです！ それでは現地でお会いしましょう！ </description>
    </item>
    
    <item>
      <title>明日(7/23金)はYokohama.pm#6 x PerlCasual#3だよ！</title>
      <link>https://yusukebe.com/posts/2010/0722083052/</link>
      <pubDate>Thu, 22 Jul 2010 17:30:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0722083052/</guid>
      <description>明日、23日(金曜日)は100人規模の(ビッグ)イベント「Yokohama.pm#6 x PerlCasual#3」です！ 待ちに待ったというよりか「え！もう？明日なの？」って感じかもしれないので、 参加予定者の方は以下ご確認お願いします。  Yokohama.pm#6 x PerlCasual#3 : ATND 必ずATNDで自分が出席可能かどうかを確認してください どうしても行けないという方は必ずATNDでキャンセルをお願いします スタートの時間は18:25分ですが、開場は18時からなので来れる方はその時間を狙って来てください 懇親会の会場として五反田の居酒屋を予約しました、会場から徒歩10分ほどらしいです 参加していただいた方にはもれなくWeb上でのアンケートに答えてもらおうと思います。 URLは後ほどお伝えいたしますのでよろしくお願いします Ustream中継あります。URLは http://www.ustream.tv/channel/yokohama-pm、ハッシュタグは #yokohamapm の予定です   以下、ほぼfixのプログラムになります！  日時: 2010/7/23(金) 18:25 - 21:00 / 開場18:00 場所: ネイバージャパン株式会社 東京都品川区大崎 2-1-1 ThinkPark Tower 23階 http://corp.naver.jp/about/access  特別協力: ネイバージャパン株式会社 定員: 100名 + スピーカー  プログラム:
 18:00 入場開始(25min) 18:25 挨拶&amp;amp;開場等説明(5min) 18:30 kazeburo - リソース監視ツール・フレームワークCloudForecastの紹介(20min) 18:50 typester - WebアプリケーションエンジニアのためのiPhoneアプリ開発入門(20min) 19:10 Yappo - 未定(10min) 19:20 gfx - Any::Mooseではじめるオブジェクト指向プログラミング(10min) 19:30 PerlCasual 初心者向け勉強会 テーマ: Web API と Twitter ボット等(60min) 20:30 LTx5 xaicron - みんな大好き Encode(5min) polocky - それいけアパッチログレスポンス時間解析(5min) piarra - Use::Strict::Fast(5min) まかまか - 夏コミ新刊Perl同人誌の宣伝(5min) 21:00 終了  懇親会:</description>
    </item>
    
    <item>
      <title>Yokohama.pm#6 x PerlCasual#3 合同開催!</title>
      <link>https://yusukebe.com/posts/2010/0706082607/</link>
      <pubDate>Tue, 06 Jul 2010 17:26:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0706082607/</guid>
      <description>  ちょっと急な日程ですが今月23日(金)にPerlCasualのイベントをYokohama.pmで合同で開催します。 場所はNaverさんの協力で貸していただけることになりました。 さっき下見行ってきたんですがすっごいカフェっぽくていい感じです。 PerlCasualの枠ではWeb APIの話とsugyanによる全裸ボットの作り方っていうのを予定していて、 かなり初心者向けなので多くの方に参加してもらいたいです！ よろしく！！【拡散希望】  参加応募: Yokohama.pm#6 x PerlCasual#3 : ATND  日時: 2010/7/23(金) 18:30 - 21:00 / 開場18:00 場所: ネイバージャパン株式会社 東京都品川区大崎 2-1-1 ThinkPark Tower 23階 http://corp.naver.jp/about/access  特別協力: ネイバージャパン株式会社 定員: 80名 + スピーカー  概要  横浜を中心にPerlの話題で盛り上がるYokohama.pmと カジュアルな(？)初心者向けの(？)勉強会を開催するPerlCasualという 二つのPerl新興勢力が手を組んだ！ 夢の同時開催が大崎にあるNaverさんの協力で実現します。  日時は7月23日(金)18時開場で、18時30分からスタート！  Yokohama.pmトラックではいつも通りのメンバーによる自由なPerlについてのトークが 聞けちゃいます。 また、PerlCasualでは全裸ボットで有名なsugyan氏と全裸Ustreamで有名なyusukebe氏を 講師に迎えWeb APIをPerlで操作する基本的な事柄から ついには全裸の作り方の全貌まで解説しちゃいます。 Perlに興味のある方、レベルに関係なくお越し下さい！ プログラム(仮)  Yokohama.pmトラック トーク数本を予定 60 min PerlCasual 初心者向け勉強会 テーマ: Web API と Twitter ボット等 60 min Lightning Talks 5min x 5 (もしかして) 打ち上げ 21:30  </description>
    </item>
    
    <item>
      <title>Catalystで作る占いアプリ！</title>
      <link>https://yusukebe.com/posts/2010/0702035550/</link>
      <pubDate>Fri, 02 Jul 2010 12:55:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0702035550/</guid>
      <description>Perlで何かしらのアプリケーションを作りたい！という要望の中にはWebアプリケーションという選択が多く含まれています。 ただ、Webアプリケーションを始めるのにいいキッカケが最近Web上のドキュメンに無い気がします。 そこで、僕が一番最初に手にして今でも使っている、Web Application Framework = WAF の Catalyst を例に紹介しましょう。 Catalystに限らず WAF はMVCモデルを採用しているものがだいたいなのでその概念は知っておいた方がいいかもしれません。が、習うより慣れろの部分もあるので今回は例として占いアプリを作ってみます。 1. Catalystをインストールする  おそらく今回の行程でこれが一番難しいですw CPANシェル、もしくは cpanminus 等を使って適当な場所にインストールしてください。 依存モジュールが多いので時間がかかります。コーヒーを用意しましょう。 $ cpanm Catalyst  2. ひな形を作る  見事インストールできたら catalyst.pl コマンドが使えます。 今回はシンプルに「Uranai」という名前でアプリを作ります。 $ catalyst.pl Uranai  3. テストサーバを起動する  Catalyst にはテスト用のサーバが付属しています。-r オプションは更新ファイルがあったら再起動、 -d オプションはデバグモードにするという意味です。たぶん。 $ cd Uranai/ $ ./script/uranai_server.pl -r -d  4. 確認する  デフォルトではそのホストの3000番ポートで起動します。ブラウザから確認して、 かっこいいロゴ画面がでるのを確認しましょう。  http://localhost:3000/  5. Viewクラスを作る  さて、オリジナルのHTMLを表示したいものです。Viewと呼ばれる表示系のクラスを作ります。 $ ./script/uranai_create.pl view TT TT   そして、lib/Uranai/Controller/Root.pm の index メソッドを以下のように書き換えると、 自然とそのパスに応じてテンプレートファイルが呼び出されるようになります。 この場合は index.tt というファイルです。 sub index :Path :Args(0) { my ( $self, $c ) = @_; }   index.tt が無いので作ります。 今回の占いアプリはフォームに名前を入れてもらうとそれをハッシュ関数というものに渡して、 占いの結果からその名前に対応するものを表示するページへ遷移するという仕様になっています。 なのでフォームを書き書きします。 &amp;lt;!</description>
    </item>
    
    <item>
      <title>Webページからキーワード抽出するお気軽Perlスクリプト</title>
      <link>https://yusukebe.com/posts/2010/0624063324/</link>
      <pubDate>Thu, 24 Jun 2010 15:33:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0624063324/</guid>
      <description>HTML::ContentExtractorとYahoo! APIのキーフレーズ抽出を使うと結構お手軽に Webページからそこそこの精度でキーワードを取り出せる。 以下スクリプト例。 use WebService::Simple; use HTML::ContentExtractor; use LWP::UserAgent; use Encode; my $url = $ARGV[0] || &#39;http://yusukebe.com/archives/10/05/12/150832.html&#39;; my $extractor = HTML::ContentExtractor-&amp;gt;new(); my $ua = LWP::UserAgent-&amp;gt;new(); my $res = $ua-&amp;gt;get($url); my $html = $res-&amp;gt;decoded_content(); $extractor-&amp;gt;extract( $url, $html ); my $text = $extractor-&amp;gt;as_text(); $text = substr $text, 0, 500; my $service = WebService::Simple-&amp;gt;new( base_url =&amp;gt; &#39;http://jlp.yahooapis.jp/KeyphraseService/V1/extract&#39;, response_parser =&amp;gt; &#39;JSON&#39;, ); $res = $service-&amp;gt;get( { appid =&amp;gt; &#39;xxxx&#39;, sentence =&amp;gt; $text, output =&amp;gt; &#39;json&#39; } ); my $ref = $res-&amp;gt;parse_response(); for my $key ( keys %$ref ) { print encode_utf8(&#34;$key\n&#34;) if $ref-&amp;gt;{$key} &amp;gt; 50; }   靴下パンツ、ユニクロで買うか？無印で買うか？ - ゆーすけべー日記からキーワードを抽出すると以下のようになった。 $ perl keyword.</description>
    </item>
    
    <item>
      <title>Perl Casual 今後の方針案</title>
      <link>https://yusukebe.com/posts/2010/0509222701/</link>
      <pubDate>Mon, 10 May 2010 07:27:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0509222701/</guid>
      <description>  Perl Casual ってのはどちらかというと「運動」に近いものだと思っていて、 「カジュアルにPerlを楽しもう！」っていうコンセプトの元それぞれ活動すればいいと思っています。 ですが、イベントもやったら楽しいよね、交流できるよね、刺激しあえるよね、 ってことで2度ほどイベントを主催させていただきました。  先日の初心者対象の勉強会は好評だったわけですが、 個人的にもう少し上のレベル、簡単な言葉で言えば自分を含む「中級者」向けの交流、発表の機会があってもいいかなと思ってます。 もちろん地域.pmで吸収できる部分があると思いますが、 カジュアル！っていうコンセプトをいれると違う形になると思うんでそれはそれでありかなと。 第1回目のLightning Talks合戦をしたことで今まであまり接点の無かったPerlerの「顔」が見れたので、 そういう経験もあります。  そこで、初心者より上CPAN Author未満から「CPAN Authorなったよ！」くらいの人をメインにして カジュアルなイベントしたいなーと思ってます。 ですが、僕が基本的に初心者向けをマネージするようにしたいので、 そちらは他の人にイベントの企画を任せたいというのが本心です。  てなわけで無茶ぶりするために全裸ボットで有名なsugyan氏に彼の会社のある鎌倉まで行って説得してみました。   「カジュアルにPerlを語りあう合コンをやればいいのですね」   と言ったかどうかは知りませんが、どうも乗り気になってくれたみたいのなので期待しちゃいましょう！ もちろん彼ひとりではなく他の人にも協力してもらいたいです。  どういう内容になるかは不明ですし、あまりかしこまってやることではないかもしれませんが、 とにかく一度やってみて様子をみつつ今後の方針をアップデートしていきたいですね。  ということで Enjoy casual Perl! </description>
    </item>
    
    <item>
      <title>Perl知りたいこと「勝手にまとめ」</title>
      <link>https://yusukebe.com/posts/2010/0508004823/</link>
      <pubDate>Sat, 08 May 2010 09:48:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0508004823/</guid>
      <description>先日書いたエントリー「Perlについて知りたいこと」についてはてブのコメント、 Twitterのリプライで多くの方からご意見いただきました。 ありがとうございます。  とりあえず「初心者向け」という視点で「Perlについて知りたい」事柄はこういうものがある、 そして知ってもらうためにはこういう方向性があるというのをすっごい個人的にまとめてみます。 以下の3つになります。 1. 初心者から見た壁を取っ払う  このコメント見て確かに！って思いました。   uzulla やっぱりperldocやCPANとかで、ドキュメントは豊富だけど、易しくは無いところが難しいんでないかなあ...。perldoc.jpとか文字多すぎ＆無骨すぎて、初心者にみせると軽く引かれるｗ   そうですよねー。自分はperldoc使わずに「ポケットリファレンス」見てましたw 確かに「文字多すぎ＆無骨すぎ」なんでそれが壁になっちゃってる感じはありますね。 「知りたいこと」の回答はいろいろなところにあるはずですが、 「perldocとCPANみろ！」だけで済ましちゃうのもあんまよくないのでしょうねぇ。 もしくはその2つに関しての分かりやすい導入が必要なのかもしれません。   neko190 Perlに限らずだけど「初めての〇〇」を読んだ後、次にどうすればいいかわからなくて悩んでる人は多い。PHPが支持されてる理由は、そのあたりをうまくフォロー出来ているからだとおもう。   「続・初めてのPerl」があるよ！っていうのは全くの冗談なのですがw、これも納得がいきますね。 おっしゃる通りどんな言語でもそうだと思っていて、自分も体験したことです。 では、 なんであえて俺がPerl使いだしたのかっていえばその「フォロー」してもらう先ってのを、 自ら探すことができたからだと思います。 その辺りもう少し個人的な経験を分析してみるといいフォローの仕方がまとまるのかなと思います。 2. 「使える！」Perlの使い方を紹介する  で、上の「フォロー」に関わることだけど、 「Perl使えるじゃん！」って思ったらその人にとっていいキッカケになるでしょう。 俺の場合Plagger辺りがそれに当たるのかなぁ、 と考えるとやっぱりPerlのアプリケーションの話をいろいろ知るといいかもね。 この件について、otsuneさんが的確なことを言っています。   otsune 個人的な話で言うと「ネットウォッチをしたい（RSS,HTMLスクレイプ,Twitter UserStream）→似たような志向のモジュール書きが居るPerlが便利」ってことだな。同じ理由でtig.rbのためにRuby使うし、pythonも使う。   otsuneさんらしいし、otsuneさんこそ言ってしまえばまさに「カジュアルユーザー」って感じなので、 このご意見は貴重です。  また、他の方のコメント見ると面白いことに、意外というかやっぱりなのかわかりませんが、 「スクレイピング」「Twitter」と2つのキーワードが結構出てきてます。 もちろん「Webアプリ」も多いのでそこも突っ込みたいのですが、 最初「これが使えるぜ！」という時に「スクレイピング」と「Twitter」を題材にするのはいいかもですね。 lestrratさんが前回の勉強会の題材にTwitterを選んだのもこういう流れがあると思います。 3. 最低限の書き方を教える  「モダンな書き方」というフレーズが結構でてきてそれを知りたいというニーズもあるようです。 いかようにも書けるPerlですが、最低限押さえるべきところは体系化された方がいいですね。   okacham ペアプログラミングしてモダンな書き方じゃないといわれても、困りそう。googleで検索してそのモダンな書き方がでてくるか否か。わかりやすさ、開発効率、システム効率、メンテナンス性などが改善されるならいいけど   もちろんperl-users.jpや書籍では「モダンPerl入門」で紹介されているのですが、 もっと例えばgoogleに引っかかるような努力はできればした方がよさげですね。   以上個人的にささっと今後も踏まえまとめてみました。 それぞれなりのまとめ方があると思うので、 はてブのコメントは以下で見れるので参考にしてくださいね。 自分にできるか謎ですが、うまいことこの辺のご意見を拾い上げて吸収していきたいです。  はてなブックマーク - Perlについて知りたいこと - ゆーすけべー日記    CGI &amp;amp; Perl ポケットリファレンス (Pocket reference) posted with yusukebe.com::AmazonSearch on 2010.5.8 藤田 郁 三島 俊司  単行本（ソフトカバー） / 技術評論社  Amazon 売り上げランキング: 132594  Amazon おすすめ度の平均:  ラクダ本よりもコレ  手元にあると便利な本  重宝しています  Perlの標準関数を網羅できるという安心感  便利   Amazon.</description>
    </item>
    
    <item>
      <title>Perlについて知りたいこと</title>
      <link>https://yusukebe.com/posts/2010/0506025450/</link>
      <pubDate>Thu, 06 May 2010 11:54:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0506025450/</guid>
      <description>  本を書いていたり、Perl Casualとかイベントやってる手前、 世の中の主にPerl初心者な人な人達が「Perlについて知りたいこと」を考えています。 とりあえずニーズから物事を作っていくってやつですね。 ちょっと抽象的な段階ですが僕なりに以下をまとめてみました。 これはほんと、どんどん人に聞かないとわからないものなので、 もし「私はこれが知りたいのよ！」って方がいらっしゃったらTwitterなり、 はてブコメントなりで教えてくれるとすげー助かります。 何ができるのかを知りたい  Perlは比較的なんでもできるといわれてもピンとこないっすよね。 具体的にどういう風な目的でどのような現場で使われているのかを知ったらイメージが湧きやすいし、 モチベーションになるだろうなぁ。もちろん仕事だけに限らず趣味のプログラミングにおいてもです。 どうPerlだと「楽」なのかを知りたい  「楽」ってのは「楽をする」って意味と「楽しい」って意味の二つを含んでいます。 まぁ、「楽」な感じでPerl使ってる人いるけど、どーいうことなんだろう？って思ってる人に紹介したいところです。 「Perl怖い」を払拭したい、そのためには？  どうも言語的にみてもコミュニティ的にみても「Perl怖い」と思われている方がいるようで、 それを払拭するには、というかそもそも怖くないよ！ってことを論理的に説明できればいいかと思っています。 文法を知りたい  他の言語を触ったことがある方なら、手っ取り早くPerlの文法を知りたいと思うでしょう。 しかもその言語との比較とかあればわかりやすいだろうなぁ。 Perl特有の概念を知りたい  文法以外にPerl特有の概念、「リファレンスって何？」から「CPANってなんて読むの？」という疑問まで知りたいというニーズはあるでしょう。するとPerlの哲学的なところも含んでいくことになると思います。 イマドキの書き方を知りたい  「モダンPerl入門読んで」で終わっちゃうかもしれませんが、 まぁまだカバーできてない部分もあるし、その人なりの癖もあることを考慮していろいろな書き方を知るのはいいと思います。 難しいをとっぱらいたい、そのためには？  「Perl怖い」と似てるけど、PerlやるにはUnix/Linuxの知識が必要だったりするんで、 やっぱり導入として難しい部分は否めないと思います。 そのための知識や参考とできる部分を簡潔に説明できるといいのかなぁ。 Webアプリを作るには？  なんだかんだいってPerlやる目的としてWebアプリ作りたいってのが多いので、その辺り。 具体的になりすぎると固有のものに引きずられるので、ちょっとメタな次元での話をしたいかも。 コミュニティにjoinしたいけど...  Perlはコミュニティがいい感じと言われるし、自分もそう思いますが、 そこに入るのに障壁があるのは確かです。 その障壁が逆にいいのかもしれませんが、本当に望んでる人を後押しするような情報なりなんなりを与えて行くのは 有意義かもしれませんね。  繰り返しになりますが、 ご意見あればお待ちしております。 </description>
    </item>
    
    <item>
      <title>PerlCasual#02 - 初心者向け勉強会 アンケートまとめ</title>
      <link>https://yusukebe.com/posts/2010/0425203652/</link>
      <pubDate>Mon, 26 Apr 2010 05:36:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0425203652/</guid>
      <description>先日から募集していたPerl Casual #02の事後アンケート。 だいたい数が揃ってきたのでここらでまとめておきたいと思います。 講師の方や関係者の方はもちろん、Perlのイベントに興味のある方などは参考にしてみてください。 基本ID付きで紹介してもOKという方の勉強会への要望と感想をいくつかピックアップし、 最後に統計グラフをみせます。 質問: 要望があれば6月末をめどにまた勉強会を開催したいと思います。 その時のテーマとして扱って欲しいものを挙げてください。   Plackみたいな新しい技術を使って何かを作るライブコーディング  sasata299さん   Plackはあまり初心者向けではないという認識ですが、 個人的にはすごい見てみたいですね。新しい技術はフォローするのが大変なので、 有意義だと思います。  「Perl や CPAN Module を作る人」目線じゃなくて「使う人」目線にたったカンファレンスだったのが良かったです。 懇親会でも仕事で使うために、あの機能があるといいのに、といった話を伺うことができ、勉強になりました。  kazuhoさん   なんか感想になっちゃってますが、「使う人」目線ってのは目指していたところなので、 そう言ってもらえるとすごい嬉しいです！   CPAN module の作り方。  ryoffさん   これはいいですね。CPANモジュールの使い方を今回やったので、 CPAN Authorへの道！みたいなのを講師の方の体験談含め聞いてみたいですねー   今回は、初心者向けと言うことで、次回はもう一歩進んだ内容を希望します。
1.CPANモジュールの構成、ディストリビューションの方法。
・shipitまでの手順
・blibとかtとかxtディレクトリがどういう意味か
・Makefile.PLがやってることなどの説明
2.テストの方法
Test::Moreなどを使ったテストの方法（ライブコーディング希望）
3.Perlの文字コードについて詳しく。（Encodeモジュールの使い方）
Perlで正しくマルチバイト文字を扱おうとすると、最初ハマる。
PHPのmbstringなどと比べるとわかりにく面があるので、
詳しく解説して欲しい。
 kaz_hiramatsuさん   shipitもそうですが、テストとEncode周りは知りたいところだと思うので、テーマとして扱いたいですね。 詳細に要望ありがとうございます。   Perlによる非HTTPな、常時接続サーバーデーモン（チャットサーバーとか）のうまい書き方とか、Perlでマルチスレッドとか。Perlはウェブ(HTTP)以外にも使えるんだ！というのをみてみたい。(ほとんどの人に喜ばれない)  uzullaさん   Perlはウェブ以外にも！っていうのはほんとPerlのいい点だと思うので、 その辺アピールしたいっすねー   最近のWAFなんかの話と併せて、サーバー管理などでテキスト処理の手段としてPerlを使われてる方の話も聞いてみたいと思いました。Perlの幅広い使われ方を知りたいなと思います。  koba04さん   幅広い使われ方で、「こんなのあるよ！」っていう事例紹介も面白そうですね。 初心者の方のモチベーションも湧く可能性もあるし！   色々勉強したいのですが自分が特に気になるのはこのへんになります。
- XSの基本
- Daemon(gearmanやQ4MのworkerをCPANauthorのみなさんがどう書いてるのかが非常に気になります)
- Class-Triggerのうまい活用法とか
- ライブラリ以外のテスト(Daemonとかテストどうやるのか?エクセルｗ?)
 hatutoitoiさん   具体的でいいっすねー！XSといえばあの人の出番かな！   いまはやりの Plack とか。&#34;</description>
    </item>
    
    <item>
      <title>Perl Casual #02 事後アンケートにご協力ください</title>
      <link>https://yusukebe.com/posts/2010/0422025059/</link>
      <pubDate>Thu, 22 Apr 2010 11:50:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0422025059/</guid>
      <description>  改めまして昨日の「Perl Casual #02 - 春のPerlフレッシュマンアワー」にご参加いただきありがとうございます。 正確な数を把握しているわけではありませんが、 定員80名で用意してもらった席がほぼいっぱい状態、懇親会は50名ほど参加と「盛況」と言ってもいい具合に なりました。僕もタイムマネージメント頑張ったので、 突然のmiyagawaさんのセッション参入というサプライズにも対応できつつ、 いい感じにまとめられたかなと思ってます。  さて、lestrratさんこと牧さんと懇親会で話して、「次回は、会場で感想を含むアンケートをとりたいよねー」 ということになったので、次回からはそうします。 が、今回に関しても今からでも遅くはない！オンラインがあるじゃないか！ っちゅーことで、Google Docs を利用してオンラインのアンケートフォームを作成しました。 昨日のイベントに参加した方は是非ご協力ください。  Perl Casual #02 参加者向けアンケート   こちらの結果、次回の企画に活かしていきたいと思います。 また、今回の勉強会形式をとる場合、「俺、講師やりたい！」みたいな人を絶賛募集中なので、 気軽に声かけてくれると嬉しいです！ 初心者LT大会なんてもやってみたいっすねー  ま、とにかく昨日、懇親会を含め「和気あいあい」としたカジュアルな雰囲気が楽しめたので、とっても嬉しいです。  Perl Casual #02 参加者向けアンケート タグ「perlcasual」を含む新着エントリー - はてなブックマーク  </description>
    </item>
    
    <item>
      <title>WEB&#43;DB PRESS vol.56 に「Twitter時代の技術者コミュニケーション術」という記事を寄稿しました</title>
      <link>https://yusukebe.com/posts/2010/0421222800/</link>
      <pubDate>Thu, 22 Apr 2010 07:28:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0421222800/</guid>
      <description>  2009年Twitterが流行ると共に、OSS開発者にとってはGitHubベースの開発スタイルというのが主流になってきた と感じました。それに限らず、技術者間のコミュニケーションってオンラインでもオフラインでも面白いなー って思ってもいました。 てなわけでその辺りをまとめたものを、 2009年のまとめかという体で、日記のエントリーするネタとして温存してたんのですが、 ギヒョウの編集者の方にこんなの考えてるんすよねーと気軽に話したら、 「是非記事にしましょう」みたいなノリになったもんで今回24日に発売する WEB+DB PRESS vol.56 の一般記事として寄稿させていただく運びになった次第です。 タイトルはキャッチーに「Twitter時代の技術者コミュニケーション術」となります。   春ということで新人さん向けの入門っぽく一応仕上げております。 参考にできる方は是非ご覧いただけると幸いです。 てな感じでよろぴく。   WEB+DB PRESS Vol.56 posted with yusukebe.com::AmazonSearch on 2010.4.22 WEB+DB PRESS編集部  大型本 / 技術評論社  Amazon 売り上げランキング: 437  Amazon.co.jpで詳細を見る     </description>
    </item>
    
    <item>
      <title>Perlにおける「キャラクター」の特出について</title>
      <link>https://yusukebe.com/posts/2010/0421214542/</link>
      <pubDate>Thu, 22 Apr 2010 06:45:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0421214542/</guid>
      <description>昨日開催された「Perl Casual #02 - 春のPerlフレッシュマンアワー」の冒頭で自分が話したことを、 文章で練り直してまとめておきます。  Perlの最大の魅力の一つとして、 再利用可能なモジュールが揃っているCPANの存在が挙げられます。 そしてそのCPANの特徴の一つを見ることによってPerlの興味深い点も見つけることができます。 以前からなんとなく私も気づいていたことですが、 昨日の朝「Perl Casual #02」向けのネタを考えている時に確信しました。 CPANにおいてそれは単なる枯れたシステム上の問題だけなのかもしれませんが、 とにもかくにもCPANは、 モジュールライターの「キャラクター」が非常に押し出されている仕組みになっているということです。  PHPのPEAR、RubyのRubyGemsのサイトとsearch.cpan.orgのそれを比べてみると 一目瞭然です。前者二つのサイトにおいてライブラリを探すと ライブラリそのものをもちろんすぐ発見することができます。 URLのパスもライブラリの名前のみを含んだものになります。 しかし、search.cpan.orgの場合は、ライブラリのページが出てくると同時に、 その作者の名前及びアイコン(設定されていれば)が前面に押し出される形で表示されます。 URLのパスももちろんライブラリ名を含んだものですが、「~AuthorのID/モジュールのパス」 という構造になっています。  これは単なるディレクトリ構造や表示の問題なだけかもしれません。 しかし、現状としてそうなっているのは確かで、また、 それにより私たちがCPANモジュールを利用する時に誰がメインのAUTHORなのかをより意識することになります。  そうであることに関してメリット及びデメリットは様々あると思いますが、 今回はAUTHORにとっての「責任」から話を発展させてみてましょう。 上記した通りの構造によりCPANではAUTHORはメインメンテナとして一人ということになります。 大きなモジュールですと他のコントリビュータもいることはもちろんですが、 一人のAUTHORにモジュールをメンテナンスする上で良くも悪くも様々な責任がつきまいます。 AUTHORの方がこうした責任を「うまく」果たすケースが産まれれば、 モジュールを使うユーザ側にとってはAUTHORに対する「信頼」へと変わります。 「あの人の書いてるモジュールだから安心できる」だとか、 「あの人が最近CPAN AUTHORになったみたいだからちょっくら見てみるか」という好奇心が湧くわけです。 これは一般的な「書籍」の構造に似ています。 著者とタイトルがそのままCPANにおけるAUTHORとモジュールという形で置き換えてみることも可能です。 そして、AUTHORに対する「信頼」がそのうち「憧れ」に変わる時があるのです。  私自身これほどPerlと言い出したのは、 その「憧れ」を幾人かの方に抱いたからと言っても過言ではありません。 これは「キャラクタがよく見える」Perlだからこその現象なのかと今現在考えているというのが、 私の意見です。  さらにその「憧れ」の方と「ラフに」出会えるがもう一つのPerlの魅力です。 YAPC::Asia 2008 が私にとっての初YAPC参加になるわけですが、 それはもう興奮の瞬間でした。あの作者のあの人がいる。それだけで幸せな上に、 同じ壇上で拙いLightning Talkまでさせていただきました。  比べるのもおかしいかもしれませんが、この状況を説明するのにいい例がありますで、 紹介してまとめていきたいと思います。 私の好きな日本のロックアーティスト、アジアンカンフージェネレーションは 2005年のサマーソニックフェスティバルのメインステージに午後の早い時間に登場しました。 そしてその後(これもまた私の愛するアーティスなのですが)、 weezer、oasisといわゆる大物がステージに立ちました。 私が、アジアンカンフージェネレーションのギグを待つ時間に隣で話していた会話を耳にして はっとさせられました。   これで、アジカン(アジアンカンフージェネレーションの略)は、 (彼らが)憧れてたoasis、weezerと同じステージに立つんだよな。 なんか感動するね。   私がYAPC::AsiaでLTをしてアジカンになれた、ということを言っているわけではありません。 「憧れ」と同じステージに立つという時に、 例えばアジカンにとっての気持ちを思うとなんとなく共感できる部分がある気がする、 ただそう思ったことを伝えたいと思いました。 おそらくそれはとっても嬉しく、様々な恩恵に感謝したいもので、 そしてさらに成長してみせると自らを鼓舞するものであったと思います。  「憧れ」と同じステージに立つことが許される世界が、 ロックにあるとしたら、Perlにもあるのです。  CPANの話から脱線しつつかつ、本編で話した内容から逸脱してしまいましたが、 簡単にまとめるとCPANのもたらすAUTHORのキャラクタの特出により、 「憧れ」と同じステージに立つという夢を抱くこともできます。 また、今回のPerl CasualやPerlMongersのイベントを通してまず「出会う」ことも可能です。  これはどの世界でも共通かもしれません。 ただ、いくつかのプログラミング言語やその他の体験を通して、 私が現在進行系でめり込んでいる関心毎はPerlだ、ということはまぎれもない事実です。  そういうことが言いたいんだと思います。 Perl Casual #02 OpeningView more presentations from yusukebe.</description>
    </item>
    
    <item>
      <title>今日はPerl初心者向け勉強会 in PerlCasual#02</title>
      <link>https://yusukebe.com/posts/2010/0420225545/</link>
      <pubDate>Wed, 21 Apr 2010 07:55:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0420225545/</guid>
      <description>  この記事は随時更新されると思われます  いよいよ本日はPerl初心者向け勉強会です。 当日の諸連絡をこの記事とツイッターをベースに行いますので、 関係者の方はチェックしてください。 公式タグ  公式というのもなんか変ですが、タグは以下を使ってください。  Twitter等向けハッシュタグ「#perlcasual」 はてなブックマーク等向けタグ「perlcasual」  開場時間 スタートは19時ですが、来れる方はそれ以前に来てください。 開場は18時30分です。 出欠の確認ATNDで  先週と繰り返しになりますが、ATNDで自分が参加可能かどうかを確認してください。 また、残念ながら来れない方はキャンセルの登録をお願いいたします。  カジュアルPerl #02 (初心者枠) : ATND カジュアルPerl #02 (CPAN Author枠) : ATND  アジェンダPDF  本日のアジェンダのPDFを作りました。 便利かと思うので、参加者の方はみてみてください。githubに置いてあります。   100421_perlcasual02_agenda.pdf   僕への連絡はTwitterで  まぁ、基本ないと思いますが（講師が遅刻するとかね！）、僕への連絡はTwitterでお願いします （午後から直前まで外出しているので）。  yusukebe (yusukebe) on Twitter  懇親会に参加してください  是非懇親会に参加してください！ おそらく、初顔合わせのパターンが多いと思うので、抵抗感ある方もご安心を！ </description>
    </item>
    
    <item>
      <title>cpanmにMETA.ymlに書かれた依存モジュールを渡したい</title>
      <link>https://yusukebe.com/posts/2010/0330204151/</link>
      <pubDate>Wed, 31 Mar 2010 05:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0330204151/</guid>
      <description>  いきなり追記  miyagawaさんからご指摘いただきまして、cpanm本体のコマンドできます！ すばらしす。 $ cpanm --installdeps .   cpanm -h するといろいろ使い方書いてあるので見てみたほうがよかったっすね。 miyagawaさんあざっす。  以下もうすでにあまりためにならない本文  正確には、 CPANに上がっていないようなライブラリの、 META.yml内に書かれたrequiresで指定されたモジュールでかつ、 環境にインストールされていないものを標準出力して、 cpanminusに渡してうはうはしたい、つまり make installdeps 相当のことを cpanm で、 ということなんだけれども。 「つかこのやり方がデファクトだよ！」っていうのがよくわからなかったので、 以下のスクリプトを書いてみた。 #!/usr/bin/perl use YAML::Tiny; print join &#34;\n&#34;, grep { eval(&#34;require $_&#34;); $_ if $@; } keys %{ YAML::Tiny-&amp;gt;read( $ARGV[0] || &#39;META.yml&#39; )-&amp;gt;[0]{requires} };   これをcpan_not_installed.plとかで保存して、 $ cpan_not_installed.pl | sudo -H cpanm   とかってやるととりあえずやりたいことはできてうはうはしてる。 他に方法あれば教えてください＞＜ </description>
    </item>
    
    <item>
      <title>sinatra ライクな micro WAF「Hitagi」を作ってみた</title>
      <link>https://yusukebe.com/posts/2010/0324075607/</link>
      <pubDate>Wed, 24 Mar 2010 16:56:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0324075607/</guid>
      <description>MojaMojaを使ってみてsinatraライクな micro web application framwork に興味が湧いたので、 本家sinatraやMojolicious::Lite、Schenker、Dancerあたりを参考にして 自分なりの micro WAF を言わば「再開発」してみた。 あくまでオレオレ。名前はアニメ化物語がインスパイアで「Hitagi」と言います。   Hitagi - Shall we talk about stars and micro web application frameworks.   日本人の方が(メインの)作者のCPANモジュールを組み合わせてsinatraっぽくかつ簡単な モデルまでサポートさせているのが特徴です。 以下のようにモジュールを使っています。おかげでHitagiのコード量は200行弱に収まりました。  Plack::Request/Response - リクエスト/レスポンス生成 Text::MicroTemplate + Data::Section::Simple - ビュー Router::Simple - ディスパッチャ DBIx::Skinny - モデル(DB)   簡単な使い方、SYNOPSISがこちら。モデルが戦場ヶ原ひたぎなので最後に star; と書きます。 use Hitagi; get &#39;/&#39; =&amp;gt; sub { render( &#39;index&#39;, { message =&amp;gt; &#39;Hi&#39; }) }; star; __DATA__ @@ index &amp;lt;h1&amp;gt;message : &amp;lt;?= $message ?&amp;gt;&amp;lt;/h1&amp;gt;   これをmyapp.plとして保存して perl コマンドで実行すればデフォルト5000番ポートでサーバが立ち上がります。 $ perl myapp.pl   getメソッドでディパッチとそれに対するのコントローラの定義をします。 「__DATA__」以下のデータセクションにText::MicroTemplateの書式でテンプレートを書きます。 renderメソッドがそのテンプレートの処理をしてくれます。 第一引数にテンプレートの名前、第二引数にテンプレートに渡したい値やサブルーチンをハッシュリファレンスの 形式で渡してあげます。するとハッシュのキーの名前を変数名としてそのキーに対する値やサブルーチンをテンプレートの中で扱うことができるようになります。（Text::MicroTemplate::Extendedからパクりました^^）  テンプレートの扱いをちょっと便利にしていて、 「layout」を使いまわすことが可能です。 こう書くと index テンプレートを render すると layout テンプレートでラップしてくれます。 $ perl myapp.</description>
    </item>
    
    <item>
      <title>sinatra ライクな MojaMoja(実験的な) を使ってみた</title>
      <link>https://yusukebe.com/posts/2010/0319051253/</link>
      <pubDate>Fri, 19 Mar 2010 14:12:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0319051253/</guid>
      <description>tokuhirom が面白い名前の（実験的な）sinatraみたいなframeworkを作ってた。   MojaMoja - (PoC)yet another sinatra-ish framework built on CPAN modules  tokuhirom&#39;s MojaMoja at master - GitHub   このモジュールは実験的で且つ、 そのうち（近いうち）、miyagawaさんがある意味似た様なPSGI micro web framework kit「Piglet」というものを出すと思われ、 特にMojaMoja使え！っていうエントリーじゃないのでご了承を。  まぁ何が面白いって、その名前と、 アプリの最後に zigorou;   って書くところですね！ zigorou;って書くと、plackup等で利用可能なアプリケーションハンドラを返してくれます。 使いかたしごく簡単で、 use MojaMoja; get &#39;/&#39; =&amp;gt; sub { return [ 200, [], [&#39;Hello ZIGOROu&#39;] ]; }; zigorou;   と書いた zigorou.psgi を保存して、 plackup zigrou.psgi   として http://localhost:5000/ とかにアクセスすれば「Hello ZIGOROu」が表示されます。 get &#39;/&#39; ...; の部分がルータ/ディスパッチャの役目を果たしているわけですね。 それと面白いのが、__DATA__以下のDATAセクションにテンプレート書ける点ですね。 use MojaMoja; get &#39;/hoge&#39; =&amp;gt; sub { my $req = shift; my $name = $req-&amp;gt;param(&#39;name&#39;); render(&#39;hoge.mt&#39;); }; zigorou; __DATA__ @@ hoge.mt hogehoge &amp;lt;?= $name ?&amp;gt;   という.</description>
    </item>
    
    <item>
      <title>Test::mysqld いい感じ</title>
      <link>https://yusukebe.com/posts/2010/0319015245/</link>
      <pubDate>Fri, 19 Mar 2010 10:52:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0319015245/</guid>
      <description>  もう承知の方は承知かとおもいますが、最近使って感動したのでメモ。 MySQLをDBにもったモジュールのテストにokukazuho wareであるTest::mysqldはすごいいい感じっす。   Test::mysqld automatically setups a mysqld instance in a temporary directory, and destroys it when the perl script exits.  Test::mysqld - search.cpan.org   テストコードの中などで使って、mysqldを全てテンポラリーなディレクトリで立ち上げてくれて、 そのテストが終わったら（ブロックを抜けたら）自動的にシャットダウン＆そのディレクトリものごと削除してくれるという代物。 がががーとほんとに「自動的に」やってくれる感がたまらない。 以下がTest::mysqld付属のテストをダンプ付きでやった時のスクリーンショット。 これでなんとなく雰囲気がわかるはず。   そこで、Kailasのプロジェクトで使いだしました。今のところは 個々のメソッドについては単体のテストスクリプトでテストして、 「usecase」って名前のテストスクリプトでそのAPIを使う全体のユースケースをテストしてみてます。 えっとーFailしてますが（汗）、まぁこんな感じで、シナリオが再現できるので楽しいです。   実はこのモジュール、JPA会長のlestrratさん（牧さん）に教えてもらったのですが、 あの方はMakefile.PLにいろいろ仕込ませてうはうはしているみたいですね。  Test::mysqldとかでテスト走らせる際に行ったいろんな事。 - D-6 [相変わらず根無し]   ということで、まだ使ったこと無い人は一度試してみると楽しいかもですよ！ </description>
    </item>
    
    <item>
      <title>Data::Validator::Simple ってのを作り出した</title>
      <link>https://yusukebe.com/posts/2010/0311063925/</link>
      <pubDate>Thu, 11 Mar 2010 15:39:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0311063925/</guid>
      <description>親父と一緒にやってるBPMに変わる新しいアプリケーション「Kailas」の開発で、 必要になったので Data::Validator::Simple っていうちっちゃいモジュールを作り出しました。 アプリの要求として、「条件分岐」させなくてはいけないところがあって、 その判定に使うってのが作ることになった主な目的です。 条件分岐というと if else 使いますが、それを抽象化して、 特定のルール、例えばその値が範囲内にあるかどうかという「BETWEEN」や、 文字列や数値が一緒かという「EQUAL_TO」などをパラメータと共に渡せば結果が返ってくるという具合です。  というといわゆるFormValidator::*を思い浮かべますし、 実際のところそれを使ってもよかったのですが、 今回特殊なパターンがでてくることを想定したり、 基本的にWebのFormから受け取るようなデータは扱わないつもりなので、 作ってみました。  とはいってもFormValidatorっぽい動きもしたいよねーとも思ったりしたので、 Data::Validator::Simple::Formオブジェクトがその役目を（ある程度）担うようにもできてます。 実践に使ってないのでなんとも言えませんが、その辺りは改良できればします。  まだdeveloper release扱いなので、APIが変わるかもしれませんが、 以下現状のSYNOPSISを解説。  まずは単一なデータの検証。 use Data::Validator::Simple; my $data = Data::Validator::Simple-&amp;gt;new( data =&amp;gt; 5 ); my $result = $data-&amp;gt;check( [&#39;BETWEEN&#39;, 4, 10 ] ); if( $result ){ print &#34;valid&#34;; }else{ print &#34;error&#34;; }   複雑なパターン。checkメソッドに配列で渡せば順番で評価。 渡す値がハッシュリファレンスでかつ評価が成功した場合、その中のsuccessを返します。 successの中身は何でもいいので、この辺りがKailasで生きてくるはずです。 my $data = Data::Validator::Simple-&amp;gt;new( data =&amp;gt; 5 ); my $result = $data-&amp;gt;check( { rule =&amp;gt; [ &#39;EQUAL_TO&#39;, 6 ], success =&amp;gt; &#39;fist_message&#39;, }, { rule =&amp;gt; [ &#39;EQUAL_TO&#39;, 5 ], success =&amp;gt; &#39;second_message&#39;, } ); print $result; # second_message   最後に、FormValidator的に使う方法。 my $q = CGI-&amp;gt;new; $q-&amp;gt;param( id =&amp;gt; &#39;login_id&#39; ); $q-&amp;gt;param( name =&amp;gt; &#39;user_name&#39; ); my %params = $q-&amp;gt;Vars; my $form = Data::Validator::Simple-&amp;gt;form; my $results = $form-&amp;gt;check( \%params, { id =&amp;gt; [ &#39;ASCII&#39;, [ &#39;LENGTH&#39;, 4, 10 ] ], name =&amp;gt; [ &#39;LENGTH&#39;, 4, 20 ] } ); if( $results-&amp;gt;{id} &amp;amp;&amp;amp; $results-&amp;gt;{name} ){ print &#34;</description>
    </item>
    
    <item>
      <title>Perl vs PHP</title>
      <link>https://yusukebe.com/posts/2010/0307003912/</link>
      <pubDate>Sun, 07 Mar 2010 09:39:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0307003912/</guid>
      <description>Perl と PHP の比較をしてみましょう。 私はPHPから入った口ですが、 今は、どちらがよいかというと、個人的な意見としてはやはりPerlです。  それは、PerlにはWebアプリ以外にも使える沢山のモジュールがCPANに用意されており、 PHPのように膨大な標準の関数を使ってせいぜいWebアプリを作るってだけではなく、 モジュールを入れさえすればそれで、CLI含めほぼなんでも出来てしまうからです。  ＊もちろんPHPもCLI作れるけどねー^^;  例えば、PHPの標準のfopen関数でファイル以外にも指定したURLのコンテンツを開けます。 ところが、Perlの場合はそれをモジュールで解決しようとします。 # cpan &amp;gt; install LWP::Simple use LWP::Simple; my $content = get(&#39;http://yusukebe.com/&#39;);   PHPの場合fopen一発でできるところ、Perlではモジュールのインストールからしなくてはいけません。 一見するとめんどくさいですねー^^; ところが、ちょっと発展させて、取得したコンテンツからh2タグの中身一覧を取得するといった複雑な処理を 考えてみましょう。 PHPの場合、どーするかわかりませんが、Perlだと便利なモジュールがあります。 今後、より複雑な処理を行うことを考えWeb::Scraperを使ってみます。 # cpan &amp;gt; install Web::Scraper use Web::Scraper; use URI; my $scraper = scraper { process &#34;h2.entry-title&#34;, &#39;titles[]&#39; =&amp;gt; &#39;TEXT&#39;; }; my $res = $scraper-&amp;gt;scrape( URI-&amp;gt;new(&#39;http://yusukebe.com/&#39;) ); map { print $_ . &#34;\n&#34;} @{$res-&amp;gt;{titles}};  Twib in Yokohama.pm テクニカルトーク#5 実例で学ぶPerlにおけるリファレンス Perl入門本を書こうとしている話 PHPの小文字から始まる関数が4405個もあってびっくりした件 Perl初心者向け勉強会(by カジュアルPerl)をやりますという予告 Twitterの友達が好きなアーティストがわかっちゃったりする「音探し」を作ってみた Twitterで話題のYouTube動画が一目でわかるTubetter - ツベッターを作ってみた CatalystアプリケーションをStarmanで運用しよう！ 3/5 Yokohama.pm #5 が開催されます オススメのIRCチャンネルを教えてください＠人力検索はてな   CSSセレクタやXPathで指定した部分だけを配列に入れてくれたりして便利ですね！ こうした便利ーなモジュールがCPANには沢山あるので、 Perlの場合お好きな方法で楽してより多くの目的を達成することができるのです。  あと、PHPの場合オフィシャルの関数リファレンスを見たりしますが、 Perlの場合perldocというコマンドでモジュールに付属のドキュメントを見たり、 search.cpan.orgでは整形済みのそれを見たりすることができていいですね。 大抵「SYNOPSIS」っていうところのコードを実行すればモジュールの使い方がわかります。  まぁ、サーバの負荷うんぬんってのは状況によってはmod_perl使えばいいですし、 デプロイの話ってのはPSGIが標準化すれば手元で書いたコードがそのまま、レンタルサーバで動くぜみたいなことができるようになると思っています。  それにデバッグもPHPは簡単らしいのですが、 PerlだってData::Dumperモジュールや、YAMLモジュール使えば視覚的に中にどんなデータが入っているかが わかります。 use Data::Dumper; use YAML; # use utf8; my $ref = { name =&amp;gt; &#39;yusukebe&#39;, zokuseis =&amp;gt; [qw(メガネ エロ)] }; print &#34;</description>
    </item>
    
    <item>
      <title>Twib in Yokohama.pm テクニカルトーク#5</title>
      <link>https://yusukebe.com/posts/2010/0306000943/</link>
      <pubDate>Sat, 06 Mar 2010 09:09:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0306000943/</guid>
      <description>  Yokoahama.pm テクニカルトーク#5 に参加＆発表して来ました。 いやー和気あいあいとしていて、かつ初参加の人も結構いたのでよかったですね。 自分は、Twib というサービスを「いかに個人でやりつつ、パフォーマンス上げてくか」 みたいな話を中心にさせていただきました。 今まで記事にしてなかった Twib の裏側現状編という感じです。  スライドはいかにアップしておきました。 Twib in Yokoahma.pm 2010/3/5View more presentations from yusukebe.   注釈としてここで出てくる「取りこぼし」の問題の件なのですが、 これはTwitter APIを頑張って用いても、対象となる全件のツイートを取得するのが無理だという話ですね。 なんとかしたいっすなー。 他の方の発表はみなさん自由な雰囲気がよろしくて、 しっかりとそれぞれのPerlの話をしていました。   内容のログはいつも通り丁寧にhirataraさんがまとめてくていれますので、 参考にしてください。 Yokohama.pmというと我先に！と発表したがっちゃう自分がいますが、 まだ発表したことない！という方も次回はチャレンジしてみたらいかがでしょうかと思いました。  今日は Yokohama.pm #5 の日です - a geek born in Tomakomai  </description>
    </item>
    
    <item>
      <title>実例で学ぶPerlにおけるリファレンス</title>
      <link>https://yusukebe.com/posts/2010/0304011325/</link>
      <pubDate>Thu, 04 Mar 2010 10:13:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0304011325/</guid>
      <description>Perlの文法が大体わかってくるとぶちあたる壁が「リファレンス」です。 Cを既にやっている人ですと「ポインタ」という概念を知っているので、 あまり違和感がないのですが( by lestrrat さん )、個人的にはこいつを理解した時に 「パーと」Perlに対する視界が開けた感じを受けました。 perlcodesampleさんもこう言ってます。   Perlで一番ややこしく感じるのはリファレンスだと思う - サンプルコードによるPerl入門   でまぁ、そんな難しい話ではないし、 慣れれば全てリファレンスで扱うケースもありとのことなので、 コードを交えて解説してみたいと思います。 ツッコミ歓迎です。 ちなみに、僕がリファレンスを理解するきっかけになった「続・初めてのPerl」の例を多いに参考にしています。  これから扱うサンプルは  萌え メガネ ギーク エロ 嫁あり   という5つの人に関する属性があると過程して、 それぞれの人がどのような属性を持っているかをチェックして出力する簡単なプログラムです。 例えば、yusukebe には メガネ エロ という属性がある という具合です。 これから例で示す人名らしき物はあくまで架空のものだと思ってください。 まずは素の配列のみを使ってそのデータ構造を書いてみます。 my @zokuseis = qw(萌え メガネ ギーク エロ 嫁あり); my @miyagawa = qw(萌え ギーク); my @yusukebe = qw(メガネ エロ);   これをそれぞれの人が持っている属性と予め定義された「@zokuseis」の文字列と比較して、 マッチすれば出力するというプログラムは、 何も考えないでやると以下のようになります。 # 配列のみを使った場合 for my $zokusei (@zokuseis) { if ( grep $zokusei eq $_, @miyagawa ) { print &#34;miyagawa is $zokusei \n&#34;; } } for my $zokusei (@zokuseis) { if ( grep $zokusei eq $_, @yusukebe ) { print &#34;</description>
    </item>
    
    <item>
      <title>Perl入門本を書こうとしている話</title>
      <link>https://yusukebe.com/posts/2010/0302213717/</link>
      <pubDate>Wed, 03 Mar 2010 06:37:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0302213717/</guid>
      <description>  あんまこれからやることを書きたくはないと思っていたんだけど、 書いたらよりやる気になると思って書きます。 ていうか書いていいことなのかよくわかりませんが、書きます。  実は、今年の夏発売目標で、Perl入門本を書こうとしています。 某出版社さんから話があったのがきっかけです。 自分はPerlを教えるような立場ではないとは思いつつ、 昔から友達などにプログラミングの楽しさ、特にPerlについてを「うまく」教えたいなとは感じていました。 ということでいい機会なので乗っからせていただいてます。  世の中にはいいPerlの入門本があります。 特にオライリーの「初めてのPerl」と「続・初めてのPerl」は、 個人的に最初の一歩を踏み出すいい機会を与えてくれました。 大学に通っていた時に研究室でいらなくなったともらった「初めてのPerl」の初版がまた面白くって！ さらに、「続・初めてのPerl」ではリファレンスの概念がわかって、 そこからかなりPerlに対して納得がいくようになりました。  ただ、Perl本はあるとして、数が少ないのと、上記した二つは 「語り口調？が難しいすぎる」という問題があって、これはなかなか取っ付きにくいだろーと思います。 それと他の本はどうしても「Perl＝CGI」というペースで解説が進むものになっていて、 これがシンプルに理解をすることを妨げることになっている感じもします。  そこで、基本的には「初めてのPerl」の初版をかなり参考にしながら、CGIはとっぱらって、 自分なりの語り口調で構成案を練っているところです。 基本的なことほど教えるのが難しいと実感しつつ、多くの人に参考になるものしたいと 頑張ろうと思います。  以下にその書籍の企画意図みたいなものを書きますので、 それでこれからやろうとしていることがわかると思います。 執筆をする過程でいろいろな方に協力をしてもらう場面あるかもしれませんが、 よろしくお願いします。  まぁ、ようは 「自分が好きな人達に自分が好きなことを教えたい」 ってだけなんだけどねっ！  以下企画案。  Perlは実用的で「使える！」プログラミング言語です。 元々テキスト処理向けに作られた言語であるゆえ、 世の中に多く存在するテキストベースのシステムの管理に強いのが特徴です。 テキストと言えば、Webもその対象の中の一つで、最近ではmixiやlivedoorといった会社が 大規模Webシステムのバックエンドに採用しています。  また、テキスト整形やファイルフォーマットの変換など、 日常的に発生する業務おいても有効に活用できる機会が非常に多いです。 そして、Perlは実用的であると同時に「楽しい！」プログラミング言語です。 「TMTOWTDI ... There&#39;s More Than One Way To Do It(やり方はいくらでもある)」 というスローガンが表す通り一つのことを叶えるのに様々な記述方法があり、 それゆえに多くのやり方を私たちは見ることができます。 レベルや個人の趣向に応じて様々な楽しみ方があるのです。  また、CPANという仕組みにより先人達が作ったモジュールを再利用して楽をすることが可能です。 例えば、日付扱うモジュール、Webページにアクセスするモジュールなど多数存在し、 一から基本的な機能を記述する必要なく素早くシステムの目的に集中してプログラムを組むことができます。 このようにPerlは「使えて」「楽しい」言語なのです。  ところが、2010年1月現在、RubyやPythonなどの比較的新しい言語に押され、 Perlという言葉を目にする機会が少なくなってきています。 つまり、Perlはもう古い、ということなのでしょうか。確かに、Perlが古い言語であることは事実です。 しかし、だからといって全てのPerlプログラムが今の時代に合わないということはありません。 いわゆるCGIと呼ばれるプログラムの中には冗長な記述の上、パフォーマンスが悪い例があり、 一昔前に氾濫していたふしがあります。 Perlに対する悪評があるとしたら、その印象が強いからかもしれません。 ただ、Perlでも、しっかりとやり方さえ選べばよりモダンで高負荷にも耐えられるシステムを作ることができます。  本書では、現代のシステム開発において冒頭で述べたPerlの「使える！」「楽しい！」といった特徴を多くの方に 享受していただくため、より新しいPerlの入門書として位置づけます。 「やり方はいくらでもある」ために全てを網羅するのはもちろん不可能ですし、 そのような必要もありません。必要最低限のPerlをわかりやすく解説し、Perlの世界への導入としたいと思います。 冒頭ではPerlでのプログラミングの要素を一望できるようにサンプルプログラムを用意し、 簡単な解説をします。そして、後半部分では実用的なプログラムの例を取り上げ、 Perlの「使える！」もしくは「楽しい！」利用方法について紹介したいと思います。 なお、Perl入門本ではよく取り上げられるCGIについては詳しく「扱いません」。 CGIを扱うとPerlプログラムの本質とは離れた部分の説明が多くなるためです。 その代わり、後半部分のサンプルプログラムを掲載する部分で簡単に解説いたします。 さらに、近代の他言語では必須とも言われているオブジェクト指向プログラミングについても 「扱いません」。ただ、オブジェクト、つまりPerlにおけるモジュールの使い方についての記述は 盛り込みます。Perlの入門時においてオブジェクトの作り方までを学ぶとなるとなるとレベルが 本書の想定レベルからは離れるからです。 </description>
    </item>
    
    <item>
      <title>PHPの小文字から始まる関数が4405個もあってびっくりした件</title>
      <link>https://yusukebe.com/posts/2010/0302195123/</link>
      <pubDate>Wed, 03 Mar 2010 04:51:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0302195123/</guid>
      <description>  #perl-casual@freenode で話題になって、 PHPの関数の 機能をPerlで実現するにはどうすればいいのかの対になったリファレンスが欲しいよねー ということになりました。junichiroさんによると需要があるみたいです。 詳しくはYappoさんが書いてくれると思います。 そんで(ちょっとした僕の発言のおかげでWikiHubに迷惑をかけてごめんなさいな感じなのですがすいません＞＜)、 PHPのリファレンスサイトにのってる関数っていったいどんなのがあるんだ！というのを くまなく調べることをしてみました。 あんまPHPよくわかってないのですが、クラスから派生してるっぽい関数は除きつつ、 小文字から始まる関数名の数を公式サイトから数えてみると、 なんと「4405」個もあったよ！  以下がそれを調べるために使えるPerlの簡単なスクレイパースクリプトです。 use Web::Scraper; use URI; my $url = &#39;http://php.net/manual/ja/indexes.php&#39;; my $scraper = scraper { process &#39;dd.indexentry&#39;, &#39;functions[]&#39; =&amp;gt; &#39;TEXT&#39;; }; my $res = $scraper-&amp;gt;scrape(URI-&amp;gt;new($url)); my @fs = grep { $_ =~ /^[^A-Z]/ } @{$res-&amp;gt;{functions}}; print $#fs . &#34;\n&#34;;   perldoc perlfuncでPerlの標準関数を調べると数が220個ほど。 ちょっと何を「標準」と呼んだらいいのかPHPの場合わかりかねますが、 リファレンスサイトに載ってるその数と比べるとだいぶー違いますね。 まぁ、Perlの場合は標準でついてくるモジュールの関数を使ったりしますから、 一概に比較はできませんが、言語の違いってのを改めて感じました。   ちょw、この関数使わないだろw   みたいなのもPHPにはあったりしますが、Perlの場合はそれをCPANモジュールで解決してるわけであって、 組み込みの関数でやるかモジュールインスコしてやるかはそれぞれ利点や不都合な点あるわけで... ただ、Perlの場合は配列を操作する関数であっても、 どちらかというといくつかの関数を組み合わせて目的を達成するのに比べて、 PHPの場合はそれぞれがひとつずつ関数になっている感じは受けました。 僕はやっぱり柔軟なPerlのやり方の方(思想)が好きなーと思います。 自分は、確か、Perlより、PHPの方を最初に触りました。 問題を解決する関数がすぐに見つかればPHPは初心者にとって簡単という印象ですが、 わかってると、少し考えればいかようにも解決ができるPerlの方がいいなという具合です(思想的にね)。 よりスマートなやり方を好めばList::Utilモジュールを使うというような解決策もありますし。  いやーでもこんなたくさんあるとは知らなんだです。 まぁ、使う人が気持ちいい言語を使えばいいと思いましたね！  PHP: 関数一覧 - Manual WikiHub :: php-funcref-in-perl :: README  </description>
    </item>
    
    <item>
      <title>Perl初心者向け勉強会(by カジュアルPerl)をやりますという予告</title>
      <link>https://yusukebe.com/posts/2010/0302044218/</link>
      <pubDate>Tue, 02 Mar 2010 13:42:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0302044218/</guid>
      <description>  今朝、「そろそろ...」とJapan Perl Association会長の牧さんからTwitterで声をかけられて、 一応企画のドラフトまで作りました。 それはどういうことかというと...。 カジュアルPerlのイベントとしてJPAの協力？にて「Perl初心者向け勉強会」を開催します！ 予定ですが、日程は4/21(水曜日)19:00-21:00で、場所はおそらく初台のどこかになると思います。 最後にドラフトのプログラム原稿を貼付けておきますが、 テーマが「CPANとエディタ」となっております。 「CPANってなんぞー」という方を含め、少しでもPerlを勉強したいと思っている方に参加してもらいたいと思います。 内容は、スペシャルゲスト(世界のmさん予定があえば)を含め4人の方を講師に迎え、 それぞれライブコーディングを含めた講義？っぽい発表をみんなで聴くという形になります。 Perlは初心者向けの勉強会が非常に少ないというかそんなの聞いたことないので、 いい機会になればと思っています。 なるべく、常連なPerlerメンツにならないように参加資格を初心者向けに設定し、 ATNDで近日募集を開始しますので、よろしくお願いいたします。 何かご意見あれば、はてなブックマークなりTwitterなりでコメントくれればできる限り反映、リプライしたいと思います。  </description>
    </item>
    
    <item>
      <title>CatalystアプリケーションをStarmanで運用しよう！</title>
      <link>https://yusukebe.com/posts/2010/0217042334/</link>
      <pubDate>Wed, 17 Feb 2010 13:23:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0217042334/</guid>
      <description>Starmanというmiyagawaさんが目下開発中のPerl製Webサーバがあります。 PSGIをサポートして高速であることが特徴です。 おとといにバージョン0.1000がCPANにアップロードされたばかりという新しいものですが、 とあるエロサイトでStarmanを導入したので、その件について 書いてみたいと思います。 ちなみにStarmanについては日本語のドキュメントがほとんどなく、 全体を通して間違ったこと言ってる可能性あるのでツッコミ歓迎です。  PSGI/Plackが熱いと言われる昨今ですが、 miyagawaさんが口を酸っぱく言うように 「PlackはWebアプリケーションフレームワーク」ではなく、 今まで使っていたWAFをPlackが騒がれているからといってそれに置き換える必要はないということを 最初に記しておきます。 自分もPlackを使ってWAFもどきを作っていますが、 大抵のWebアプリに関してはCatalystを使っています。 Catalystはもちろん個人差がありますが一度慣れると開発が非常にしやすいので大好きです。  てなわけで、例に挙げるとある一番アクセスの多いエロサイトはCatalystで開発しています。 で、今回注目したいのはそのアプリケーションのデプロイの仕方です。 皆さん、Catalystアプリはどのように運用してますでしょうか？ 僕は Apache + mod_perl ( Catalyst::Engine::Apache ) というパターンがほとんどです。 中には Lighttpd + FastCGI という組み合わせの方もいるかと思います。 おそらくそれで満足できるものかと思いますし、自分も Apache + mod_perl そして、 フロントに別の Apache を置いて静的コンテンツをサーブさせるというやり方で十分です。 しかし、新しモノ、それにPSGI、Perl製、高速、Starmanという響きに釣られ、 この度、Catalystアプリを Starman で動かすということにチャレンジしてみました。  まずは簡易なベンチマークをとってみましたという報告から。 実際に運用しているApache + mod_perlという環境と、 Starmanで立ち上げた場合、どちらがどれだけ高速か？ そのとあるエロサイトを対象にし、同じworker数になるように調節し、 ab でベンチマークをとると、細かい部分を抜きにして、以下の結果がでました （そもそものアプリが遅いというのはおいといてね）。 Apache + mod_perl - Requests per second: 3.18 [#/sec] (mean) Starman - Requests per second: 4.43 [#/sec] (mean)   Starmanの方が約140% fasterです。 メモリ消費量はそれほど変わりません。 (*追記: CoWで共有されているメモリがあるのでworkerの実消費メモリをみたら少なくなってました＞＜ ) ということでワクワクしながら早速本番投入してみます。  とその前に、CatalystアプリをStarmanで動かす手順について説明します。 StarmanはPSGIをサポートするので、最初にCatalystをPSGI互換にしましょう。 といっても、簡単で「Catalyst::Engine::PSGI」をインストールし、 Helperスクリプトで $ script/myapp_create.pl PSGI   とするだけで、plackupで起動可能な.psgiができます。 つまりCatalystアプリのPSGI化ができたことになり、 上記したWAFを変える必要はないということがなんとなくわかる気がします。 plackupコマンドでももちろん起動できますし、Starmanを入れると $ starman myapp.</description>
    </item>
    
    <item>
      <title>true tears で学ぶ Perl 入門</title>
      <link>https://yusukebe.com/posts/2010/0110120852/</link>
      <pubDate>Sun, 10 Jan 2010 21:08:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0110120852/</guid>
      <description>#!/usr/bin/perl use strict; # おまじない use warnings; use Encode; use utf8; # スカラー my $title = &#34;true tears で学ぶ Perl 入門&#34;; # リスト my @names = qw(Shinichirou Noe Hiromi Aiko Nobuse); # 標準出力 print &#34;Dareni suru?\n&#34;; # 関数 print join( &#39;, &#39;, @names ) . &#34;\n&#34;; # 標準入力 my $name = &amp;lt;STDIN&amp;gt;; # 関数 chomp($name); # エラー処理 die &#34;眞一郎の靴の底にもあぶらむし♪\n&#34; unless $name; # 制御構文, grep, 正規表現 if ( grep { $_ =~ /$name/i } @names ) { # Encodeモジュール, サブルーチンの使用 print &#34;$name: &#34; . encode( &#39;utf8&#39;, talk($name) ) . &#34;\n&#34;; } else { print &#34;Chanto erande yo!\n&#34;; } # サブルーチン定義 sub talk { my $name = shift; # リファレンス my $map = { Shinichirou =&amp;gt; [ &#39;全部ちゃんとするから&#39;, &#39;君の涙を&#39; ], Noe =&amp;gt; [ &#39;私 涙、あげちゃったから&#39;, &#39;はい、ぱちぱちってして&#39;, &#39;ちゃんと言って、ここに書いて&#39;, &#39;なかなか飛べないね&#39; ], Hiromi =&amp;gt; [ &#39;私 何がしたいの&#39;, &#39;おせっかいな男の子ってバカみたい&#39;, &#39;雪が降っていない街&#39;, &#39;何も見てない私の瞳から&#39;, &#39;あなたが好きなのは私じゃない&#39;, ], Aiko =&amp;gt; [ &#39;どうなった？ こないだの話&#39;, &#39;それ なんの冗談？&#39; ], Nobuse =&amp;gt; [&#39;よー&#39;], }; # デリファレンス my @sentences = @{ $map-&amp;gt;{$name} }; # リスト要素の抽出 return $sentences[ rand @sentences ]; }    初めてのPerl 第5版 posted with yusukebe.</description>
    </item>
    
    <item>
      <title>Perlの[ひいきして]10の特徴</title>
      <link>https://yusukebe.com/posts/2010/0110120344/</link>
      <pubDate>Sun, 10 Jan 2010 21:03:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2010/0110120344/</guid>
      <description>  Perlの特徴を考える機会があったので、10個でまとめてみました。 もちろん「ひいきして」という前提です。  ひとつのことを叶えるために様々な記述方法がある。ありすぎるので楽しめるかもしれない。 テキスト処理に強い。そして多くの事柄はテキストで解決できたりする。 CPANモジュールを利用することで、先人達の知恵を借り更なる高みへ到達できる。 Webとの親和性が高く、mixiやLivedoorなど大規模サービスのバックエンドを支えているという実績もある。 Perlをやると、Unix/LinuxやHTTPなどの知識ももれなく付いてくる場合が多い。 CPANをはじめ人のコードを読むことが容易だ。黒魔術的なものあれば美しいものあり読むと面白い。 当たり前のようにタダである。また、その他の環境も無料で手に入るものがほとんどだ。 Perlのコミュニティは各地のxxx.pm（Perl Mongers）などをはじめ活動が活発である。 記述が美しくないが自然言語的で書いていて気持ちがいい...時もある。ご存知ラリーは言語学者である。 スローガンがかっこいい。    「TMTOWTDI ... There&#39;s More Than One Way To Do It(やり方はいくらでもある)」  </description>
    </item>
    
    <item>
      <title>Plack::Requestを使ったプチアプリについて記事を書きました</title>
      <link>https://yusukebe.com/posts/2009/1208022109/</link>
      <pubDate>Tue, 08 Dec 2009 11:21:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/1208022109/</guid>
      <description>  さて絶賛連載中の「JPerl Advent Calendar 2009」ですが、 昨日のCasual Trackに「Plack::Requestとか使って小さなWebアプリを作ろう！」という題名で 記事を書かせていただきました。  アプリのコンセプトについてはRemedie、細かい機能については本体のYouTube、と結構できることがかぶり気味の 「Chekera」なる小さいアプリを作りながら、XML::Feed、Template-Toolkit、そしてPlackまわりモジュールの基本的な使い方を解説しています。  まぁーいわゆる車輪の再開発/再発明な感じですが、それについて lestrratさんがCasual Perl Talks#1の時にこうおっしゃっていました。   「車輪の再開発は楽しい＆勉強になる（ただし、仕事でやってはいけない）」   てなわけで、個人的にはいい勉強の教材になるんじゃないかと思っています。 詳しいことは本編にてご確認ください。  Plack::Requestとか使って小さなWebアプリを作ろう！ - JPerl Advent Calendar 2009  </description>
    </item>
    
    <item>
      <title>今年も開催！ JPerl Advent Calendar 2009</title>
      <link>https://yusukebe.com/posts/2009/1124092629/</link>
      <pubDate>Tue, 24 Nov 2009 18:26:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/1124092629/</guid>
      <description>  tokuhirom が一応主催ってことで今年も「JPerl Advent Calendar」が行われるみたいです！ なんと今回は Hacker Track と Casual Track の2本だてです。  「Advent Calendar」っていうのを最初に知ったのは、 「Catalyst Advent Calendar」を見た時だったんですが、これどういうものかと言うと12月の1日からクリスマスの25日に向けて 毎日一つづ Tips が掲載されるウェブサイトという代物。 去年の「JPerl Advent Calendar 2008」は毎日バトンタッチで筆者が変わっていくという形式で、 僕もエロサイトから画像を収集するワンライナーなんてのを紹介したりしました。 この「Advent」という単語、なんとなく年末のイベントにかかる形容詞かと思っていたのですが、気になって ちゃんと調べてみました。すると「キリストの降臨」という意味があるんですね。 なるほど、合点がいった！  「Casual Track」の方は他の人の作ったモジュールの紹介、Tipsを書くということので、 是非 Casual Perler の方は参加してみてください！ 自分のお気に入りのモジュールについて「こんなモジュールあるよ」「こんな使い方あるよ」「こうするとエロ画像集められるよ」 とかいかがでしょうか。 記事を書く人の受付はATNDで行っています。 ちなみに参加資格を読んでみると「かんかん」「寿司」の文字が見えるのでモチベーションも上がりますね！ ということで今から楽しみです。  技術的アドベントカレンダーの有用性について - TokuLog 改めB日記 JPerl Advent Calendar 2009 - Hacker Track : ATND JPerl Advent Calendar 2009 - Casual Track : ATND  </description>
    </item>
    
    <item>
      <title>「Noe」ってWAFを137%くらい速くした</title>
      <link>https://yusukebe.com/posts/2009/1123195925/</link>
      <pubDate>Tue, 24 Nov 2009 04:59:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/1123195925/</guid>
      <description>僕が運営しているサイトの中で一番アクセスのあるエロサイトがありまして( not YourAVHost! )、 内部的には主に、gearman の worker をキックしたり、履歴を表示するだけの簡単なお仕事をしているサービスです。 公開当初は Catalyst をフレームワークとしていたのですが、 リソースを節約するために現在は Plack ベースの自作超シンプルWAF(?)「Noe」ってのを使っています。  yusukebe&#39;s Noe at master - GitHub   これをより高速化するためにちょいとチューニングをしてみました。 その運用しているサイトではないのですが、Noe のサンプルアプリを対象にして ab で計測してみました。 サンプルアプリは YAML 形式の設定ファイルから変数を受け取り、テンプレートでレンダリングするというものです。 ab は以下のような簡単なコマンドを叩きました。  $ sudo ab -n 100 http://192.168.1.xxx:5000/   では、順を追ってチューニングされる手順を見ていきます。 ちなみに、主に使用しているモジュールのバージョンはこの通りです。  Plack 0.9013 Template 2.20 Text::MicroTemplate 0.10   まずはチューニング以前のものを計測してみます。  Requests per second: 56.72 [#/sec] (mean) Time per request: 17.631 [ms] (mean) Time per request: 17.631 [ms] (mean, across all concurrent requests) Transfer rate: 44.24 [Kbytes/sec] received   最初のチューニングとして、テンプレートエンジンにTTを使用していたので、 これをTTと比べて軽量と言われかつ記法も柔軟なText::MicroTemplate::Extendedに変えてみましょう。  Requests per second: 60.01 [#/sec] (mean) Time per request: 16.664 [ms] (mean) Time per request: 16.</description>
    </item>
    
    <item>
      <title>「Perl Casual Talks#1」が開催されました</title>
      <link>https://yusukebe.com/posts/2009/1122205316/</link>
      <pubDate>Mon, 23 Nov 2009 05:53:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/1122205316/</guid>
      <description>  去る20日金曜日、mixiさんに会場を提供していただき、「Perl Casual Talks#1」が開催されました。 参加者は25名前後、そのうち半数以上の17人！がそれぞれ5分間発表を行いました。 第1回目ということもあり、「空気」をつかむためにも、なるべく多くの人が少ない時間でも発表するという方針でした。 以下が会場の様子です。   5分間という短い時間、また、今回こういう場所での発表が初めてという方が多い中、 なかなかいい感じに「うまくまとまった」発表になりました。 ほとんどの人が参加しぎゅうぎゅうづめで塩ホルモンを食べるという懇親会も含め、 「カジュアル」で「ライト」な(？)Perlerの方々の顔がよくわかったのではないでしょうか。 個人的には xaicronさんにサインを求められ、 人生初サインを書いて喜んでもらい、自分も非常に嬉しかったwというのが印象に残った場面のひとつです。  Yokohama.pm もそうですが、30人ほどのイベントって和気あいあいとして全員の顔が見えていいですね。 あまり人数は膨らませない方向で、かつ、もっと多くの初心者の方も含めたPerlerが参加できるイベントをしていきたいです。 次回は、今回も参加していただいた某Perlハッカーに講師をお願いして、 すっごい「ラフ」な雰囲気での勉強会なんてのを考えていたりします。 例えば、「実践的なテストの書き方」というようなお題を決めて、 講師の方にライブコーディングを含む解説をしていただき、 節目節目でラフに見ている人が質問して答えあうってのが楽しそうかなと思っている次第です。  以下にスライドというほど枚数ないですが、僕が発表した際の資料を貼付けておきます。 ということで、とりあえず皆さんこれに刺激を受けたなら「カジュアルなPerl」をそれぞれ楽しんでいきましょう。 We are カジュアルPerler by yusukebeView more documents from yusukebe.  関連書籍   WEB+DB PRESS Vol.53 posted with yusukebe.com::AmazonSearch on 2009.11.23 大型本 / 技術評論社  Amazon 売り上げランキング: 2822  Amazon.co.jpで詳細を見る       モダンPerl入門 (CodeZine BOOKS) posted with yusukebe.com::AmazonSearch on 2009.11.23 牧 大輔  大型本 / 翔泳社  Amazon 売り上げランキング: 87652  Amazon おすすめ度の平均:  perl経験者は読んで損はしない  Perl中級者におすすめしたい   Amazon.co.jpで詳細を見る     </description>
    </item>
    
    <item>
      <title>Tumblrのパーマリンクから写真を含んでいたらそのURLを取得するスクリプト</title>
      <link>https://yusukebe.com/posts/2009/1019212726/</link>
      <pubDate>Tue, 20 Oct 2009 06:27:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/1019212726/</guid>
      <description>  題名通りなんだけど、こんな感じでしょうか。 拙作WebService::Simpleの模範的な使い方。 use strict; use warnings; use URI; use WebService::Simple; my $permalink = shift || &#34;http://33rpm.tumblr.com/post/211527548&#34;; my $uri = URI-&amp;gt;new($permalink); my $id = $uri-&amp;gt;as_string =~ m!post/(\d+)! ? $1 : die &#34;can&#39;t detect post id!&#34;; my $base_url = $uri-&amp;gt;scheme . &#34;://&#34; . $uri-&amp;gt;host; my $service = WebService::Simple-&amp;gt;new( base_url =&amp;gt; $base_url ); my $res = $service-&amp;gt;get( &#39;api/read&#39;, { id =&amp;gt; $id } ); my $ref = $res-&amp;gt;parse_response(); die &#34;this post does not have photos!&#34; unless defined $ref-&amp;gt;{posts}-&amp;gt;{post}-&amp;gt;{&#39;photo-url&#39;}; for my $photo_url ( @{ $ref-&amp;gt;{posts}-&amp;gt;{post}-&amp;gt;{&#39;photo-url&#39;} } ) { print &#34;$photo_url-&amp;gt;{content}\n&#34;; }  </description>
    </item>
    
    <item>
      <title>Google Analytics API を Perl から扱うスクリプト</title>
      <link>https://yusukebe.com/posts/2009/1018204257/</link>
      <pubDate>Mon, 19 Oct 2009 05:42:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/1018204257/</guid>
      <description>とあるサイトのページビューを日別で出さなくてはいけなくなった。 Google Analytics でアクセス解析してるんだけど、いちいち管理画面でPVを見て書き出すのがめんどくさいので、 API 経由で指定したサイトの過去10日間のそれぞれPVをプリントしてくれる Perl のスクリプトを書いた。 さくっと終わらすはずが、認証のところで少々時間を食ってしまった。  その仕組みは  Client Login で Auth キーを取得、具体的にはアカウント情報をとあるエンドポイントへPOSTする リクエストする時に「Authorization」ヘッダを加えてその Auth キーを値とする GETリクエスト発行 結果がXMLで返ってくるのでパース   という具合。で、パースした結果を最低限シンプルにYAMLモジュールでDumpしてる。  以下がそのおれおれスクリプトになっているので、ご参考までに。 #!/usr/bin/perl use strict; use warnings; use DateTime; use DateTime::Duration; use HTTP::Request::Common (); use LWP::UserAgent; use XML::Simple; use YAML; my $email = $ENV{GOOGLE_EMAIL}; my $password = $ENV{GOOGLE_PASSWORD}; my $source = &#39;yusukebe-GoogleAnalyticsCommand-001&#39;; my ( $req, $res, $auth_key ); my $ua = LWP::UserAgent-&amp;gt;new(); my $xs = XML::Simple-&amp;gt;new( KeyAttr =&amp;gt; [&#39;&#39;], ForceArray =&amp;gt; [&#39;entry&#39;] ); auth(); if ( defined $ARGV[0] ) { if ( defined $ARGV[1] ) { analytic( { profile_id =&amp;gt; $ARGV[0], date_string =&amp;gt; $ARGV[1] } ); } else { my $now = DateTime-&amp;gt;now( time_zone =&amp;gt; &#39;Asia/Tokyo&#39; ); for ( 1 .</description>
    </item>
    
    <item>
      <title>perl-casual.org を立ち上げました</title>
      <link>https://yusukebe.com/posts/2009/1015013605/</link>
      <pubDate>Thu, 15 Oct 2009 10:36:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/1015013605/</guid>
      <description>  YAPC::Asia 後に感じたことをまとめて、 「カジュアルにPerlを楽しもう、そしてカジュアルPerlerは存在感を出そう」 と記事を書きました。 カジュアルの定義は様々だと思いますが、 ライブラリ作者・バリバリPerlハッカーという方々ではなく、 むしろライブラリを使って具体的なアプリケーションを作っていこう、 それも日曜大工的なものも含むというのが個人的に思っている認識です。 記事を書いた後は、 おかげさまで多くのカジュアルPerlerの方とオンラインでコミュニケーションすることができました。 あまりコミュニティという形でくくりたくはなくアドホックな緩いつながりが カジュアルPerlerの間、もしくはライブラリ作者とユーザーの間で生まれればいいなと思っています。 とはいえ、具体的なアクションを起こすのにどうしてもオンラインでの目印が必要になると思い、 いいだしっぺの法則、というか「俺がやるしか」と思い「perl-casual.org」を取得しました。 ホームページのみの運営になります。  perl-casual.org   サイトにも記述がある通り、11月にイベントをやるので、告知エントリをご参考に、是非参加してください。 個人的にはすっごい敷居が低い感じでやるつもりなので、 「今までトークしたことないけど...」という方も心配せずにトークをしていただきたいです。 自ら話すことは、ブログの記事にコードを晒したりすることと似ていて、そして、それ以上に必ず成長するいい機会となります。 ちなみに、まだイベントも含めこの活動？の方向性は不確定な点あるので、 その他Shibuya.pmやYokohama.pmなどといったコミュニティとうまく共存できるようにコンセプトを固めていきたいと思います。 ということで、perl-casual.org をよろしく！ </description>
    </item>
    
    <item>
      <title>multipart/mixedなストリームをPlack/PSGIでpushする</title>
      <link>https://yusukebe.com/posts/2009/1013110232/</link>
      <pubDate>Tue, 13 Oct 2009 20:02:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/1013110232/</guid>
      <description>元ネタがmattnさんがsinatraで作ったものかつ、 さらにmiyagawaさんにコアな部分を教えてもらったということで、 お二人に敬意を示しつつ紹介。  Big Sky :: javascriptで動くtwitter streamクライアントを作るならばmultipart/mixedを使うべき では、Twitter Stream API で取得したTwitterのつぶやきをmultipart/mixedで送出し、 それをdiggで使われているDUI.jsとStream.jsというJSのライブラリで受け取り、表示する方法を紹介しています。  sinatraで実装されているので、Plack/PSGIでも実装できないかと思って作ってみました。  $ plackup -a fast-twitter-stream.psgi --port 8080 -s Coro   で起動します。ServerにはCoroを指定します。 以下が fast-twitter-stream.psgi です。 use Coro; use Coro::Channel; use Coro::AnyEvent; use AnyEvent::Twitter::Stream; use Plack::Request; use Plack::Builder; use IO::Handle::Util qw(io_from_getline); use Encode; my $username = $ENV{TWITTER_USERNAME}; my $password = $ENV{TWITTER_PASSWORD}; my $boundary = &#39;|||&#39;; my $app = sub { my $env = shift; my $req = Plack::Request-&amp;gt;new($env); if ( $req-&amp;gt;path eq &#39;/push&#39; ) { my $queue = Coro::Channel-&amp;gt;new; my $streamer = AnyEvent::Twitter::Stream-&amp;gt;new( username =&amp;gt; $username, password =&amp;gt; $password, method =&amp;gt; &#39;filter&#39;, track =&amp;gt; &#39;twitter&#39;, on_tweet =&amp;gt; sub { $queue-&amp;gt;put(@_); }, ); my $body = io_from_getline sub { my $tweet = $queue-&amp;gt;get; if( $tweet-&amp;gt;{text} ){ return &#34;</description>
    </item>
    
    <item>
      <title>Twitterのタイムラインをcometでリアルタイムに表示する「Tail-F」を実験的に公開しました</title>
      <link>https://yusukebe.com/posts/2009/0926110713/</link>
      <pubDate>Sat, 26 Sep 2009 20:07:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0926110713/</guid>
      <description>以前からやってみたかったことを実験的に公開。 現在できていることは、 URLを含む全世界中の Twitter 発言を日本語で限定してリアルタイムにだらだらと表示するというもの。 Unix/Linux を使っている人はログを tail -f xxx.log もしくは watch | tail xxx.log なんてコマンドで眺めるのと 同じような感覚で Twitter のタイムラインを見ることができると言えばわかりやすいかも！ということで、 名付けて「Tail-F」。     技術的に面白いアーキテクチャになっています。 発言を取得する部分は Twitter の Streaming API 。 ブラウザで閲覧させる部分は comet という技術を使っています。 なので、取得の度に毎回情報を取りにいくいわゆる polling は使用せずに、 long poll といいますか、「つなぎっぱ」の状態を Twitter サイド/表示サイドともに作って利用している形になります。 具体的には、CPAN の AnyEvent::Twitter::Stream、Continuity と二つのモジュールをフル利用しています。 この2つのモジュールのおかげでかなり短いコードで Stream Server を記述できるのです。 開発は github で行っています。  yusukebe&#39;s TailF at master - GitHub   スクリプトレベルでも同じような機能は再現できるので、 試しに書いてみたものを貼付けておきます。 #!/usr/bin/perl use strict; use AnyEvent::Twitter::Stream; use Continuity; use Encode; use utf8; my $user = &#39;username&#39;; my $password = &#39;password&#39;; my $done = AnyEvent-&amp;gt;condvar; my @tweets; my $streamer = AnyEvent::Twitter::Stream-&amp;gt;new( username =&amp;gt; $user, password =&amp;gt; $password, method =&amp;gt; &#39;filter&#39;, track =&amp;gt; &#39;http&#39;, on_tweet =&amp;gt; sub { my $tweet = shift; if( $tweet-&amp;gt;{text} =~ /[あ-んア-ン]/ ) { shift @tweets if( $#tweets &amp;gt; 20 ); push( @tweets, encode( &#39;utf8&#39;, &#34;</description>
    </item>
    
    <item>
      <title>Now, the Plack/PSGI based Application works !</title>
      <link>https://yusukebe.com/posts/2009/0924023319/</link>
      <pubDate>Thu, 24 Sep 2009 11:33:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0924023319/</guid>
      <description>  以前まで Catalyst と DBIx::Class を使って運用していた「YouTubeMP4」というサイトを Plack 、DBIx::Skinny ベースでリライトして先ほどから実運用を始めました。  YouTubeMP4 : Download YouTube Mpeg4 Videos   先日の YAPC::Asia でのセッションを聞いている方はお分かりの通り、 Plack というのは PSGIという仕様 の実装です。 Plack 単体で見れば HTTP::Engine 相当のもので、 HTTP の Request/Response 周りを処理してくれて CGI や mod_perl をはじめ 様々なインターフェースに対して透過的にフレームワークを載せることができます。  miyagawa&#39;s Plack at master - GitHub miyagawa&#39;s psgi-specs at master - GitHub   この Plack を使って必要最低限な Web Application Framework とも言えるかどうかわからないほどの、 小さな WAF を自分で作り、その上に今回「YouTubeMP4」というアプリケーションを書いたという具合です。 この WAF は「Noe」という名前で github にて公開しています。 ちなみに、tokuhirom が作った「nttam」というこれまた Plack ベースの小さなWAFを参考にして作らせてもらいました。 見ればわかる通り、クラスがたった2つ、行数にして150行以下のものです。 Plack は PSGI の実装という意味の他に、 HTTP::Engine と比べても少ないコードでWAFを構築できるのと今回作っていて感じましたね。  追記: HTTP::Engine と比べてっていうのは、plackup などのユーティリティのおかげなので、 一概に「少ないコードで」というのはちょいと語弊がありますね＞＜ Yappoさんツッコミあざっす。  yusukebe&#39;s Noe at master - GitHub   Noe の少ない機能の内訳は、リクエストされたURIに対してどのコントローラクラスのメソッドを呼び出すかと指示する「ディスパッチャ」、 引数を受け取り Template Toolkit で HTML 化してレンダリングする「ビュー」、 リダレイクトやベースとなるURLを得ることができるメソッド郡となっています。 「モデル」部分はアプリケーション毎に書くというのが一応の作法としています。 Mouse ベース、config ファイルの読み込み、テンプレートの拡張子によってラッパーを働かせるかどうかを指定する、 ディパッチャには HTTPx::Dispatcher を仕様するなど、 個人的な嗜好がかなり入っています。 本当に最小限ですが、「YouTubeMP4」のようないたってシンプルな機能を提供するサービスでは、 これで十分動きます。 参考になるのでしたら github のソースをみてください、そして何かあればツッコミください。  また O/R マッパは nekokak さん作の DBIx::Skinny を使うことにしました。 SQL をやはり書きたくない、けれども DBIx::Class はさすがにヘビーすぎると思っていたところ nekokak さんと話していて薦められたので使ってみたらいい感じです。  nekokak&#39;s p5-dbix-skinny at master - GitHub   今回のリライトでどれほどパフォーマンスが上がったかは、内部のロジックを大幅に変えたために 結果がでないのですが、メモリ消費の観点で言うと約 3分の2 以下になっているのを確認しました。 ちなみに Webサーバには lighttpd を使っています。 今後、YouTubeMP4 と同じように「機能はそこまで必要ではなく、かつ、そこそこアクセスの多い」サービスに関して Noe を使った運用も考えていきたいと思います。  こうした小さいけれども一応「WAF」というものは作るのが2度目なのですが、 アプリケーションサーバの機構について知れることだけではなく、 Perl の黒魔術的な一面も考えなくてはいけなかったり、設計について考えさせられたりと いろいろ勉強になります。 Plack/PSGI の急速な開発にあわせつつも、勉強しながら、改良していくつもりです。 上記した通り何かツッコんでいただければ幸いです。 </description>
    </item>
    
    <item>
      <title>&amp;quot;Bridging the gap between writers and users.&amp;quot;</title>
      <link>https://yusukebe.com/posts/2009/0914053140/</link>
      <pubDate>Mon, 14 Sep 2009 14:31:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0914053140/</guid>
      <description>おととい投稿した「Where are Casual Perlers ?」という記事の続編的な扱いで 今回の YAPC での印象的な経験を交えて簡単に綴ろうと思います。 そして、これを持ってして YAPC::Asia 2009 関連の記事の締めとしたい。  ---  私が投稿した記事のリアクションとして宮川さんが、 「On module writers and users」 という題名でエントリーを投稿しました。素晴らしい記事なので、まだ読んでいない方は是非読んでみてください。  私の「カジュアルなPerl Mongersはどこにいる？」という疑問と、 宮川さんのエントリーを読んでいると、しっかりと考えなくてはいけないもう一つのことがあるのに気づきました。 それは「ライターとユーザーとの関係、もしくは溝」です。 今回 YAPC::Asia 会期中にその関係について溝が埋まっていくように思えた瞬間があったので、 そのことについて簡単に紹介します。  私にとって YAPC::Asia 2009での大きな収穫の一つに「rafl」との出会いがあります。 rafl は現在 Catalyst のメインメンテナで、ドイツからやってきた若干23歳の長髪の青年です。  彼と出会ったのは前夜祭が終わって喫煙所で一服をしている時でした。 YAPC のゲストとしてやってきた海外の方であることはわかっていました。 発表が終わった高揚感もあり、英語ですんなりとしゃべりかけることができました。 最初、私は彼のID「rafl」を聞いても、すぐに Catalyst のメンテナのもので オンラインでもよく目にすることに気づきませんでした。 家に返って彼の CPAN などで使われているアイコンを見るなり、 「ああー、この人かー！」と驚いたのです。  喫煙所での話に戻ります。 「Catalyst を使っているか？」という話題になった時に、私は 「5.7 (現在より古いバージョン) を好んで使っているよ」 と答えました。その時はまだ彼が Catalyst のメンテナであることを知りませんでした。 すると彼はいいました。 「Catmooseを使ってくれ (5.8 Catalyst 内で Moose を使っていることからそのように呼ばれている)」 と。また、5.7 から移行した場合にバグがでると思うから、その時にはレポートを送ってくれと。 彼はそのバグを直しよりよいものにしていくから、ということを論理立てて言ってくれました。 「ライターはユーザーの意見を求めている」。 そう感じたのが、この瞬間でした。 そして、バグを恐れず「5.8 を使ってみよう」と思いました。  「ライターとユーザー」その間には大小なり溝があると考えています。 しかし、今回 rafl と出会い、拙い英語でも頑張って話すことにより その溝はかなり埋まり、ライターとしての彼といい関係ができたのではないかと思っています。 宮川さんの記事で、「CPANエコシステム」という単語が出てきます。 モジュールのバグレポートを出すことは通常、勇気が必要になる作業です。 しかし、上記のような出会いがあればそのハードルは低くなり、 CPANエコシステムがうまく循環すると今回感じたのです。  前回の記事での私の主な主張は「カジュアルな Perl Monger として存在感を高めよう」というものでした。 それに加えて今感じるのは、 ライターも カジュアルな Perl Mongers を含んだユーザーも、 積極的に双方に話しかける努力をしようというものです。 カジュアルな Perl Mongers にとって便利でクールなライブラリを開発しているライターは 神のような存在に思えます。 しかし、「神」だからといって話しかけてはいけないとは決してありません。 むしろ「神」と扱うものではありません。なぜならあなたがライブラリとしてのいいアイデアがあれば、 CPAN オーサー つまりライターにはいつでもなれるからです。 そんなライターの方に対して、最初はとても緊張しますが、ユーザーの方は積極的に声をかけるべきかもしれません。 また、ライターの方はユーザーに対してもっと開かれた雰囲気を持つ必要があるかもしれません。 そのことが CPANエコシステムをよりよい方向に持っていく可能性があるのです。  まずはライターもユーザーも個性を含んだ存在感を示すことが大事です。 そして、その次は今回のテーマである「ライターとユーザーとの関係」をうまく築いていくことがテーマとなると思います。 そのための場所はたくさんあります。 YAPC や Shibuya.</description>
    </item>
    
    <item>
      <title>発表資料「IRC HTTP Stream」in YAPC::Asia 2009</title>
      <link>https://yusukebe.com/posts/2009/0914031140/</link>
      <pubDate>Mon, 14 Sep 2009 12:11:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0914031140/</guid>
      <description>  YAPC::Asia 2009 最終日 Lightning Talks にて、飛び込みで「IRC HTTP Stream」という題名で 発表させていただきました。 対応してくれた我らが牧さん、ありがとうございます。 そして、今回もいじらせていただいた宮川さん、ありがとうございます。  まぁ簡単に裏話をいいますと、 宮川さんの真似をして冒頭のウケをとろうとしたけれども、 あとから宮川さんに聞いてみたら 「あれ、俺だったの？」 という返答。 なんかおかしいなと思ったら、どうも全然に似てるとかそういうレベルじゃなくて、 たんなるウザイ謎キャラになっていたらしい。 TwitterとかIRCの過去ログ見るとみんな「イライラ」してるw まぁ、違う形でもウケがとれたのでよかったです。  以下が発表資料になります。これで YAPC::Asia 2009 の資料公開は最後です。 IRC HTTP Stream in YAPC::Asia 2009View more documents from yusukebe.  </description>
    </item>
    
    <item>
      <title>発表資料「Kailas - Yet Another BPM Framework」by Wadit in YAPC::Asia 2009</title>
      <link>https://yusukebe.com/posts/2009/0914022017/</link>
      <pubDate>Mon, 14 Sep 2009 11:20:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0914022017/</guid>
      <description>  YAPC::Asia 2009 コーポレートトラックにて、弊社ワディットが40分の発表をさせていただきました。 現在、弊社、といっても親子二人で開発中の「Kailas」というアプリケーションについてです。 父親がメインで話して、俺はイントロと技術紹介の部分について話しました。  以下に vkgtaro さんに撮ってもらった写真と、発表資料を貼付けておきます( thanks to vkgtaro ) 。 Kailas はもう少し改良・機能追加を行ってプロダクションレベルに近づいたら何かしらの形で、 公開したいと思いますのでよろしくお願いします。  Kailas by Wadit in YAPC::Asia 2009View more documents from yusukebe.  </description>
    </item>
    
    <item>
      <title>発表資料「エロサイト管理者の憂鬱Ⅱ」出張Yokohama.pm YAPC::Asia 2009 前夜祭</title>
      <link>https://yusukebe.com/posts/2009/0914013951/</link>
      <pubDate>Mon, 14 Sep 2009 10:39:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0914013951/</guid>
      <description>  YAPC::Asia 2009 前夜祭、出張Yokohama.pm にて「エロサイト管理者の憂鬱Ⅱ」という題名で20分のトークを させて頂きました。 その発表資料を「内緒だよ♡」な部分を抜かして SlideShare にアップしたので、興味のある方は ご覧ください。ちなみに、この内容に準ずる形でいずれどこかの雑誌に特集として記事になる、かもしれなかったりしてね！ なーんちゃって♪ yusukebe in Yokohama.pm 090909View more documents from yusukebe.  </description>
    </item>
    
    <item>
      <title>&amp;quot;miyagawanize&amp;quot; ( talk in YAPC::Asia 2009 )</title>
      <link>https://yusukebe.com/posts/2009/0913094216/</link>
      <pubDate>Sun, 13 Sep 2009 18:42:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0913094216/</guid>
      <description>Miyagawa-san is one of super geeks! Every Perl Mongers want to write codes like him.  But...  We can&#39;t be Miyagawa-san. Because we lose the &#39;PURPLE THING&#39;. PURPLE THING  This.   This.   I don&#39;t know what is this. But we need this to be like Miyagawa-san.  So, I made the &#39;miyagawanize&#39; script that is very short. miyagawanize.pl #!/usr/bin/perl use strict; use warnings; use Imager; use Image::ObjectDetect; my $file = shift or die &#34;image file path is required!&#34;; my $image = Imager-&amp;gt;new-&amp;gt;read( file =&amp;gt; $file ); my $cascade = &#39;./haarcascade_frontalface_alt2.xml&#39;; my $detector = Image::ObjectDetect-&amp;gt;new($cascade); my @faces = $detector-&amp;gt;detect($file); my $purple_source = Imager-&amp;gt;new-&amp;gt;read(file =&amp;gt; &#39;.</description>
    </item>
    
    <item>
      <title>Where are &amp;quot;Casual Perlers&amp;quot; ?</title>
      <link>https://yusukebe.com/posts/2009/0912030113/</link>
      <pubDate>Sat, 12 Sep 2009 12:01:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0912030113/</guid>
      <description>  俺は「思想」というものを記事にするのはあまり好きじゃない。 けれどもそのポリシーを捨ててでも書きたいと思ったので書いてみる。 問題提起なのでちょっと偏ったものになっていると思うが、 その辺りは加味してもらい意見を頂ければ幸いである。では以下を拝見してもらいたい。 ちなみにYAPC::Asia 2009全体の感想は別で書く。  ---  追記(2009/09/13/01:31 JST)
とりあえず、「Casual Perler」の交流場所として IRC チャンネル perl-casual@freenode を開設しました。お気軽に join してみてくださいね。  ---  YAPC::Asia 2009 は非常に楽しいひとときでした。 今回気づいた「ひとつのこと」を、簡単な問題提起として今回エントリーします。  それは「カジュアルなPerl Mongersはどこにいる？」という疑問です。  私は CPAN Author ではありますが、どちらかというと モジュールを利用する側のアプリケーション開発者です。 それを確認したのはこの YAPC の少し前でした。  YAPCが始まる前に Plack/PSGI というモジュールの開発が急にすごいスピードで始まりました。 私はあるIRCチャンネルを眺めてその状況を把握していました。 自分でも使ってみたいと思い github からソースを取得して POD にあるサンプルなどを動かしていました。 そこで、Plack に関する疑問があったので、発案者の宮川さんに Plack 内部の実装について簡単な質問をしました。 私が期待する答えが返ってきたのですが、そのときに宮川さんにこう言われました。 「一応いっておくけど、Plack 内部の実装についてアプリケーション開発者は気にする必要はないよ」 そこで私は気づいたのです。 私は「アプリケーション開発者なのだな」と。そして私は「アプリケーション開発者でいいんだな」と。  私は今回のYAPC::Asiaで4つのトークをしました。 振り返ると面白いことに一つも「自分が作ったモジュール」の話はありません。 全て「ライブラリの利用」の話でした。 改めて、全体のトークをみてみると「自分が作ったモジュール」もしくは「モジュールの紹介」の話が非常に多いことは確かです。 それは事前にもわかっていて、自分がトークの応募をする時に自分でライブラリを作っていないことに 関して少しのコンプレックスを持っていたのも事実です。 もちろんライブラリ開発者は尊敬されるべきですし、私も尊敬しています。 トークももっと聞いてみたいと思います。 しかし、ここで思うのはライブラリの面白い利用の仕方や事例についてより多くのトーク、 とりわけ企業内でのものではなく個人レベルのものを聞きたいということです。 もしくは、トークでなくてもよいと思っています。 オフラインミーティングの場でもよいでしょう。  私はおかげさまで、多くのPerl Mongersと知り合いになることができました。 しかし、存在感が大きい人の大半はライブラリ開発者です。 私は思います。もっと「カジュアルに」Perl を利用するユーザと知り合いになりたい、話したいと。  Perlは日曜大工の道具としてはもってこいの言語だと私は思います。 多くのCPANライブラリを利用して、少ないコード量で多くのことが実現できます。 現に私がライトニングトークで話したスクリプトは30行程度で書かれています。 面白いアイデアがあれば30行でも新しい価値を生み出すことができるのです。  こうしたライブラリの利用をしている人、つまり「カジュアルなPerler」が多いのか少ないのかはわかりません。 ただ、表に出てきていないことは確かです。  ライブラリはユーザーがいてこそのライブラリです。 それは先ほどの宮川さんの言葉にもあわれています。 つまり、宮川さんはアプリケーション開発者のことを思って PSGI/Plack の開発を行っているのです。 我々ライブラリ利用者はより多くの意見やその利用事例をオンライン/オフラインかまわず 発言することで開発者の方々を助け、また、その改善された効果を得ることができます。  だから、我々はもっと存在感を高めないといけません。恐れる必要はありません。 もっと受け入れられるアイデアを考えて、ライブラリを面白く利用しなくてはいけません。 さらに、そのことにより Perl を知らなかった人々に、Perlの素晴らしさを伝えることができるかもしれません。 なぜなら、Perl を学ぶのにいきなりライブラリは書きません。 ライブラリの利用を通して Perl を学び、面白さに気づくのです。  「カジュアルなPerl Mongersはどこにいる？」 それを私は見つけたいと思います。そして、カジュアルなPerl Mongersがいるとしたら、 もっと存在感を見せつけましょう。  もし、この記事に共感をしていただけたなら、 ソーシャルブックマークやメールなどを通してご意見をいただきたいと思います。 その様子によって、 オフラインミーティングやオンラインでのコミュニケーションの場を作って交流をしていくことは可能です。  Perlは決して難しい言語ではありません。 よりカジュアルにPerlを楽しみましょう。そして、あなたのアイデアについて語りましょう。 </description>
    </item>
    
    <item>
      <title>IRC HTTP Stream (仮) for YAPC::Asia 2009</title>
      <link>https://yusukebe.com/posts/2009/0911000326/</link>
      <pubDate>Fri, 11 Sep 2009 09:03:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0911000326/</guid>
      <description>YAPC::Asia の会場では、無線LANがあるがしかし、IRCのポートは空いていないようだ。 そこで、80番ポート、HTTP つなぎっぱの Stream(?) で IRCの発言を垂れ流すものがあれば苦労しないなと思い、 Plack + AnyEvent でなんとなくスクリプトを作ってみた。 というか、昨日の tokuhirom / miyagawa セッションでのデモを Async な Plack をみていじりたくなったw 一応動くっぽいので、稼働させている。  $ curl http://yapc-stream.pulpsite.net   とかやれば垂れ流れてきます。 が、接続時間の問題とかで途切れたり、複数クライアントの接続があった時にどの程度まで 耐えれるか不明。 とりあえず、ソース張っておきます。 ためしに、講堂の左側にあるスクリーンで映してくれたりすると嬉しいのだが、安定してないので なんともいえない。AnyEvent のドキュメント、読み込んでなくて見よう見まねなので、 おかしなところあると思うのでつっこみ歓迎です。 #!/usr/bin/perl use strict; use Plack::Loader; use AnyEvent; use AnyEvent::IRC::Client; use DateTime; my $channel = shift; my $nick = &#39;irc_stream&#39;; my $impl = Plack::Loader-&amp;gt;load( &#39;AnyEvent&#39;, port =&amp;gt; 8080 ); my $writer; my $cv = AnyEvent-&amp;gt;condvar; my $pc = AnyEvent::IRC::Client-&amp;gt;new; $cv-&amp;gt;begin; $pc-&amp;gt;reg_cb( connect =&amp;gt; sub { my ( $pc, $err ) = @_; if ( defined $err ) { warn &#34;Couldn&#39;t connect to server: $err\n&#34;; } }, registered =&amp;gt; sub { my ($self) = @_; warn &#34;</description>
    </item>
    
    <item>
      <title>Twitterのハッシュタグ付き発言をIRCに投稿するボットをYAPC::Asia向けに作った</title>
      <link>https://yusukebe.com/posts/2009/0909170033/</link>
      <pubDate>Thu, 10 Sep 2009 02:00:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0909170033/</guid>
      <description>前夜祭も終わり(僕の発表した件とかはまた後ほどポスト)、いよいよ明日(というか今日)から YAPC::Asia 2009 開幕！ てなわけでなにかと、Twitter上での YAPC に関する発言が気になったりする わけです。そこで、その状況が IRC 上でわかれば便利かと思い、 これまたコピペで AnyEvent::* を使ったボットを作ってみました。 ハッシュタグ「#yapc.asia2009」「#yapc」を Stream API からトラックして、発言があると その内容をほぼリアルタイムに IRC の yapc チャンネルに投稿します。 ソースはこちら。すっごく敏感でいい娘です♡  あ、ちなみに、前夜祭はトリを務めさせていただきましたが、 なんと明日YAPCほんちゃん1日目のLTでも最後にトークするっぽいので(しかも英語だよ！)、 2日連続トリということになります。なので、お願いいたします。 あ、弊社ワディットのトークも13:45からあるよ。こちらもよろしく！ #!/usr/bin/perl use strict; use AnyEvent::IRC::Client; use AnyEvent::Twitter::Stream; use Encode; my $user = &#39;nanpaman&#39;; my $password = &#39;hogehoge&#39;; my $channel = &#39;#yapc.asia-ja&#39;; my $cv = AnyEvent-&amp;gt;condvar; my $pc = AnyEvent::IRC::Client-&amp;gt;new; $pc-&amp;gt;reg_cb( connect =&amp;gt; sub { my ( $pc, $err ) = @_; if ( defined $err ) { print &#34;Couldn&#39;t connect to server: $err\n&#34;; } }, registered =&amp;gt; sub { my ($self) = @_; print &#34;registered!\n&#34;; $pc-&amp;gt;enable_ping(60); }, disconnect =&amp;gt; sub { print &#34;</description>
    </item>
    
    <item>
      <title>ATNDの参加状況をIRCのチャンネルに投稿するbotをAnyEvent::*で作ってみた</title>
      <link>https://yusukebe.com/posts/2009/0908111227/</link>
      <pubDate>Tue, 08 Sep 2009 20:12:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0908111227/</guid>
      <description>めんどくさいの箇条書き。  YAPC::Asia 2009 前夜祭 出張 Yokohama.pm の参加希望者がもうすぐ100人! ATND で募集してるので、そのページを再読み込みしまくり それ AnyEvent::Feed と AnyEvent::IRC::Client でほぼリアルタイムに #yokohama.pm に流せばいいんじゃね？ 作り始める 楽しくなってくる できたー #yokohama.pm に投入 既に100人定員に達している いまさらすぐるw   というネタ。  ソース。某 typostar さんによれば Superfeedr 使うと polling しなくていいらしいお！ #!/usr/bin/perl use strict; use warnings; use AnyEvent::Feed; use AnyEvent::IRC::Client; use AnyEvent; use Encode; my $channel = &#34;#yokohama.pm&#34;; my $cv = AnyEvent-&amp;gt;condvar; my $pc = AnyEvent::IRC::Client-&amp;gt;new; $pc-&amp;gt;reg_cb( connect =&amp;gt; sub { my ( $pc, $err ) = @_; if ( defined $err ) { print &#34;Couldn&#39;t connect to server: $err\n&#34;; } }, registered =&amp;gt; sub { my ($self) = @_; print &#34;registered!\n&#34;; $pc-&amp;gt;enable_ping(60); }, disconnect =&amp;gt; sub { print &#34;</description>
    </item>
    
    <item>
      <title>YAPC::Asia 2009 前夜祭 で「エロサイト管理者の憂鬱2」という題名で話す</title>
      <link>https://yusukebe.com/posts/2009/0822034452/</link>
      <pubDate>Sat, 22 Aug 2009 12:44:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0822034452/</guid>
      <description>  このところ、様々な小規模ウェブアプリケーションを作ってはこの日記でそのバックエンドの仕組みをいろいろ書いています。 それは、個人でも運用可能でかつ、管理が容易な手法を、今まさに、自分なりにですが確立させようとしているという背景があります。  ただ、それら全てをこの日記で紹介するとなると、膨大ななんちゃって論文のようなものになってしまい兼ねない上に、 めんどくさいので、一連のノウハウを組み合わせて、どうやって個人でも楽しく勉強しながら小規模ウェブアプリケーションを 持続的に作っていけるかという話を Yokohama.pm 出張版 in YAPC::Asia 2009 前夜祭 でさせていただくことになりました。  題して「エロサイト管理者の憂鬱2」です。 といってもエロサイトばかりの話ではなくて、僕が作っているアプリ全てにかかわる話をしていきます。 なのでサブタイトルは 「- How I build, operate, monetize, and tune up small web applications -」 としておきます。 現時点での yusukebe プロダクト構築・運用・マネタイズ・チューニングに関する集大成となる予定です。  YAPC::Asia 2009 前夜祭は 9月9日(水) 東京工業大学大岡山キャンパスにて 18:30から開始です。 YAPC のチケットをお持ちでない方も、別途参加費を払えば入場可能ですので、是非興味のある方、yusukebe ファンの方は お越し下さい。 他に amachang とかいう人の発表があるので、あんなチャラ男には負けないクオリティでプレゼンに挑みたいと思います。  Yokohama.pm 出張版 in YAPC::Asia 2009 前夜祭のスピーカー発表 - Yokohama Perl Mongers Yokohama.pm 出張版 in YAPC::Asia 2009 前夜祭を開催します - Yokohama Perl Mongers  </description>
    </item>
    
    <item>
      <title>YAPC::Asia 2009 で親父が話して俺がデモする</title>
      <link>https://yusukebe.com/posts/2009/0819123242/</link>
      <pubDate>Wed, 19 Aug 2009 21:32:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0819123242/</guid>
      <description>  自分を鼓舞するために書く。  9月10・11日に東工大キャンパスで開催される YAPC::Asia 2009。 親父と二人でやってる弊社ワディットではその中のコーポレートトラックにて 「Yet Another BPM Framework Kailas」という題名で40分のトークをします。 基本的には親父が上流設計部分を含む概要を、ちょろっと俺が内部の技術「How」のところを話します。 そして、紹介するKailasというアプリケーションのプロトのデモをする予定です。  ちょうど明日、「数名に」ながらも、このKailasの現状版を初お披露目します。 出来具合はほんとまだまだ、辛うじて動くちょっとしたコンセプトモデルという状態です。 これをCDD＝カンファレンス・ドリブン・デブロップメントととして、YAPC::Asia 2009 へ向け仕上げていく思案なのであります。  Kailasの実装に着手したのは7月初旬からでした。 弊社ワディットは設立してもう3年経とうとしていますが、実のところそれまでは、 俺と親父は別々のスレッドで仕事をしていました。 俺は基本的にウェブアプリ開発の受託及び、個人での開発。 親父は今回テーマになっている「BPM」関係のコンサル等といった具合です。 親父は起業する以前から業務システムの改善について深い考察を重ねていました。 ある意味、それを実現するためのワディットでもあったわけです。 しかし、コンサルや提案をしていてもなかなかわかってくれなかったり、 アプリケーションを作るところまでいかない現状が目の前にありました。 そこで、 経済状況等、そして俺自身の意思の原因でやれていなかったけれどやりたかったことにチャレンジすることを決めました。 俺が親父のアイデアを実装するということ、つまりKailasを実装することです。  とにかく動くものを作ること。それこそが一番注力しなくてはいけない点だと考えています。 以前までの親父の話を聞いていると抽象的なレイヤーの話ばかりになって実際にアプリケーションに落ちてない。 そして、その新しい概念を受け入れて作るところもいない模様です。 ウェブでもなんでもそうですが、動くものを作ってさらにそのものについて考えていくことが 創造の中で大事なところです。 それができていない親父を見て、改めてかわいそうだと思ったのでした。  俺は、就職をしたことがない上に、実務での開発経験も非常に浅いです。 しかし、学生時代からプログラム以外も含め割と多くのものを作ってきてそれなり評価をいただいたと 思っています。 コードは奇麗じゃないかもしれないけど、とりあえずアイデアを動くものとして形にすることができます。 そしてそのためのアイデアもあります。 だからKailasという親父の信じている、そして俺も共感しているコンセプトを 世の中に知らしめるために動かすことができるのはないかと思いながら今日も朝4時からコードを書いているのです。  もうすでに再設計したい点がでてくるほど稚拙な状況ですが、 とりあえずは動くものを目指して。 YAPC まであと3週間。今まで動かなかった親父の夢をコードにしていきたいと思います。 その内容については、YAPCのセッションもしくは後日公開されるであろうビデオを参照してくださいね。 ちなみに、俺の前夜祭の出張Yokohama.pmでも、今度は俺個人の開発アプローチについて発表する予定なので そちらもお楽しみに！  Yet Another BPM Framework Kailas : YAPC::Asia 2009 - Sep 10-11 in Tokyo, JAPAN Yokohama.pm 出張版 in YAPC::Asia 2009 前夜祭を開催します - Yokohama Perl Mongers  </description>
    </item>
    
    <item>
      <title>Twitterで話題のサイトをはてブ風に並べる「Twib（ツイブ!）」を公開しました</title>
      <link>https://yusukebe.com/posts/2009/0804004601/</link>
      <pubDate>Tue, 04 Aug 2009 09:46:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0804004601/</guid>
      <description>Twitter系サービス怒濤のリリース第4弾。 Twitter上でつぶやかれたURLを収集し、人気順に並べるサービス「Twib（ツイブ!）」 を昨晩より公開しました。 はてな風味ということもありサブタイトルは「Twitter ホットエントリー」となっております。  Twib - Twitter ホットエントリー
  現在の仕様では、トップページにおいて ここ12時間以内で新たにでてきたサイトから、そのURLをつぶやいたユーザーが多い順に並べて表示しています。 また、新着記事は3時間以内、カテゴリー別で「Photo」「YouTube」「ニコニコ動画」という具合に フィルターをかけて人気記事を見ていくこともできます。  各々の個別ページでは、そのURLについてどのようにみんながつぶやいているかを見ることができるので、 いろいろな意見が知れて面白いです。   「ちょw、これはてブでいいんじゃねw」   って感じかもしれませんがw、実際ここ1日動かしてみて、上位にランクインされる記事を見ると、 はてなブックマークとは違う傾向がわかってきました。 今のところその差を言葉ではうまく表すのは難しいのですが、 Twib の方が例えば技術記事などは少なく、どちらかというと庶民的な雰囲気がしますね。 ということで、現在は「押尾学逮捕」の記事満載であります。  さて徐々に仕組みの話に入っていきます。 収集対象となるURLを含んだポストは1日で約3万件にのぼります。 重複を考慮すると実際は2万件程度でしょうか。 そこそこ多くのサンプルから人気記事を算出していることになります。 では、そのURLを含んだTwitterのポストとはいったいどこまでの範囲かと言いますと、 「日本語のつぶやき全て」を範囲としています。  これらのリソースを収集し、整理する点がこのTwibにとってコアの仕組みとなっています。 簡単に紹介してみましょう。 まず、「日本語のつぶやき かつ URLを含んだ」Twitterのポストをどのように拾ってくるかですが、 Twitterオフィシャルの検索サイトからあるキーワードで日本語指定をして、検索。 その結果がフィードどして取得できるためそれを利用しています。 cron で動かすようなフェッチャを作ってもよかったのですが、 今回は AnyEvent::Feed という CPAN モジュールを使ってプログラムを常駐させ、 30秒に一度フィードのエントリーを取得するという方法をとっています。 AnyEvent::Feed は POD にも書いてありますが、一定のインターバルで新しくでてきたエントリを 取得するのに重宝しますね。  It also keeps track of already fetched entries so that you will only get the new entries.
AnyEvent::Feed - Receiving RSS/Atom Feed reader with XML::Feed - search.cpan.org   この AnyEvent::Feed を含んだ FeedReader によって逐一ポストの情報が DB に入る仕組みになっています。 以下が、ちょい汚いけど実際に使っているソースの該当部分です。 sub run { my $self = shift; my $cv = AnyEvent-&amp;gt;condvar; my $feed_reader = AnyEvent::Feed-&amp;gt;new( url =&amp;gt; $self-&amp;gt;url, interval =&amp;gt; $self-&amp;gt;interval, on_fetch =&amp;gt; sub { my ( $feed_reader, $entries, $feed, $error ) = @_; if ( defined $error ) { warn &#34;</description>
    </item>
    
    <item>
      <title>Net::Twitter で簡単に作る Twitter ボットスクリプト紹介</title>
      <link>https://yusukebe.com/posts/2009/0801074127/</link>
      <pubDate>Sat, 01 Aug 2009 16:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0801074127/</guid>
      <description>「なでしこ」って日本語でプログラミングできて、Twitter ボットも作れるんですね！   最近、話題のマイクロブログ Twitter で自動的に発言するプログラム（通称：ボット）を作る方法を紹介します。日本語のプログラミング言語「なでしこ」を使って作るので、専門知識は少しで大丈夫です。面白い（あるいは役に立つ）ボットを作って楽しみましょう。  八角研究所 : 誰でも簡単にできる Twitter ボット作成入門   僕は Perl で Net::Twitter というモジュールを使ってサクッと ボットを作っているいるのでその簡単なスクリプト例を紹介します。  とりあえず、Net::Twitter 便利なので、CPAN からインストールしてください。 そんで今回作るボットは超簡易なものにしました。 スクリプトを実行するとフォローされている人をランダムに選んで、 その人に対してナンパ言葉を適当につぶやく名付けて「@nanpaman」です。   スクリプトはこんな感じだよ！ use strict; use warnings; use List::Util qw( shuffle ); use Net::Twitter; use utf8; my @nanpa_text = qw/ へいname、ちょっとお茶しない？ nameと一緒にTwitterできてぼくは本当に幸せだよ オレの彼女になってくれないかな…好きだよ！ nameにフォローされてからずっと、nameのことばかり考えていました。愛してる 気持ちいいよー。俺が。 /; my $nt = Net::Twitter-&amp;gt;new( traits =&amp;gt; [qw/API::REST/], username =&amp;gt; &#39;username&#39;, password =&amp;gt; &#39;password&#39;, ); if ( my $followers = $nt-&amp;gt;followers ) { my $target_user = shuffle( @$followers ); my $screen_name = $target_user-&amp;gt;{screen_name}; my $text = shuffle( @nanpa_text ); eval { $text =~ s/name/$screen_name/ }; $text = &#34;</description>
    </item>
    
    <item>
      <title>過去のライブイベントの YouTube 映像を検索・一覧できる「PastGig」を作ってみた</title>
      <link>https://yusukebe.com/posts/2009/0712143343/</link>
      <pubDate>Sun, 12 Jul 2009 23:33:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0712143343/</guid>
      <description>  夏フェスの季節ですね。 oasis 見にフジロック行きたいけどチケットありません。 この状態で、24日( oasis 出演日 )を迎えると一人で勝手に嫉妬してしまいそうです。 そこで、少しでも好きなアーティストのライブ模様を追えるようにと、 「PastGig」というサイトを作ってみました。 アーティスト名など検索クエリーを与えると、直近であった過去のライブイベントの情報を取得し、 それと関連のある YouTube の動画一覧がみれて、 クリックするとその場で再生されるというものです。 今朝何となく思いついて、先ほど公開しました。  PastGig
  検索結果の様子
  ある程度有名な海外アーティストじゃないとなかなか当てはまらないかもしれませんが、 一般の観客が自らのビデオカメラで撮影したライブ動画が YouTube の中にはゴロゴロと転がっています。 撮影位置が観客席からなのでやはり見にくいし、手ぶれがひどかったりして、 「なんだこの素人映像」と感じることが結構個人的にあるのですが、 この「PastGig」のように好きなアーティストの直近のライブ映像！となると、 なんか価値があがる気がします。 また、最近のカメラの高性能化も伴って、音声だけはクリアに聴こえるケースが結構あるので、 ラジオ代わりにもなったり、 中にはなかなか見応えのある映像もあったりといろいろ楽しみ方があるかもしれませんね。  ちなみに、 それぞれ映像をクリックして開始して最後まで再生されると、 次の映像が自動的に再生開始されるようになっています。  その場で大画面再生
  実装のポイントとして、なるべく最低限の情報以外は JSON API を利用してサーバに負荷がかからないようにしました。 イベント情報には Last.fm の API を使っているのですが、 公式のサイトでは XML over HTTP の API しか提供されていないので、 Last.fm API Extension という非公式のゲートウェイ API を使用させていただきました。 YouTube はもちろん、GData API 。 共通のフォーマットを複数のインターフェース（ e.g. Atom, JSON, JSONP... ）で利用できるのは、 わかりやすくていいですね。  ということで、若干ニッチな感じもしますが、 「PastGig」。 気になったらチェックしてください。というわけで Enjoy!  PastGig  </description>
    </item>
    
    <item>
      <title>Plagger の Notify Plugin を AnyEvent::XMPP::Client で書いてみた</title>
      <link>https://yusukebe.com/posts/2009/0709012654/</link>
      <pubDate>Thu, 09 Jul 2009 10:26:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0709012654/</guid>
      <description>親父とのプロジェクトのために Trac や SVN の更新を 2人の IM に通知したい。 Plagger を使って Gtalk にポストできるよねと思って、通知の部分に hirose31 さんの書いた Plagger::Plugin::Notify::XMPP を使ってみようとしたんだけど、 モジュールのバージョン不一致のためかなかなか動いてくれない。 そこでお勉強もかねて IM::Engine でも使われている AnyEvent::XMPP::Client を使って、 先ほどのモジュールと同じような動作をする Plugin を作ってみた。  といっても話は簡単ではなく、Perl での非同期系のプログラミングって POE もあまり書いたことないので、 最初結構きょどってしまいまずは単純なサンプルから初めてみることにした。 どんなものかというと、ボットの Gtalk アカウントで 接続して、 5分毎に RSS を読み取り更新があったら、指定した相手にメッセージを送るというもの。 立ち上げ当初での重複チェックはしてないので、最初起動すると一気に RSS のエントリーがポストされるという 甘い作りになっております。 以下がそのサンプルコードです。 #!/usr/bin/perl use strict; use warnings; use AnyEvent::XMPP::Client; use AnyEvent; use XML::Feed; my $last_permalink = &#39;&#39;; my $url = &#34;http://yusukebe.com/index.xml&#34;; my $j = AnyEvent-&amp;gt;condvar; my $cl = AnyEvent::XMPP::Client-&amp;gt;new( debug =&amp;gt; 1 ); $cl-&amp;gt;add_account( &#39;botaddress@gmail.com&#39;, &#39;password&#39;, &#39;talk.google.com&#39;, &#39;5222&#39; ); my $w; $cl-&amp;gt;reg_cb( connected =&amp;gt; sub { $w = AnyEvent-&amp;gt;timer( interval =&amp;gt; 60 * 5, cb =&amp;gt; sub { if( my $text = crawl_rss() ){ $cl-&amp;gt;send_message( $text, &#39;youraddress@gmail.</description>
    </item>
    
    <item>
      <title>静的コンテンツを Amazon S3 でサーブさせるのはなかなかいい</title>
      <link>https://yusukebe.com/posts/2009/0708054905/</link>
      <pubDate>Wed, 08 Jul 2009 14:49:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0708054905/</guid>
      <description>mod_perl などを使ったアプリケーションの場合、 パフォーマンスを引き出すための Web サーバ構成は apache を使った場合最低でも、 「アプリケーションサーバ（e.g. apache with mod_perl）」、 「静的コンテンツをサーブするサーバ」の2つが必要になると思います（ lighttpd とか使ったらまた違うかもしれません）。 ただ、俺の場合この 2つの apache を用意するのが面倒なパターンというのがあって、 例えば先ほどの「sugokuii beta」の場合がそうです。 つまり、  アプリケーションへの負荷はそこそこ高い だが、静的コンテンツは非常に少ない（e.g. jsひとつ、cssひとつ、faviconひとつ） 規模としては小さく、サーバ構成は1台のみ   といった時です。 こうしたケースにおいては、Amazon の S3 を静的コンテンツをサーブするサーバとして活用し、 サーバ内では mod_perl な apache 1台のみを動かすという方法が簡単でよいです。 自分は、debian を使っているので、apt-get でインストールした apache2 を  # /etc/init.d/apache2 start   と付属しているスクリプトだけで動かせるので、これも利点です。 S3 でサーブする時に気になるのはコンテンツのヘッダの設定ですが、 GUI のクライアントでは「Fire Bucket」や「S3HUB」といったものを使えば、 Expires ヘッダなどを設定でき、閲覧者のブラウザにコンテンツをキャッシュさせることができます。 Fire Bucket の場合は Expires の文字列を手動でいれなくては行けないので、 以下のようなスクリプトで 10年後の日付を出力させてコピペしてます。 #!/usr/bin/perl use strict; use warnings; use HTTP::Date; my $ten_years_sec = 10 * 365 * 24 * 60 * 60; my $string = time2str( time() + $ten_years_sec ); print $string . &#34;\n&#34;;   また、S3HUB ではもっと簡単に指定できて、 「Expires ( Far Future ) 」という項目がすでにありますので、これを選べば OK です。 S3HUB は今日から使い始めているのですが、動作も軽快でなかなかよさげです。   さらに、 Amazon Cloud Front を使えばもっと効率的かつ低コストにコンテンツを配信できると思います。 S3 をこうして利用するのは、 小規模サービスでかつ静的コンテンツが少ない場合には有効な手ではないでしょうかね。  Fire Bucket: Amazon S3 manager :: Firefox Add-ons S3Hub: S3 Client (for Mac OS X)  参考文献   Amazon EC2/S3クラウド入門 posted with yusukebe.</description>
    </item>
    
    <item>
      <title>Senna、MySQL 周りの「sugokuii beta」対処法的チューニング</title>
      <link>https://yusukebe.com/posts/2009/0707020233/</link>
      <pubDate>Tue, 07 Jul 2009 11:02:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0707020233/</guid>
      <description>昨日公開した「sugokuii beta」。 ある程度のトラフィックは予想していたものの、 深夜0時を超えた当たりから急に負荷が高くなった。 この深夜0時前後は魔の時間帯と俺は認識していて、 他に俺が運営しているムフフなサイトも23時頃からほんと急にアクセスが増える。 ただ今回の場合は尋常ではなかった。それもそのはず、 某人気おもしろ系ブログからリンクをしてもらったらしく、 いわゆる「スラッシュドット効果」が発生していたのだ。   スラッシュドット効果（スラド効果）、スラッシュドット現象（スラド現象）、Slashdot effectとは、あるウェブサイトがスラッシュドットに紹介されることで、そのサイトへのトラフィック（負荷）が爆発的に増え、サーバの限界を超えてしまうこと。一般的にウェブサイトに短期に爆発的にトラフィック（負荷）発生している状態だけを指すときもある。  スラッシュドット効果 - Wikipedia   ロードアベレージは20弱。上記のスラド現象に加え、今から考えると負荷に対しての「ずぼら」な作りのせいでなり負荷が高い。 ちなみにサーバーは ec2 の一番安い m1.small インスタンス一台ね。  そこで監視すると明らかに Senna を組み込んだ MySQL がボトルネックになっている。 というわけで、午前1時頃から Web アプリも含む以下の対処法的なチューニングを施し、 2時過ぎくらいにはやっと落ち着いてみれるようになので簡単に紹介。  my.cnf の設定を見直してキャッシュメモリを増やす。これは基本中の基本。 以下の DSAS のページが詳しいです。  DSAS開発者の部屋:5分でできる、MySQLのメモリ関係のチューニング！   それでも効果は薄いので、今度はアプリケーション側でキャッシュをさせる。 O/R Mapper には DBIx::Class を使っているので、そんな時は、 DBIx::Class::Cursor::Cached がお気軽で便利。 Cache オブジェクトには、Cache::Memcached::Fast を使用し、 schema を返す Mouse なオブジェクトのコードは以下のようになった。 package SugokuII::API::DB; use Mouse; use Cache::Memcached::Fast; use DBIx::Class::Cursor::Cached; use SugokuII::Schema; has &#39;connect_info&#39; =&amp;gt; ( is =&amp;gt; &#39;rw&#39;, isa =&amp;gt; &#39;ArrayRef&#39;, default =&amp;gt; sub { return [ &#39;dbi:mysql:dbname:localhost&#39;, &#39;user&#39;, &#39;pass&#39; ]; } ); no Mouse; sub connection { my $self = shift; my $schema = SugokuII::Schema-&amp;gt;connect( @{ $self-&amp;gt;connect_info() }, { cursor_class =&amp;gt; &#39;DBIx::Class::Cursor::Cached&#39; } ); $schema-&amp;gt;default_resultset_attributes( { cache_object =&amp;gt; Cache::Memcached::Fast-&amp;gt;new( { servers =&amp;gt; [ { address =&amp;gt; &#39;localhost:11211&#39; } ], } ), cache_for =&amp;gt; 60 * 60, } ); return $schema; } __PACKAGE__-&amp;gt;meta-&amp;gt;make_immutable(); 1;   これで、そこそこ負荷が下がったが、どうもまだ senna の全文検索周りが 遅い。そこでドキュメントを見てみると以下のような記述を発見。   Linux 2.</description>
    </item>
    
    <item>
      <title>CDやアーティスト別にYouTube動画をスライドショー感覚で見れる「ZonTube beta2」を公開しました</title>
      <link>https://yusukebe.com/posts/2009/0615235934/</link>
      <pubDate>Tue, 16 Jun 2009 08:59:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0615235934/</guid>
      <description>以前作った「AmazonとYouTubeの音楽マッシュアップサイト ZonTube」 の新しいバージョン「beta2」を公開しました。 ZonTube beta2 は 音楽 CD のトラック別、 もしくはアーティストの人気の曲別などで YouTube の動画をスライドショー感覚で楽しめるサイトです。 トップページこそ「beta1」に似ていますが、 音楽映像を見るという点でリッチな体験ができるようにユーザーインターフェースを改良しました。 気になった CD ジャケットやアーティスト写真をクリックすると、 それにマッチした YouTube の映像の一覧が表示されるので、 選択すると映像の再生がスライドショー感覚で再生されます。 また、LastFM との連動しているので、もしアカウントを持っていれば、 フォームに自分のユーザー名を入力すれば最近聞いた曲やアルバムも同じように映像とともに見ることができるというサイトです。（注意: 今のところ Firefox と SafariIE に最適化されています )  ZonTube beta2
  使ってみればすぐわかるように心がけて作りましたが、簡単に新機能の説明と使い方を紹介します。 アルバム YouTube 動画 一覧  カテゴリ別閲覧や検索などでみつけたアルバムのジャケットをクリックすると そのアルバムページに飛びます。 すると（情報が取得できれば）、 アルバムの全トラック、それぞれ関係する YouTube の動画をひとずつ一覧で 見ることができます。 アルバム全体を YouTube の動画で構成したらどうなるかを俯瞰する感じですね。 もちろん、気になった曲がある場合、左側のトラック名を選択すればより多くの映像を楽しめます。  YouTube 動画スライドショー再生  今回一番力を入れたのがここです。 YouTube のサムネイル画像をクリックすると、 「うにょーん」とウィンドウいっぱいの画面がでてきて、 自動的に再生が始まります。そして、再生が終わると次の曲が自動的に始まるという仕掛けです。 お分かりの通り Shadowbox という JavaScript のライブラリを使って実現しています。 今まで YouTube で一般的に提供されている embed タグを使ってこのような埋め込みを実現していましたが、この機能を使ってでっかく動画を表示させると大迫力ですごくいい感じです。  ダウンロード＆ListPodに追加機能  気にいった動画があれば、YouTubeMP4でダウンロードしたり、ListPod のマイリストに登録しましょう。 ワンクリックで飛ぶようにしました。 もちろんもっと気に入ったら CD も買うことを忘れずにしましょうね。  LastFM との連動  今回は「Amazon x YouTube」というマッシュアップに加え、Last.fm も連動させるようにしました。 Last.fm アカウントをお持ちの方は上のフォームにアカウント名を入れると、 自分が最近聞いている曲やアルバム、アーティストの一覧がでるので、 上記した通り同じように音楽を YouTube 映像とともに楽しむことができます。  Cooliris 対応  これはおまけ的な機能。 Cooliris という Firefox の addon で、ちょーかっこいいスライドショーが体験できる ソフトがあるのですが、それに対応しています。 アルバム、アーティストページで「Launch Cooliris!</description>
    </item>
    
    <item>
      <title>Bing API を使って、検索した動画と画像がアダルトかアダルトじゃないかがわかる「AdultOrNot」を作ってみた</title>
      <link>https://yusukebe.com/posts/2009/0615060611/</link>
      <pubDate>Mon, 15 Jun 2009 15:06:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0615060611/</guid>
      <description>  ちょっと前に作ったのに出してなかったせいもり、若干旬を逃した感がありますが、 Microsoft の新しい検索エンジン「Bing」の API を使って、 キーワードで検索した結果の動画もしくは画像が「アダルト」か「アダルトじゃないか」を判定して、 色別で見れる「AdultOrNot」というサイトを作ってみました。 つまり、  「全ての検索結果 - セーフサーチ(制限あり) = アダルト?」
かどうかを Microsoft の新しい検索エンジン Bing の API を使って試すサイト   です。  昔、Yahoo! の検索 API を使って同じような試みをしている方がいましたが、それと同じです。 てなわけで、やりようによっては「アダルトな」動画や写真を集めるのに使えるかもしれませんね。 例によって、18歳未満の方は立ち入り禁止につき、本家の Bing で検索を楽しむようにしてください。  AdultOrNot
  ちなみに、作ったきっかけがありまして、普段あまり自分にはフックしない Techchranti に掲載された 「Bingは最高のエッチ系検索エンジンだった」という題名のわくわくする記事を読んだからでありましてー、 それから、衝動にかられて1日ちょっとで作った次第です。  Bingは最高のエッチ系検索エンジンだった   細工として、単に検索フォームがあるだけでは寂しい、ってかどうせならエッチ系のキーワードでどんどん検索したいので、 そのために「Interesting Words」として日本のAV女優名とエロキーワードをランダムで表示させるようにしました。 辞書は、秘蔵っ子の「Acme::JapaneseAvActress」と「Acme::AvGenre」というモジュールから作りましたので、かなりの種類の単語がでてきて面白いです。    実際に使ってみてですが、かなりのエロコンテンツがでてきてびっくり。 動画についてこの Bing。 ダウンロード視聴できるリソースは片っ端からインデックスしているみたいで、YouTubeの隠れたエロ動画はもちろん、 マイナーな AV女優さんの名前で検索しても、名の知れない DVD 屋さんのサンプルムービーが出てきたりするところがいいです。 もし、動画の検索結果があまりでてこない単語でも、イメージで検索してみると豊富にコンテンツがヒットしますね。 また、アダルトと判定されてない、つまり制限ありのセーフサーチの結果としてでてくるものもアダルティだったりといろいろと発見があります。   この「AdultOrNot」。現在のところ検索結果を100件以内に制限していたり、精度が多少悪い？（なぜか結果がマイナスだす時がある）かったりしますが、暇つぶしにでも使ってくだされば幸いです。  AdultOrNot  </description>
    </item>
    
    <item>
      <title>VeohのURLに「mp4」をつけるだけでMP4形式でダウンロードできる「VeohMP4」を作ってみた</title>
      <link>https://yusukebe.com/posts/2009/0527025754/</link>
      <pubDate>Wed, 27 May 2009 11:57:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0527025754/</guid>
      <description>  ネタフルさんに、去年作った「YouTubeMP4」をいまさら紹介してもらって、びっくりしている今日この頃。   [N] YouTubeのURLに「mp4」をつけるだけでMP4形式でダウンロードできる「YouTubeMP4」    そこで、個人的なニーズもあり、Veoh 版 の 「VeohMP4」ってのも作ってみた （といっても、前から作ってあったのを公開してなかっただけで、 ネタフルさんの記事が出てから作ったわけじゃないっすよー）。 ちなみに、この記事のタイトルはネタフルさんのパクリでおおくりしています。  VeohMP4
  使い方は「YouTbeMP4」と同じ。フォームに Veoh のビデオURLを入力すると、 ダウンロードリンクが表示されるので、それを右クリックして保存するなりして、ダウンロードしてください。 形式は iPod に最適化された mpeg4 形式になっています。 また、タイトル通り、Veoh のビデオページにて、以下のようにURLへ「mp4」をつけると自動的に ダウンロードページへ飛ぶようになっています。  http://www.veoh.com/browse/videos/category/music/watch/ビデオのID to http://www.veohmp4.com/browse/videos/category/music/watch/ビデオのID   ただ、残念なのは、Veoh って外部の動画共有サイトとも提携してそこの動画も見れるようになっているんだけど、 そのうちのMTVからのビデオ等はさすがにダウンロードすることができませんのであしからず。  このサービスを作るにあたって、副産物として「WWW::Veoh::Download」というPerlのモジュールもできました。apikey が必要ですが、こんな感じでダウンロードできます。 use WWW::Veoh::Download; my $client = WWW::Veoh::Download-&amp;gt;new( api_key =&amp;gt; &#39;your_api_key&#39; ); $client-&amp;gt;download( &#39;vXXXXXXXXXXXXXXX&#39;, &#39;veoh.mp4&#39; );   使いたい人はそちらもチェックしてみてください。  Yusuke Wada / WWW-Veoh-Download - search.cpan.org   ところでこのサービスはとある目的への布石でしかない…かもね！ </description>
    </item>
    
    <item>
      <title>複数の Catalyst アプリ を複数の apache でサーブさせる .conf</title>
      <link>https://yusukebe.com/posts/2009/0526034559/</link>
      <pubDate>Tue, 26 May 2009 12:45:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0526034559/</guid>
      <description>実践投入前の自分のメモもかねてのエントリー。 以前、複数の Catalyst（等） アプリの運用について「lighttpd いい」と書きましたが、 やっぱり apache＋mod_perl の運用もありかなと思いました。 apache＋mod_perl の場合、 プロセス管理が lighttp と比べてやりやすい＆楽というのが理由です。 複数のアプリをサーブしたい場合でも、すごくシンプルに設定を記述できる ってのが lighttpd の利点のひとつですが、 apache も工夫をすれば、そこまで煩雑にならずに複数アプリを起動することができそうです。  方針としては、アプリごとに conf を書いて、ポート別に apache を起動、 フロントの 80番の apache がリバースプロキシ及び静的コンテンツ向けサーバになる、 というものです。 httpd のポートがたくさんできちゃうのが多少気持ち悪い感じしますが、 番号の管理だけちゃんとしてれば、まぁいいかなぁと思います。  一番最後に、運用も視野に入れた必要最小限の conf ファイルのサンプルを貼付けておきます。 myapp_httpd.conf を使う場合、 $ sudo apache2ctl -f myapp_httpd.conf   としてアプリ別に apache を起動しています。 テストマシンで試験してる段階ではこれで問題はないようです。 以下の例、myapp_httpd.conf の Global Settings に当たる部分は、 アプリケーション間で共通に使うことができるので、 別ファイルにして Include したほうが管理しやすくなりますね。 では conf ファイル。  myapp_httpd.conf # Global Settings User www-data Group www-data Timeout 300 KeepAlive Off HostnameLookups Off LogFormat &#34;%h %l %u %t \&#34;%r\&#34; %&amp;gt;s %b \&#34;%{Referer}i\&#34; \&#34;%{User-Agent}i\&#34;&#34; combined CustomLog /var/log/apache2/access.log combined LoadModule perl_module /usr/lib/apache2/modules/mod_perl.so LoadModule rpaf_module /usr/lib/apache2/modules/mod_rpaf-2.0.so RPAFenable On RPAFsethostname Off RPAFproxy_ips 127.</description>
    </item>
    
    <item>
      <title>Fixed bug on WebService::Simple::Google::Chart 0.04</title>
      <link>https://yusukebe.com/posts/2009/0523121942/</link>
      <pubDate>Sat, 23 May 2009 21:19:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0523121942/</guid>
      <description>  またまた、コメントより。 今回は、WebService::Simple::Google::Chart の紹介記事にて、頂きました。   color99 さん:  コードサンプル通りで動作確認しようとしたら、
Odd number of elements in hash assignment at xxxxx というエラーメッセージが出ます。   う、ごめんなさい。それバグです＞＜ 修正して、CodeRepos にコミット済み。また、ヴァージョン 0.05 として、 CPAN にもアップしておきました。そのうち更新されると思います。 ということで以下のサンプルが動きます。 use WebService::Simple::Google::Chart; my $chart = WebService::Simple::Google::Chart-&amp;gt;new; my $url = $chart-&amp;gt;get_url( { chs =&amp;gt; &#34;250x100&#34;, cht =&amp;gt; &#34;p3&#34;, }, { foo =&amp;gt; 200, bar =&amp;gt; 130, hoge =&amp;gt; 70 } ); print $url . &#34;\n&#34;;   Yusuke Wada / WebService-Simple-Google-Chart - search.cpan.org  </description>
    </item>
    
    <item>
      <title>WebService::SimpleとXML::Simpleのあまりシンプルではないやり方</title>
      <link>https://yusukebe.com/posts/2009/0523111441/</link>
      <pubDate>Sat, 23 May 2009 20:14:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0523111441/</guid>
      <description>WebService::Simple の紹介記事にて、こういうコメントを頂きました。   tf0054さん :  WebService::Simple、とても便利に使わせて頂いています！  Perlがさほど分かっているわけではないので間違っているかもしれないのですが、中でXML::Simpleするとき、ForceArrayなどオプションが(パーサ差し替えが可能となった時点から?)与えられなくなっているように思うのですが。。  何か別の方法で対処可能なものでしょうか。   お、使って頂いてあざーす！対処の方法ありますよー。 ですが、これ、「Simple」を冠する WebService::Simple と、XML::Simple にあまりふさわしくない 若干複雑なコードになっちゃってます。YouTube の GData API からキーワード検索をして、 マッチしたビデオのリンクを出力する簡単なサンプルを掲載するのでこちらを参考にしてください。 ようは、XML::Simple の OO オブジェクトをオプション付きで作って、 WebService::Simple::Parser::XML::Simple のコンストラクタに渡して新しくパーサーを作り、 それを WebService::Simple の response_parser として指定しています。 って、こうやって書いててもわかりにくいか＞＜ use WebService::Simple; use WebService::Simple::Parser::XML::Simple; use XML::Simple; my $keyword = shift || &#39;perfume&#39;; my $xs = XML::Simple-&amp;gt;new( KeyAttr =&amp;gt; [], ForceArray =&amp;gt; [&#39;entry&#39;] ); my $service = WebService::Simple-&amp;gt;new( base_url =&amp;gt; &#34;http://gdata.youtube.com/feeds/api/videos&#34;, param =&amp;gt; { v =&amp;gt; 2 }, response_parser =&amp;gt; WebService::Simple::Parser::XML::Simple-&amp;gt;new( xs =&amp;gt; $xs ), ); my $res = $service-&amp;gt;get( { &#39;q&#39; =&amp;gt; $keyword, } ); my $ref = $res-&amp;gt;parse_response(); for my $entry ( @{ $ref-&amp;gt;{entry} } ) { print $entry-&amp;gt;{link}-&amp;gt;[0]-&amp;gt;{href} .</description>
    </item>
    
    <item>
      <title>壊れた Premiere (映像編集ソフト) のプロジェクトファイルが XML::Liberal (Perlモジュール) で直った</title>
      <link>https://yusukebe.com/posts/2009/0127232002/</link>
      <pubDate>Wed, 28 Jan 2009 08:20:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0127232002/</guid>
      <description>  KC とはるみ姉さんの結婚式が31日にあるんだけど、その式や2次会で流す映像をいくつか頼まれて作っている。 映像編集ソフトは大学の頃から使ってる Premiere を使用する。で、まぁ KC、はるみ姉さんと確認とりながら作ってたんだけど、問題が発生。おそらく、いきなりブレーカーが落ちて PC が強制的にシャットダウンしたりってのが、原因だと思うんだけど、Premiere のプロジェクトファイルが急に開けなくなった。
  「プロジェクトが壊れているため、開けません」   と怒られる。うわー＞＜   今までの苦労が水の泡かよ、と思ったが、それが直った。Perl を使って。  Premiere のプロジェクトファイルというのは直接テキストエディタなどで見る限り、 XML 形式になっている模様。うんで、壊れたプロジェクトファイルを Firefox で開くと XML のパースエラーが出る。他の正常なファイルはエラーが出ない。   ということは、なんとかして壊れたプロジェクトファイルを「well formed」な XML にすればいいじゃないのか！と思ったわけ。そこで活躍したのが「XML::Liberal」という miyagawa プロダクトな Perl モジュール。   Super liberal XML parser that parses broken XML  Tatsuhiko Miyagawa / XML-Liberal - search.cpan.org   つまり壊れたXMLでもパースできちゃうかもしれないという代物。 早速、以下のような捨てスクリプトを書いたら、パースできてかつ「well formed」なXMLも出力してくれた。 そして、しっかりとPremiere で読めた！ use strict; use warnings; use XML::Liberal; my $parser = XML::Liberal-&amp;gt;new(&#39;LibXML&#39;); open my $fh, &#39;&amp;lt;&#39;, &#39;endroll_copy.prproj&#39;; binmode $fh; my $doc = $parser-&amp;gt;parse_fh($fh); open my $out, &#39;&amp;gt;&#39;, &#39;out.prproj&#39;; binmode $out; print $out $doc-&amp;gt;toString();   すげー。あっさりいってびっくり。miyagawa++ まさか映像編集のために Perl 使うなんておもわなんだｗ 最近では、今回の Premiere のようにプロジェクトファイルや設定を XML で記述するケースって多いと思うので、それがぶっ壊れたら、XML::Liberal で直るかもしれませんね。 さて映像編集を再開します。 </description>
    </item>
    
    <item>
      <title>CGI で受け取ったコメントを Twitter にポストする</title>
      <link>https://yusukebe.com/posts/2009/0121192636/</link>
      <pubDate>Thu, 22 Jan 2009 04:26:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0121192636/</guid>
      <description>ギークなお姉さんは好きですか TwitterにRSSフィードを自動投稿してくれるアカウント作った！ より   Twitterを使ってもっと何かしたい  今は feed.xml を POST してるんだけど、TwitterFeed を使ってほかにも何かできないかなぁ。 …
TOP ページに「 geekDB に話しかけてみる！」というメッセージフォームを置いて、 @geekDB をデフォでテキストボックスに入れておくとか。  …  やはり手始めは @geekDB がいいだろうなぁ。ハタからみたら自己レスになるが。   まじ自己レスして何がしたいんだかよくわからないが、それ、Perlなら10行で書けるお（ モジュール使えばだけどね ）。 #!/usr/bin/perl use strict; use warnings; use CGI; use Net::Twitter; my $q = CGI-&amp;gt;new; my $comment = $q-&amp;gt;param(&#39;comment&#39;); # TODO : show error message if comment is blank my $twitter = Net::Twitter-&amp;gt;new( username =&amp;gt; &#34;yourusername&#34;, password =&amp;gt; &#34;yourpassword&#34; ); my $result = $twitter-&amp;gt;update( &#34;\@geekDB &#34; . $comment ); # line : 10 __END__ some message ...   PHP はわかりません＞＜ でも、danさんをコンパイルして、もっと喜ばせるためには Perl の方がいいかもね！  ちなみに、Perl について学びたかったら最初は「初めてのPerl」＋「続・初めてのPerl」がいいけど、 その次に読む本として、もうすぐ発売される「モダンPerl入門」もお勧めだと思うよ！</description>
    </item>
    
    <item>
      <title>鎌団子にPerlを教える「スクレイピング編その1」</title>
      <link>https://yusukebe.com/posts/2009/0120043705/</link>
      <pubDate>Tue, 20 Jan 2009 13:37:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0120043705/</guid>
      <description>鎌団子が Perl を始めた。「初めてのPerl」を夜な夜な読んでから寝ているらしい。  昨日は久しぶりにオモロキオフィスに行って鎌団子と会ったので、 「じゃあ、お勉強もいいけど実際に Perl のコードを書こう」ということになった。 コードを書く前にどんなものを作りたいかが重要なんだけど、 いろいろ話していくと最初は Webページや Web API 等 から情報取得をしたらいいじゃないかとまとまった。  そこでとりあえず「ボケて」の自分のボケページから、ボケに対する星をつけてもらった数の合計（1ページ内にボケがいくつか表示されているのでそれの合計）を数えるプログラムを作ることにした（リンク: 鎌団子のボケページ）。 「それ、データベース持ってんだから直接読めばいいんじゃね」と思いつつ、スクレイピング、 つまり Web ページから情報を引っこ抜いてくる手法を試してみることにした。 ボケてのページを再確認したところ、Web::Scraper を使うほどあまり構造化されていないことに 気づいたので正規表現を使う方向でやってみる。  そんな具合で、サンプルコードを書いてみて解説をした。 自分でいきなり書くのはさすがに難しいし、時間もかかる。最終的には自分でモジュール探したり、もしくは自分で書いたりして作っていくべきなんだけど、いいきっかけになるかなぁと。 で、1行1行といってもそんな量ないんだけど、説明してみたらそこそこ納得してもらった様子である。  自分もまだ勉強中の身であるが、このくらいだったら教えられるんだなと思ったり、 Perl ってモジュールうまく使えばコード量かなり減らせるんだと気づいたり、個人的にも面白かった。  プログラミングはきっかけが大事なので、鎌団子だけじゃなくてこの日記を見てもらっている人にも、その機会になればすごく嬉しい。 ということで以下がサンプルコード、とコメントつきのサンプルコード。 鎌団子にPerlを教えるがシリーズ化するかもしれないということでとりあえずそれに対応できるタイトルにしてみたので、続きがあるかもねー。  コメント無し use strict; use warnings; use Encode; use LWP::UserAgent; use Perl6::Say; use utf8; my $url = &#34;http://bokete.jp/user/kamadango/boke&#34;; my $ua = LWP::UserAgent-&amp;gt;new; my $res = $ua-&amp;gt;get($url); my $content = $res-&amp;gt;content; $content = Encode::decode( &#34;utf8&#34;, $content ); my @counts = $content =~ /★の合計.*?(\d+)/gm; my $total = 0; for my $count (@counts) { $total += $count; } say &#34;total: $total&#34;;   コメントあり use strict; use warnings; use Encode; use LWP::UserAgent; use Perl6::Say; use utf8; # ボケて kamadango ボケページ の URL my $url = &#34;</description>
    </item>
    
    <item>
      <title>YourAVHost の Tube8 版「TubeERO - iPhone・携帯でも見れるよ」を作ってみた</title>
      <link>https://yusukebe.com/posts/2009/0119004313/</link>
      <pubDate>Mon, 19 Jan 2009 09:43:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0119004313/</guid>
      <description>  YourFileHost の次は「Tube8」が来るらしい。 ということで、YourAVHost の Tube8 版である「TubeERO」ってのを作ってみた。 YourAVHost と違う大きな特徴は、iPhone 及び 携帯 でも閲覧できて、 動画も見ることができる（かもしれない）ところ。 これで、トイレに一人隠れてうはうはすることもできますね。  TubeERO http://tubeero.com/
 *注意 アダルトコンテンツにつき18歳未満立ち入り禁止。あといきなりモロ画像が見えちゃってたりするので、そういう耐性が無い人はご遠慮ください。     同じアドレスで iPhone、携帯からもアクセスできるはず。 以下 iPhone で TubeERO を見た様子。  毎度の女優タグを表示
 動画ごとにある「3gp」というリンクをタップすると...（携帯の場合はサムネイルを選択してください）
 QuickTime が起動して、動画が再生された！
 実機がないので、確認取れてませんが、エミュレータ・Moxy では 携帯でも見れることを確認してます。  以前から「iPhone でエロ動画見たいー」という意見を聞いていたので、 どのように活用されるか気になるところ。 Tube8 はまだコンテンツが少ないですが、ちょっとずつ更新されているので、エロい方はお試しください。  実装の基本、クローリング部分に関しては、YourAVHost とほぼ同じやり方でやってます。 YouAVHost での情報源は technorati を使っていますが、今回は google blog search を使ってます。 また、ロジック部分を完全にモジュール化して、Moose で書いたので比較的綺麗な構造になりました。 いまさら、Moooooooooooooooooooooooooooooooooose！楽しいです。  Enjoy! </description>
    </item>
    
    <item>
      <title>Flickr からキーワードにマッチした写真を一括ダウンロードする Perl スクリプト「flickr_fetcher.pl」</title>
      <link>https://yusukebe.com/posts/2009/0103052744/</link>
      <pubDate>Sat, 03 Jan 2009 14:27:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0103052744/</guid>
      <description>昨日の夜、むしょうに「磯山さやか」の画像をたくさん見たくなって、 Flickr からキーワードにマッチした写真を一括でダウンロードする Perl のスクリプトを作ってみた。   flickr_fetcher.pl    使い方はこんな感じ。  $ ./flickr_fetcher.pl --keyword 磯山さやか --dir sayaka --api_key yourflickrapikey   すると、sayaka というディレクトリが無かったら自動的に作ってくれて、 Flickr 内でマッチした 総写真枚数 が表示されます。  $ ./flickr_fetcher.pl --keyword 磯山さやか --dir sayaka --api_key yourflickrapikey search keyword : 磯山さやか total count : 760   760枚もあるんですね。そして、勝手にダウンロード開始。  try to fetch : 200 OK : http://farm4.static.flickr.com/3285/3112920048_531a88761b_b.jpg try to fetch : 200 OK : http://farm4.static.flickr.com/3213/3084174182_463f9bd410_b.jpg try to fetch : 200 OK : http://farm4.static.flickr.com/3187/3067816386_f242e15580_o.jpg try to fetch : 200 OK : http://farm4.static.flickr.com/3280/3042192731_3ca24c0a5b_o.jpg try to fetch : 200 OK : http://farm4.static.flickr.com/3009/3042961088_cc993ba07d_b.jpg   Flickr の写真っていろいろサイズがあるけど、一番大きなサイズのものをダウンロードしています。 しばらく待つとダウンロードが終わって、sayaka ディレクトリには760枚の画像が。 これはいい。今いろんなグラビアアイドルの写真を取って来まくっています。 ちなみに、コマンドの引数に Flickr の api_key を渡さなくてはいけませんが、 環境変数に「FLICKR_API_KEY」が設定されていれば指定しなくて OK です。   もちろんエロっちいーこと以外にも使えます。 ダウンロードする写真のライセンスを指定できるので、例えば、CC の by アトリビュートの写真が欲しかったら以下のように license パラメータに 4 をセットします。  $ .</description>
    </item>
    
    <item>
      <title>Perl でライフハック（？）「リンクの横にはてなブックマークのUser数を表示する」捨てスクリプト</title>
      <link>https://yusukebe.com/posts/2009/0101030127/</link>
      <pubDate>Thu, 01 Jan 2009 12:01:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2009/0101030127/</guid>
      <description>lestrrat こと 牧さん が中心となって推し進められている JPeA（Japan Perl Association） があります。 詳しいことは公式の wiki をご覧になっていただきたいのですが、 そのプレミーティングの時にたつをさんが、 「Perl はライフハックツールだ」みたいなことを切り出してみんなで盛り上がりました。  「Perl と言えば CGI の言語」と思われがちですがそんなことは無く、例えば Web に限らずに、 ちょっとした作業を自動化するプログラムをサクっと書けるのが魅力だったりします。 繰り返しが続く作業や、何かのフォーマットを違うフォーマットに変換するなどといったことは、 日々の業務でよく起こりうることで、それを Perl でもっと楽チンに、 そして楽しく処理しましょうね、 なんてことができるので「Perl はライフハックツール」とも言えるじゃないかということですね。 ( * もちろん他の言語でもできるのですが、Perl はテキストを扱うことに長けているのと、 俺が Perl 使っているのと、JPeA 的スタンスで「Perl かわいいよ」という展開になってますｗ）  さて、ちょうど先ほどの「あけおめ」エントリーでそのような場面に出くわしたので、 簡単に紹介します。記事の中では、以下のように他の記事へのリンクがたくさん出てきました。 &amp;lt;p&amp;gt; 最後に紹介するのは、以下の記事です。 &amp;lt;/p&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&#34;LDR&#34;&amp;gt;http://yusukebe.com/archives/08/05/29/105145.html&#34;&amp;gt;LDR 購読者 1000人を突破しました&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;   そこで、このリンクの横に「10users」といった被はてなブックマーク数を表示した方が、見てる人にとってわかりやすいかなと思いました。 手作業で HTML を書いて表示させればいいのですが、めんどかったので Perl で捨てスクリプトを書いて サクっとその作業を終わらせました。 捨てスクリプトってのは基本、その場限りで使うようなものなんで、 今自分が持っている知識の範疇であんまり後先考えず作って、とりあえず今動けばいいというスタンスのコードという個人的認識です。  スクリプトは以下の通り。基本正規表現の処理です。 use strict; use warnings; use Encode; use utf8; my $filename = $ARGV[0] || &#39;text.txt&#39;; open my $fh, &#39;&amp;lt;&#39;, $filename or die $!; for my $line (&amp;lt;$fh&amp;gt;){ if($line =~ m!href=&#34;(.+?)&#34;.*&amp;gt;(.+?)&amp;lt;/a&amp;gt;!){ my $permalink = $1; my $title = decode(&#34;</description>
    </item>
    
    <item>
      <title>エロいワンライナー</title>
      <link>https://yusukebe.com/posts/2008/1212102545/</link>
      <pubDate>Fri, 12 Dec 2008 19:25:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/1212102545/</guid>
      <description>  wget とか使えばもっと短くできそうだけど、Perl だけで頑張ってみた。 コマンド $ perl -MLWP::Simple -MFile::Basename -e &#39;map{mirror($_,basename($_))} get($ARGV[0]) =~ m{&amp;lt;a.*?href=&#34;(http://[^&#34;]+\.jpg)&#34;}gi;&#39; http://metiss.blog92.fc2.com/blog-entry-142.html  結果   この記事は、 JPerl Advent Calendar 2008に寄稿したワンライナーで画像収集 - 8日目のネタです。他の人の記事はエロくなくてしっかりと役立つ Perl の Tips が載ってるから見るといいよ！ </description>
    </item>
    
    <item>
      <title>Yokohama.pm tech talk #2 に行って来た＆『Perlモジュールだけで挑戦「画像の物体認識類似検索」』</title>
      <link>https://yusukebe.com/posts/2008/0824110952/</link>
      <pubDate>Sun, 24 Aug 2008 20:09:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0824110952/</guid>
      <description>  先日発足した、 神奈川県・横浜にゆかりのある Perl な人たちで構成されているコミュニティ「Yokohama.pm」。 その第2回目イベント「Yokohama.pm technical talk #2」が開催されたので行ってきました。 参加者は30人ほどで、会場はデジハリ横浜校さんでした。とりあえず、最初に、 会場を貸してくれたデジハリ横浜校さんありがとうございます！ 内容は10分間のメイントークが5本、5分間のライトニングトーク(LT)が6本、です。   自分は『Perlモジュールだけで挑戦「画像の物体認識類似検索」』という題名で LT 発表させていただきました。 Image::Seek という任意の画像に類似したイメージを返してくれる CPAN モジュールと、 物体検出ができる Image::ObjectDetect モジュールを組み合わせて、「顔チェキ」みたいなことができないかという挑戦の模様をデモ付きで話しました。 本当はデモを公開したいところですが、使っている写真の権利的にまずいので、とりあえず資料だけ置いておきます。そのうち内容の詳しい解説をするかも。  techtalk2_080822.html   また、各発表の詳しい解説やレビューは以下、参加者の方によるまとめがあるのでそちらをご覧下さい。  Yokohama Perl Mongers Technical Talk #2 - a geek Yokohama.pm テクニカルトーク #2に行ってきた！ - dann@webdev - dannグループ Perlのイベント「Yokohama.pm Technical Talk #2」発表内容まとめ - Perl入門〜サンプルコードによるPerl入門〜   では、今回のイベント、個人的に思ったことを簡単に。 まず、メイントークでは Perl のイベントのくせに、Flash / ActionScript 関連のネタが3つもあるという具合で、突っ込みどころになっていたのですが、もともと Perler の人が Flash / AS を触ると何を作り出すのかがわかって興味深かったです。 また、これが Yokohama.pm の強みだと思いますが、 普段 Shibuya.pm などで発表したことのない人のスピーカーっぷりが見れたのでよかったです。 例えば「Monday Module」というタイトルで発表した xeczx さんは「コードは一切出てきません。」と、 言っておきながら、非常によくまとまった内容で関心しましたね （ 早速ドメインをとってるあたりもいい！ http://monday-module.org/ )。 そして、一番印象に残ったというか残っちゃったのは、acotie の「acotie ちゃんのドキドキPerlプログラミング」でした。ZIGOROu さんが発表後に   「とっても初々しいですね」   と言ってまとめてまさにそのとおり。題名のように非常に「ドキドキ」する発表でした。 acotie にはこのドキドキをバネに今後も発表等してもらいたいですね。  ほぼ来ていた人全員が参加した懇親会、その後の2次会ともにとても有意義な Yokohama.pm でした。 ZIGOROu さん曰く次回はワークショップ的なものか、ハッカソンをやりたいということで今後も楽しみ！ 運営スタッフの皆様、そして参加者の皆様、お疲れさまでした！ </description>
    </item>
    
    <item>
      <title>Oppai-Detect 2 @ CodereposCon#1</title>
      <link>https://yusukebe.com/posts/2008/0724233750/</link>
      <pubDate>Fri, 25 Jul 2008 08:37:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0724233750/</guid>
      <description>昨日16時開場20時過ぎくらいから株式会社ソフリット大会議室で開催された CodeRepos Conference #1 に行って来ました。  会場に着くと全裸でチンコ丸出しの人がいただんですが基本的にみなさんツッコミ無しでスルーをして、 founder of curry こと hirose31さんが作ったカレーをいただきました。野菜とかエビとか入ってて非常においしかったです。   さてこの CodeRepos Con、参加資格が   (1 コミット以上したことがある coderepos commiter) &amp;amp;&amp;amp; (founder であること)
なお、コミッターはデフォルトでスピーカーです。   ということで、来てる人みんながそれぞれのプロダクトについて語るというものです。 発表内容は、真面目な話からネタ的なものまで幅が広く、それでもみんなビールを飲みながら楽しく聞きました。 このなんでも許せる感がたまらなかったです。   途中、夏なので花火をして第2部開始。俺もここに来ているからにはcommitterであり、つまりはスピーカーなので、founder of erogeek &amp;amp;&amp;amp; founder of wadit &amp;amp;&amp;amp; founder of ikuvideo として発表してきました。そもそも人様に見せれるようなネタが少ないことともう既に発表しつくしていることから、テーマを何にしようか迷いましたが、去年の10月の Erogeek Conference #1 からゆっくりとしたペースでやっている「Oppai-Detect」プロジェクトについて話しました。画像からおっぱいを検出することにトライする Oppai-Detect 2 !! です。  「詳しくは coji さんがニコニコに発表模様の動画をうｐしてくれているのでそちらをご覧ください」といいたいところですが、普通におっぱい写りまくっていて smilevideo 的によろしく無いので、coji さんに撮影してもらった動画を yusukebe 鯖に置きますよー。ってなわけで発表内容は真面目なのですが、おっぱいが写りまくっていることをご了承の上ご覧ください。おっぱい嫌いな人、未成年者の方は Yappo さんの Acme::Acotie の 発表とかみるといいと思います。   この動画のサンプルで使っているおっぱい検出に必要な OpenCV cascade の XML ファイルは暫定的に CodeRepos にコミットしておきました。  CodeRepos::Share ? Trac   また、今回のデモで使った Perl のコードは以下のようになります。上記の XML を checkout して適切に配置すればどなたでも現状の Oppai-Detect で、写真からおっぱいを検出できますよ！ #!/usr/bin/perl use strict; use warnings; use Imager; use Image::ObjectDetect; my $file = $ARGV[0] || &#34;</description>
    </item>
    
    <item>
      <title>Yokohama.pm tech talk #1 に行って来た</title>
      <link>https://yusukebe.com/posts/2008/0628065625/</link>
      <pubDate>Sat, 28 Jun 2008 15:56:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0628065625/</guid>
      <description>シュウマイは崎陽軒、朝見るテレビ番組はsakusaku、好きな野球チームはもちろんベイスターズなハマっ子の自分ですが、待望の「Yokohama.pm」が発足し、その第1回のイベント「テクニカルトーク #1」が昨日開催されました。  「.pm」の pm は「Perl Mongers」の略称であり、Perl モジュールファイルの拡張子でもあります。 そもそも、「Perl Mongers」というのは地域ごとの Perl コミュニティのことらしいのですが、 最近では都内近郊において「Shibuya.pm」が特出して盛り上がっている状況です。 俺も Shibuya.pm 系のイベントでは発表をさせていただいたりとお世話になっています。  ただ、以前 typesterさんと話したんですが、都内で開催した場合、神奈川に住んでいる者にとって、終電を気にしなくてはいけなかったり、メンバーによる突発的な飲み会に参加するのが難しいので、もっと「神奈川な」コミュニティが欲しいと思っていました。 そこで、こうした理由も含め、（経緯の説明は省きますが）、待望の「Yokohama.pm」発足です （備考: ところがまだPerl Mongersとして正式に認められてはいないっぽい？）。  昨日はその Yokohama.pm 初イベント「テクニカルトーク #1」が横浜某所で開催されました。 参加者は神奈川・横浜にゆかりのある Perler 20名程度。 15分のキーノート、5分間のライトニングトークという内容でした。 詳しい内容については、hiratara さん、dann さんのエントリーにいい感じでまとまっているので、 そちらを参照してください。  Yokohama Perl Mongers テクニカルトーク #1 - a geek Yokohama.pm #1 - dann@webdev - dannグループ   で、自分もLTを発表するはずで、トリだったんですが、YAPC::Asia 2008 に続いて、Thinkpad の調子がなんだか悪くて、プロジェクターに投影しようとするとフリーズしてしまい発表できないという最悪の事態になりました。ごめんなさい、ごめんなさい＞＜。「続きは懇親会で」ということだったので、飲み屋のテーブルで発表しました。えー題名は「エロサイト管理者の憂鬱 - ec2 かわいいよ編」です。 スライドはSlideShareにあげたので興味があればご覧ください。ちなみに、飲み屋でノーパソ囲んで発表というスタイルもなかなかいいですね。  | View | Upload your own    さてこうして無事終了された Yokohama.pm の初イベント。 やはり、というか当然、Shibuya.pm に来ている人が大半なのですが、 その代わり、参加者の人数が少ないってこともあり、Shibuya.pm では発表していない方のプレゼンが見れて面白かったです。先日の XS nite は100人弱の規模だったのですが、今回の20人規模ってのもアットホーム？、そしていい意味でｇｄｇｄな雰囲気がいいです。  今後の方針は我らがリーダー clouder さんを中心に決めていくことになりそうですが、 Shibuya.pm と、いい意味で差別化して、地の利を活かしたコミュニティにしていきたいですね。 会場を確保していただいた daiba さん、懇親会の幹事をやってくれた typesterさん、そしてリーダー clouder さん、ありがとうございました！ 付録: beatinaniwa伝説   バイトにいくために Yokohama.</description>
    </item>
    
    <item>
      <title>Shibuya.pm tech talk #9 (XS Nite) に行って来た</title>
      <link>https://yusukebe.com/posts/2008/0626022921/</link>
      <pubDate>Thu, 26 Jun 2008 11:29:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0626022921/</guid>
      <description>  昨日開催された Shibuya.pm tech talk 第9回、通称「XS Nite」に行って来ました。 XS とは、それぞれいろいろな定義がありますが、わかりやすいので hirose さんの発表から引用すると、   PerlとCをつなぐための言語&amp;amp;インタフェース   のことです。今回、ひったすら XS をテーマにしているわけで Perl 勉強会といいつつも、C のコードばかり出てきましたｗ XS モジュールは使うことこそありますが、「XS のモジュールを自分で書く」というのはやはり C 言語や Perl の内部構造に対する知識が必要になり（そうで）、難解なイメージがあります。 てなわけで、発表を聞く前は難しくてついていけないんじゃないか、そして眠くなるんじゃないかと危惧していたものの、全くそうはならず、とっても楽しく発表を聞けました。   メイントーク前半、hiroseさんの「はじめてのXS - ハマりどころはココだ」、 dmakiさんの「Perl 5 internals の世界にようこそ」がすごくわかりやすくて、自分で実装できるかはともかく、 普段意識していなかった Perl の内部構造について興味がわきましたね。  面白かったのは、メイントーク後半「若手の部」。 藤吾郎さんの「Inside Ruby.pm」と先日のYAPC::AsiaでもLTされていた wakapon さんの「Perl Machine」の発表です。ようは俺の認識で超まとめすると、Perl で Ruby ライクなシンタックスでコードかけちゃうよ、Lisp Machine のように Perl のみで OS を含んだ環境を作るよというチャレンジです。二人とも学生さんらしく、「世の中には若い変態がいるなー。素晴らしい！」と感心しました。  miyagawa さんが Twitter で   きのうの Shibuya.XS のプログラムを考えたやつ(=takesakoさん) は天才！まともなXS講座から若手のハック、邪悪なネタまでいい具合のフローだったです  http://twitter.com/miyagawa/statuses/843632731   と書いてますが、ほんとその通りだったと思います。テーマを絞ったことにより、全体としてまとまりが出たということですかね。  蛇足ですが、改めてこれほどのクオリティの高い発表を、お金を払わずとも聞けるというのはすごいことだと思います。発表者の皆さん、会場を貸してくれたIIJの方々、そして takesako さん、ありがとうございました！ </description>
    </item>
    
    <item>
      <title>Perl-users.jp と perl-mongers.org 発足！</title>
      <link>https://yusukebe.com/posts/2008/0526041852/</link>
      <pubDate>Mon, 26 May 2008 13:18:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0526041852/</guid>
      <description>どんなプログラミング言語でもそうだと思いますが、Perlでは 「使う人」と「作る人」の2種類の人がいると思います。 「使う人」は他の人が作った CPAN モジュールなど使いこなすというレベル。 また、「作る人」は自らを含めた他の人が使ってもらえるような モジュール を作るという方々です。 自分はやっと、この「使う人」としてコーディングできるようになった気がします （もちろんまだまだ使いこなせてない点あります）。 そして最近 CPAN Author に登録されたので、「作る人」の方にいけたらいいなと思っています。  で、「作る人」はとりあえず置いておいて、Perl を「使う人」にまず最初になろうというきっかけが、 いわゆる「モダンでない」Perl/CGI のイメージや、他の言語の台頭によって、なかなか少なくなってきているのかもしれません。YAPC::Asia 2008 ラストのセッション、Michael Schwern さんの「Perl is unDead」というタイトルのトークでもそのようなことに言及されていました。Schwern さんは、Perl を使ったキラーアプリを作ろう、CPANモジュールの依存性の問題を解決しようなどと提案し、さらに   「もっと Perl 初心者が集まりやすい nice な Perl の情報を集めたサイトを作れ！」  Perl-users.jp - 日本のPerlユーザのためのハブサイト より引用   と言いました。自分の場合は書籍 Blog Hacks や Plagger がきっかけになり、「リビドードリブン」でだんだんと Perl を「使う人」になっていった感じです。 ただこれはほんと特殊な例なので、いざ Perl をはじめようとしても Schwern さんが提唱したとおり、なかなか（モダンなPerlの）情報源にありつかないという現状がやはりあると思います。 実際、日本では Perl に関する記事はBlog等でかなり流れていますが、その内容の多くは「作る人」サイドの情報だったりして、「使う人」にとっては難しい印象なのかもしれません。 というわけで、以前からそのあたりのニーズは感じていたのですが、Schwern のトークを聞いてそれは確固たるものになりました。  と YAPC が終わって軽くうずうずしていたところに、Schwern さんの言った 「Perl 初心者が集まりやすい」サイトが2つ立ち上がりました。あまりにも高速にサイトを作って公開した Yappoさん、vkgtaroさん＆woremacxさん、まじGJです。   ひとつ目のサイトはもう公開されてから結構時間が経っちゃいましたが、「Perl-users.jp - 日本のPerlユーザのためのハブサイト」です。CodeRepos でサイトのデータを管理しているので、コミッタであれば誰でもコンテンツを追加できたりするのが面白いです。コンテンツはまだ揃ってませんが、「モダンなPerl入門」は期待したいところです。  もう一つは、昨日くらいから一般に公開されるようになった「perl-mongers.org」です。 CMSとしてMTOSを使用し、OpenID でログインすれば誰でも記事がかけるという、Perl-users.jp と同じくオープンなところがいいですね。Perler な人達が初心者向けの情報や Tips をブログ形式で載せています。 俺も、先ほどせんえつながら、この日記からネタをピックアップし若干解説を加えて、「YouTube の mpeg4 を Perl からゲットするよ - perl-mongers.org」という「ちょい悪」なエントリーを書いてみたところです。  Perl に興味のある方、Perl やりたいなと思っている方は是非、アクセス＆フィード購読してみてください。 そして、Perl の最大の魅力の一つであるコミュニティに飛び込んでみるのも楽しいと思います。</description>
    </item>
    
    <item>
      <title>YAPC::Asia 2008 に行ってきました＆LTで発表してきました</title>
      <link>https://yusukebe.com/posts/2008/0517035557/</link>
      <pubDate>Sat, 17 May 2008 12:55:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0517035557/</guid>
      <description>  おととい・昨日、5月15日・16日と大岡山東工大キャンパスにて行われた Perl のカンファレンス YAPC::Asia 2008 に行ってきました。また、先日 CPAN Author になったばかりの Perl newbie な自分ですが、1日目の Lightning Talks 内で5分間発表させてもらいました。とりあえず、最初に発表の資料を以下に置いておきます。俺の CPAN モジュール処女作「WebService::Simple」についてです。   WebService::Simple at YAPC Asia 2008   各セッションのトーク内容などについては、他の方々のブログやそのうち公開されると思われる映像を見ていただくとして、個人的な感想をちょろっと。  Larry Wall のトーク
 YAPC は今回初参加で、会場に行くまでどんなものかといろいろと想像していたのですが、 実際参加するとそれ以上のものでした。 というかもうこう言うしかないです。「めちゃくちゃ楽しかった！」。  YAPC とは 「Yet Another Perl Conference」 の略で、世界中で開催されるプログラミング言語「Perl」のカンファレンスです。今回の YAPC::Asia 2008 に参加した人の数は500人以上に及び、世界最大の YAPC となりました。まさに「Perl祭り」。初日、15分くらい遅刻してしまって会場に入ったのですが、講堂を埋め尽くす人の数にびっくり。miyagawa さんの話が終わると、Perl の生みの親である Larry Wall が登場して興奮。国内外の著名な Perl ハッカーの皆さんのトークを聞けるのはもちろん、こうした人たちが普通に会場をうろうろして、「あ、Ingy が昼寝してる」「あれ、どっかで見たことある人としゃべってるんだけど、よく見たら jkondo さんじゃん」といった場面もあり、Perl を通じて憧れの人と同じレベルで「お祭り」をやってる感じがすごく素敵でした。  (左)昼寝してるIngy、(右)休憩時間いきなりビール飲みだしたｗ
 そんな中、勢いで応募した Lightning Talk、「WebService::Simple」について発表させてもらいました。 すごい人たちが発表している中、自分がしゃべるというのはおこがましいばかり。さらに裏セッションがないために聴講する人はかなりの数。てなわけで、結構びびってました。 で、いざ発表はじめるとま、ある程度まともにしゃべれたわけですが、連動して動いている IRC のチャットや後のレポートで、   「全然エロくない。」「真面目すぎる。」   といろいろな人からツッコまれちゃいました。「すいません」。 エロネタをやろうとすると検閲で規制が入り、真面目にやるとツッコまれるので、今後はうまいバランスをとっで発表をしていきたいと思います。  発表する俺、photo by akkyさん, takesakoさん
 以上、簡単に振り返ったわけですが、Perl を使う人たち ＝ Perl Mongers は Perl に対する愛とハッカー精神に満ち溢れている上、懇親会・二次会・打ち上げなどで、例えば「はてなの（ここには書けないほど下品な）新サービスを考える」といったような話で盛り上がれる、いい意味でのバカさがあってとっても好きです。 こうして、Perl の楽しさ、Perl コミュニティのありがたさを確認し、これからも 一 Perl Monger として精進していきたいと思うばかりです。 最後に、すばらしい会場を貸してくれた東工大さん、 グッジョブな働きを見せてくれたボランティアスタッフの方々、 参加料金がすごく安く感じてしまうほどいろいろと提供してくれたスポンサーの方々、そして実行委員会の皆様、お疲れ様でした＆ありがとうございました！ </description>
    </item>
    
    <item>
      <title>YourFileHost のエロ動画にコメントをつけれるイクイク動画を作ってみた</title>
      <link>https://yusukebe.com/posts/2008/0509073511/</link>
      <pubDate>Fri, 09 May 2008 16:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0509073511/</guid>
      <description>  YourFileHost のエロ動画に、ニコニコ風のコメントがつけれる イクイク動画 というサイトを作って、昨晩プロト版を公開しました。もうすでにいろいろとフィードバックをもらっていますが、そのまとめは後日にして、サービスの説明とその経緯を簡単に紹介します。  イクイク動画  (18禁!)
  イクイク動画は見てわかる通り、ニコニコ動画を劣化させて、取り扱う映像はエロ限定にしたようなサービスです。コメントする際にログイン等は必要ないので、誰でも即投稿できるようになっています。 また、特徴として、「シコシコボタン」を搭載しています。 動画を見て興奮してしまったら、是非この「シコシコボタン」を連打してみてください。 ゲージがたまると、「おたまじゃくし」の形をした何かが画面上に飛び出します。  イクイク動画プレイヤーの解説
 さて、作ってみた経緯を簡単に。 まず、現状で叶えられているかは置いておいて、作ろうとした目的なんですが、 簡単に言うと「ネット上でエロ動画見ながら他人同士がコミュニケーションをとったらどうなるんだ」といった疑問に対する答えを知りたかったことが挙げられます。  学生の時、いや今でもありますが、男同士で集まるとよくアダルトビデオの話題になって、あの子がかわいいやら、あのビデオはいいやらと盛り上がって楽しいです。 また、おおっぴろげに言えませんが、中学性の時なんかは、みんなで友達の家にいって、エロビを一緒に見て楽しかった思い出があります。 そんなエロトークの面白さを不特定多数の人とネット上でやれたら面白いかも！というのが最初の動機です。 そこで、「動画でコミュニケーションといったらニコニコ動画だよね」、そして「エロビといったら今は YourFileHost だよね」という結論になり、YourFileHost の動画上に ニコニコ風コメントがつけれるサービスを作ろうとなった段です。なので、今回のイクイク動画はそこで性処理をすることを目的とあまりしていないというのが正直なところになります。  また、以前から「エロ動画で盛り上がるところはどこかをどうにかして知ることはできないかなー」と思っていました。そこで、動画を見ていてユーザーが興奮した場合に、何かリアクションをすることができるのならば、その場面がわかるのではないかと思いました。てなわけで、Usteam の shout 機能インスパイヤ で「シコシコボタン」が設置されることになったのです。公開してから見てみるとぶっちゃけこの目的は達成できていない、とわかるところがありますが、その辺もあとでまとめたいです。  ちなみに、実装は Flash によるコメントの表示部分や動画の読み込みなどの検証は以前から行っていて、 あとは GW 中にサイトの形になるまで作りました。 Flash のプレイヤーに関して、コメントの表示部分に判定がいくつも必要で、意外にも難しいです。 今でも、コメント同士がかぶっている現象があってしょぼいっす。ニコニコ動画のプレイヤーはほんとよくできているとわかりました。 大まかなシステムとしては、まず YourAVHost のフィード API から動画情報を取得して DB にぶち込んでおいて、個々のページに行くと Flash でできたプレイヤーが起動、その際 コメント情報や YourFileHost の FLV (Flashビデオ形式、裏APIをたたくとわかる) へのパスなどをバックエンドから受け取って表示という感じです。  実験的なサービス＆まだ不具合多いですが、もしよろしければ、遊んでください。 「今会社だから見れないよー」という方も家に帰って「シコシコ」してみてプリーズ。 というわけで イクイク動画 よろしくね！  イクイク動画  </description>
    </item>
    
    <item>
      <title>Google Charts API を Perl から簡単に操作できるようにしたモジュール『WebService::Simple::Google::Chart』</title>
      <link>https://yusukebe.com/posts/2008/0428053217/</link>
      <pubDate>Mon, 28 Apr 2008 14:32:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0428053217/</guid>
      <description>この記事見つけて   以前紹介した「これは便利！誰でも簡単にグラフを描けるAPIがGoogleから登場！『Google Charts』」ですが、PHPから簡単に操作できるようにしたライブラリが公開されています。  Google Charts APIをPHPから簡単に操作できるようにしたライブラリ『googChart』 | IDEA*IDEA」より   同じようにGoogle Charts API を扱う Perl 版が欲しかったので、WebService::Simple（0.09以上が必須） を継承する形で「WebService::Simple::Google::Chart」というモジュールを作ってみました。  パラメータを渡すと、その Chart のURLを返してくれて（get_url）、その Chart のイメージをファイルに書き出す（render_to_file）ことができます。以下がコードサンプルです。 use WebService::Simple::Google::Chart; my $chart = WebService::Simple::Google::Chart-&amp;gt;new; my $url = $chart-&amp;gt;get_url( { chs =&amp;gt; &#34;250x100&#34;, cht =&amp;gt; &#34;p3&#34;, }, { foo =&amp;gt; 200, bar =&amp;gt; 130, hoge =&amp;gt; 70 } ); #http://chart.apis.google.com/chart?cht=p3&amp;amp;chl=bar%7Cfoo%7Choge&amp;amp;chs=250x100&amp;amp;chd=t%3A33%2C50%2C18 print $url . &#34;\n&#34;; #一度 get_url でパラメータを渡したら、ファイル名を指定するだけで書き出せる $chart-&amp;gt;render_to_file(&#34;foo.png&#34;);   特徴は、get_url 及び render_to_file の第2引数に、チャートにしたいデータを ラベル名 =&amp;gt; 値 という形のハッシュリファレンスを渡せば、自動的に割合を出してくれて URL のパラメータにする点です。 なので、最大値をみつけて、それぞれの値をその数字で割るなんてことは不要になります（なるはずです）。 第一引数はデータ以外のチャートへのパラメータを書けばOKです。  WebService::Simple は LWP::UserAgent を継承しているので、今回のファイルに書き出すという機能が簡単に実装できました。実際 Chart.pm の中身はこんな感じでファイルに保存しています。 $self-&amp;gt;SUPER::get( $request_param , &#34;:content_file&#34; =&amp;gt; $filename );   CPAN はここ（ただし、0.01 はインターフェースが違う＆バグを持っているので 0.</description>
    </item>
    
    <item>
      <title>JavaScript 環境以外から  Google AJAX Search API を使う</title>
      <link>https://yusukebe.com/posts/2008/0425135831/</link>
      <pubDate>Fri, 25 Apr 2008 22:58:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0425135831/</guid>
      <description>Google AJAX Search API ってその名の通り JavaScript から利用することを前提に作られているんだけど、 先ほどドキュメンテーションに「Flash and other Non-Javascript Environments」という項目が追加されました。 JavaScript 以外の環境から Google AJAX Search API をこんな風に使えますよと書かれているようです。 今まで、例えば Perl から Web ページを検索する時には、Google のそれは「JS からしか使えないんでしょ」とあきらめて、Yahoo! の検索 API をよく使っていたところ、これで Google の検索結果も利用できるようになります。 JavaScript のレイヤーより一つ下くらいのところで、API が使えるとなると可能性も広がるかと思います。 ということで、早速、WebService::Simple を使って、Perl から Google AJAX Search API を使ってみたよ。  サンプルを紹介する前にこの API の仕様について軽く解説。 ベースURL は  http://ajax.googleapis.com/ajax/services/search/web   で、それに以下のようなパラメータを渡すと結果が JSON 形式で返ってくる。   q : 検索クエリー
v : API のヴァージョン、現時点でのデフォルトは 1.0
rsz : 検索結果をどのサイズで返して欲しいか、デフォルトは small の4件、large を指定すると8件
hl : 何語のウェブから検索したいか、日本語の場合だと ja
start : 検索結果を何番目から取得したいか、デフォルトは 0、おそらく最大で 24 っぽい
  詳しくはここを参照→Class Reference - Google AJAX Search API - Google Code  取得できる JSON の形式はこちらを参考に→Developer&#39;s Guide - Google AJAX Search API - Google Code  では、WebService::Simple を使ったサンプルを紹介。 WebService::Simple には JSON のパーサーもあるので検索結果を Dump するだけのスクリプトだったらこんな簡単に書けちゃいます。 my $google = WebService::Simple-&amp;gt;new( base_url =&amp;gt; &#34;</description>
    </item>
    
    <item>
      <title>WebService-Simple-0.09 の使い方</title>
      <link>https://yusukebe.com/posts/2008/0425082850/</link>
      <pubDate>Fri, 25 Apr 2008 17:28:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0425082850/</guid>
      <description>シンプルに Web API を叩ける WebService::Simple の現在の最新版はヴァージョン 0.09 です。 ヴァージョン 0.03 からスーパーハカーによる修正が入ったこともあり、機能が（Simpleという名前を崩さない程度に）増えたり、多少インターフェースが変わったりしました。 そこで WebService::Simple 0.09 の使い方を POD より詳しめに解説します。 # shipit が便利だったので、調子に乗ってやたら使いまくったらヴァージョンがどんどんあがっちゃった＞＜  最初に、インターフェースの変更点をあげます。大きく変わったのは一点のみです。 例えば、Lingr の API を扱う場合、base_url は http://www.lingr.com/ になりますが、 各メソッドの URL は 例えば http://www.lingr.com/api/session/create という風に、メソッドごとに変化します。つまり base_url に api/session/create みたいなパスを追加したいということです。 そのためには、 get メソッド の パラメータ にそのパスを記載するんですが、0.03 の時と引渡し方が変更になっています。 第1引数に extra_path を指定するようになりました。 my $lingr = WebService::Simple-&amp;gt;new( base_url =&amp;gt; &#39;http://www.lingr.com/&#39;, param =&amp;gt; { api_key =&amp;gt; &#34;your_api_key&#34;, format =&amp;gt; &#39;xml&#39; } ); my $response = $lingr-&amp;gt;get( &#39;api/session/create&#39;, {} ); my $session = $response-&amp;gt;parse_response-&amp;gt;{session};   また、上記サンプルに記載されているように、get などで取得した WebService::Simple::Response オブジェクトをパースするには、parse_xml メソッドを今まで呼んででいましたが、parse_response メソッドを使うことを推奨しています（エイリアスを作っているので parse_xml でも動きます）。  あとは普通に使う分には今まで通りで問題ないです。 Flickr API を使ったキーワードによる検索結果を Dump するサンプルコードは以下のようになります。 use strict; use warnings; use WebService::Simple; use Data::Dumper; my $flickr = WebService::Simple-&amp;gt;new( base_url =&amp;gt; &#34;</description>
    </item>
    
    <item>
      <title>CodeRepos にてスーパーハカーがものすごい勢いでコードを書き換えてくれた件</title>
      <link>https://yusukebe.com/posts/2008/0425064415/</link>
      <pubDate>Fri, 25 Apr 2008 15:44:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0425064415/</guid>
      <description>俺の CPAN モジュール処女作である WebService::Simple を見て Yappo さんは全然エロくないって DNBK していたけど、 このモジュールそこそこ評判がいいみたい。 それで、CodeRepos にて開発をしているんだが、スーパーハカーの dmaki (lestrrat) さんに、 「（ WebService::Simple を）全部書き換えたコードがあるんだけど、（CodeReposの）コード書き換えていいかな？」みたいなことを言われた。とりあえず branch で開発してもらうようにしてもらい、 いざコードを見るとほんとに全部書き換えられてたｗ  詳しくは次のエントリーで、最新版の WebService::Simple について書くつもりなのでそれを参照してもらいたいんだけど、LWP::UserAgent を継承するようになったり、さらに Parser を自分で選択できるようになってたりと拡張性がまして面白い感じになっている。  その後もものすごい勢いで、dmaki さんは機能追加やバグ修正をしてくれて、さらに tokuhirom も一部のコードを書いてくれた。lestrrat++, tokuhirom++ そして trunk にマージしたので、昨日から CPAN にうｐってる。  つまり、最初に自分が作ったコードが CodeRepos 上にてスーパーハカーの人たちの手にかかり、もっとよく、もっと綺麗になったという感じ。これってすごい嬉しい。 単にモジュールの完成度が高まったこともその理由のひとつなんだけど、自分が作ったそのコンセプトをある程度認めてくれた（？）ということもあるし、コードが書き換わることによって「あ、こういう書き方があるのか！」という発見があってとっても勉強になる。  だからこんなモジュール欲しいなと思って、それが世の中に存在しないのであれば、自分のコーディングのレベルを気にせずにとりあえず動くものを作って CodeRepos にうｐればいいと思う。 もし気に入ってもらえれば、今回のようにスーパーハカーの人が直してくれたりするかもYO！ あと、CodeRepos の IRC 見てると、最近では、他のモジュールも lestrrat, tokuhirom, Yappo の3人がものすごい勢いでコーディングしているっぽくてその様子を見ると刺激を受ける。  そんなことが可能になる CodeRepos はすごくいいと思います、ということを言いたかった。CodeRepos++ これからも CodeRepos で勉強させてください！  CodeRepos::Share - Trac /lang/perl/WebService-Simple - CodeRepos::Share - Trac  
 Subversion実践入門:達人プログラマに学ぶバージョン管理(第2版) posted with yusukebe.com::AmazonSearch on 2008.4.25 Mike Mason  単行本（ソフトカバー） / オーム社  Amazon 売り上げランキング: 1666  Amazon おすすめ度の平均:  Subversionを使う上で&#34;は&#34;よい本だと思う  日本語のSubversion解説本の最高作   Amazon.</description>
    </item>
    
    <item>
      <title>Catalyst Conference #1 に行ってきました</title>
      <link>https://yusukebe.com/posts/2008/0423035842/</link>
      <pubDate>Wed, 23 Apr 2008 12:58:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0423035842/</guid>
      <description>昨日行われた Catalyst Conference #1 に行ってきました。 ここで言う Catalyst とは Perl の Web Application Framework なんですが、 発表者のうち Yappo さんだけが Cisco のルータスイッチの話をしようとしててびっくりしました。 それはさておき、Talk の内容は以下のようなものでした。   id:dann のCatalystとMVC論 (15min)  id:ikasam_a によるCatalyst::Controller::Resources (15min) $c &amp;lt;3 C (charsbar) (15min)  コピペをしないための10の方法 (typester) (5min) Model::Adaptor的な話 (@hidek) (5min) yappo 2924あたりでも持ってきます (5min) Catalyst☆Complex tokuhirom (5min)   皆さん Catalyst Conference の癖に Catalyst を DIS りつつ、それを解決するためのそれぞれの方法や考え方を提案というパターンが主で、非常に面白かったです。 特に id:dann さんと id:ikasam_a さんはブログで Catalyst のネタを結構書いているのですが、今回実際にリアルの場での発表で、それぞれの考えを知ることができてよかったです。id:ikasam_a さんの Catalyst::Controller::Resources 、今まで触ったことがなかったのですが、発表聞くとかなりよさげなので使ってみたいと思います。   自分が Catalyst を使うケースって、仕事の受託開発ではほとんどなくて、pulpsite.net などで公開している yusukebe products が主です。 よって、全くの個人で開発していることと、サービスが小規模であるという点で、今回発表された方々とは多少違ったコンテキストで Catalyst を使っているのかなぁと感じました。 それを踏まえていい機会なので、Catalyst を今まで触ってきて、多少工夫しているところ、思っていることを（ほんの少し＆よく知られているものですが）挙げてみました。  Controller にロジックを書くのはよくない 少量のメソッドだったら MyApp.pm ?
モジュール化できるものはモジュール化(POPO)させる＋ Model::Adaptor
例: Web API / fetch して parse する / WebService::Simple</description>
    </item>
    
    <item>
      <title>ListPod に見る OpenID Provider の利用率、Yahoo! がダントツでトップ</title>
      <link>https://yusukebe.com/posts/2008/0415080746/</link>
      <pubDate>Tue, 15 Apr 2008 17:07:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0415080746/</guid>
      <description>ListPod を公開して3週間が経ちました。 おかげさまで現時点でユーザー登録をしていただいた方の数は1000人以上を達成。 こうした、ユーザーにログインしてもらうようなサービスを自分で運営するのは初めてなので、 至らない点ありますが、嬉しい限りです。  ところで、ListPod では認証に OpenID を利用しています。 バージョン2.0 にも対応しています。 そこで、現時点での会員の皆様がどの OpenID Provider を利用しているかのデータを見てみたいと思います。  2008年4月15日現在、ListPod において OpenID によるユーザー登録をした数は「1081」。 そのうちの OpenID Provider の利用トップは 614 件で「Yahoo! Japan（参考: OpenIDとは？ - Yahoo! JAPAN）」でした。 2位が「はてな（はてなでOpenID - はてな）」で351件、 3位が「livedoor（livedoor Auth OpenID(β)）」で56件となりました。実に1位の Yahoo! JAPAN は全体の57％を占め、2位のはてなが33％ということを考えるとダントツと言えます。全体の順位は以下のようになります（主要OP以外はその他の扱いにしました）。  me.yahoo.co.jp: 614 (57%)
www.hatena.ne.jp: 351 (33%)
profile.livedoor.com: 56 (6%)
openid.ne.jp: 26 (2%)
myopenid.com: 8
me.yahoo.com: 5
claimid.com: 2
vaginarepos.org: 2
coderepos.org: 1
openid4u.net: 1
vox.com: 1
other: 14
  また、Google Chart API で全体を俯瞰する円グラフを作ってみました。こちらです。   実際に運用を始める前では、はてなの OpenID 利用が高いのではという予測でしたが、この結果を見て、Yahoo! JAPAN のシェアがこれほどまでか、と多少驚いています。 もちろん、この数値は ListPod というサービスにおいてですし、一人が複数アカウントを利用していることも想定されているので、一般的な OpenID Provider の利用率として考えることはできません。ただ、ひとつの目安になるかと思います。  Yahoo! JAPAN の利用が半数以上というのは、Open ID 2.0 の Provider であることで URL 入力が簡便になった点が一つあげられるのかと思います。しかし、当然のことですが、利用ユーザーがはてなや livedoor のアカウントに比べて、Yahoo!</description>
    </item>
    
    <item>
      <title>ウェブエンジニア（略）と恥ずかしい日本人プログラマ300のブログを列挙祭り</title>
      <link>https://yusukebe.com/posts/2008/0414065749/</link>
      <pubDate>Mon, 14 Apr 2008 15:57:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0414065749/</guid>
      <description>YappoLogs: ウェブエンジニアをしていて知らないと恥ずかしい日本人プログラマ300   自分はエンジニアとしても未熟だし、恥軸がずれているので、残念ながらこのリストには入れません。 なので、自分ができる限りのことをやって、少しでもこのリスト「ウェブエンジニア（略）と恥ずかしい日本人プログラマ300」の人達に近づけるように精進したいと思います。  OPML化はerogeekがやってくれると思うのでOPML作ったよエントリを発見し次第リンクします。
  ということで、OPMLとリストだよ！ （TODO: WebScraperで最新版をとってきて更新するようにする） OPML   300engineer.opml   リスト  yoshiori - java-ja Yoshioriの日記 Google検索「yoshiori 」
   ats - Python TRIVIAL TECHNOLOGIES 2.0 Google検索「ats」
   ひがやすお - Java ひがやすを blog Google検索「ひがやすお」
   羽生章洋 - Java 羽生章洋さんのこと:矢沢久雄のソフトウエア芸人の部屋:ITpro Google検索「羽生章洋」
   mikio - Tokyo Cabinet mikio.net Blog | Mickey&#39;s Diary Google検索「mikio」
   moritapo - Senna 倖田來未 vs 浜崎あゆみ Google検索「moritapo」
   gunyarakun - Senna gunyarakun - スラッシュドット・ジャパン ユーザ Google検索「gunyarakun」
   mir - Tritonn Xen mir the alternative Google検索「mir」</description>
    </item>
    
    <item>
      <title>ウェブ関係で（略）恥ずかしい日本人100のブログを列挙祭り</title>
      <link>https://yusukebe.com/posts/2008/0414012602/</link>
      <pubDate>Mon, 14 Apr 2008 10:26:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0414012602/</guid>
      <description>「ウェブ関係で仕事をしていて知らないと恥ずかしい日本人100」なる題名のエントリーがはてブのトップにあったので見てみたら、「ゆーすけべー」の文字を発見して嬉しかった。   ゆーすけべー - youravhostの人   ところでこのリスト。ただ名前が並べられているだけで、その人の情報を知りたい時には名前をコピペして検索、なんてことをしなくてはいけない。これはめんどい。また、ウェブ関係で有名というだけあって、多くの人はブログを書いているだろうから、それを見たい、あわよくばRSSリーダーで購読したい。  てなわけで、この「ウェブ関係で（略）恥ずかしい日本人100」の（中でブログを書いている人の）ブログ（らしきもの）を列挙してみたよ。  どうやったかと言うと、名前をYahooで検索して、ブログっぽいものがあったらそれを表示して、もしブログを持ってなくてもGoogleで検索するリンクを作るというスクリプトをPerlで書いた。あと、ブログのURLを含んだOPMLも出力してみた。Yahooで検索→上位のURLからAutodiscoveryをかけて見つかったらそれをブログとする、というアルゴリズムなので、malaさんのブログが彼のはてブとかになっちゃってるけどご了承ください。以下リスト及びOPMLへのリンクと、スクリプト。 OPML   100people.opml   リスト  ひろゆき - ご存じ２ちゃんねる管理人 ひろゆき日記@オープンSNS。 Google検索「ひろゆき」
   小飼弾 - Jcode.pm作った人、あと404 Blog Not Foundの人 404 Blog Not Found Google検索「小飼弾」
   mala - Livedoor Readerの人 はてなブックマーク - malaのブックマーク Google検索「mala」
   あきやん - akiyan.comの人。CakePHPの本とか書いた人。 akiyan.com Google検索「あきやん」
   さとる - satoru.netの人。字幕.inの人。ニートの期待の星。 さとるのとまどいながら Google検索「さとる」
   堀江貴文 - Livedoorの社長だった人 社長日記 Google検索「堀江貴文」
   藤田晋 - サイバーエージェントの社長の人 渋谷ではたらく社長のアメブロ Google検索「藤田晋」
   家入一真 - paperboyの社長の人 hbkr : ハバカリ Google検索「家入一真」
   秋元裕樹 - サイボウズラボの人 秋元@サイボウズラボ・プログラマー・ブログ Google検索「秋元裕樹」</description>
    </item>
    
    <item>
      <title>CPAN Author になりました</title>
      <link>https://yusukebe.com/posts/2008/0404073142/</link>
      <pubDate>Fri, 04 Apr 2008 16:31:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0404073142/</guid>
      <description>先日から紹介している WebService::Simple というモジュールを CPAN に登録するため、CPAN Author になりました。少し前からもそれになるべく PAUSE の申請をしていて、理由に「Acme::PornStars::JP」とだけ書いていたら、中の人にガン無視されてしまっていたので、まさに念願の CPAN Author です。オレオレモジュールとは違い、 MANIFEST や Makefile.PL をちゃんと書かなくてはいけないのに戸惑いました。いまだ、空気読めずに間違っているところもあるかと思いますが、というかすでに Makefile.PL とかに必要なモジュール（test で使っている Test::Perl::Critic ）を書き忘れていて、test がこけるよーというレポートもらって修正したのをうｐしているところです。  WebService::Simple の中身の件ですが、mattn さんに使っていただいて動的にURLのパスを変えたいというリクエストがあったので、それに対応させました。ご要望サンクスです。 リクエストを発行する get メソッドの第 2 引数にオプションとしてハッシュリファレンスを指定します。 それを踏まえて mattn さんが作った Lingr のチャットに発言するサンプルスクリプトはこのように書けます。 use strict; use warnings; use WebService::Simple; my $api_key = &#34;your_api_key&#34;; my $room_id = &#34;hO4SmQWTdJ4&#34;; # http://www.lingr.com/room/hO4SmQWTdJ4 my $nickname = &#34;lingr.pl&#34;; my $message = $ARGV[0] || &#34;Hello, World.&#34;; my $lingr = WebService::Simple-&amp;gt;new( base_url =&amp;gt; &#39;http://www.lingr.com/&#39;, param =&amp;gt; { api_key =&amp;gt; $api_key, format =&amp;gt; &#39;xml&#39; } ); # create session, get session my $response; $response = $lingr-&amp;gt;get( {}, { path =&amp;gt; &#39;/api/session/create&#39; } ); my $session = $response-&amp;gt;parse_xml-&amp;gt;{session}; # enter the room, get ticket $response = $lingr-&amp;gt;get( { session =&amp;gt; $session, id =&amp;gt; $room_id, nickname =&amp;gt; $nickname, }, { path =&amp;gt; &#39;/api/room/enter&#39; } ); my $ticket = $response-&amp;gt;parse_xml-&amp;gt;{ticket}; # say &#39;Hello, World&#39; $response = $lingr-&amp;gt;get( { session =&amp;gt; $session, ticket =&amp;gt; $ticket, message =&amp;gt; $message, }, { path =&amp;gt; &#39;/api/room/say&#39; } ); my $status = $response-&amp;gt;parse_xml-&amp;gt;{status}; # destroy session $lingr-&amp;gt;get( { session =&amp;gt; $session, }, { path =&amp;gt; &#39;/api/session/destroy&#39; } );   自分が作ったものを使ってもらえること、また、CPAN のサイトに自分の名前が載るっていうのはとっても嬉しいことですね。至らぬ点あると思いますが、よろしくお願いします。 他のモジュールもうｐろう。  Yusuke Wada - search.</description>
    </item>
    
    <item>
      <title>WebService::Simple でキャッシュできるようにしたよ</title>
      <link>https://yusukebe.com/posts/2008/0401122449/</link>
      <pubDate>Tue, 01 Apr 2008 21:24:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0401122449/</guid>
      <description>dannさんを囲む会で何故か本人が店の予約をしていることで有名なdannさんから「WebService::Simpleで（取得したコンテンツを）キャッシュしたいよ！」と言われて、俺もその機能欲しかったので追加しました。 それに伴いnewメソッドのパラメータの形式が変ったのでご注意を。 Cache interface 系だったらどれでも渡せます（といってもCache::Fileしか使ったことないっす＞＜）。 例はこんな具合です。 use strict; use warnings; use WebService::Simple; use Cache::File; my $api_key = &#34;your_api_key&#34;; my $cache = Cache::File-&amp;gt;new( cache_root =&amp;gt; &#39;/tmp/mycache&#39;, default_expires =&amp;gt; &#39;30 min&#39;, ); my $flickr = WebService::Simple-&amp;gt;new( base_url =&amp;gt; &#34;http://api.flickr.com/services/rest/&#34;, cache =&amp;gt; $cache, param =&amp;gt; { api_key =&amp;gt; $api_key, } ); my $response = $flickr-&amp;gt;get( { method =&amp;gt; &#34;flickr.test.echo&#34;, name =&amp;gt; &#34;value&#34; } ); my $ref = $response-&amp;gt;parse_xml; print $ref-&amp;gt;{name} . &#34;\n&#34;;   昨日のバージョンとの互換性を持たせようかと思ったけど、コードが汚くなるのでやめておいた。 こういう時に柔軟に対応できるように最初からパラメータをどうもらうか、 先を見越して考えないといけないと思いました。   /lang/perl/WebService-Simple - CodeRepos::Share - Trac   
 オブジェクト指向Perlマスターコース―オブジェクト指向の概念とPerlによる実装方法 posted with yusukebe.com::AmazonSearch on 2008.4.1 ダミアン コンウェイ  単行本 / ピアソンエデュケーション  Amazon 売り上げランキング: 150750  Amazon おすすめ度の平均:  オブジェクト化するには良い本でした  Perl5 流オブジェクト指向プログラミングのバイブル！  真のPerl使いへ   Amazon.</description>
    </item>
    
    <item>
      <title>POX over HTTP のウェブAPIにアクセスするためのモジュール「WebService::Simple」を作ってみた</title>
      <link>https://yusukebe.com/posts/2008/0331042218/</link>
      <pubDate>Mon, 31 Mar 2008 13:22:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0331042218/</guid>
      <description>俗に言う「REST/XML over HTTP POX over HTTP」のウェブAPIにアクセスするためのシンプルな(？)Perlモジュール「WebService::Simple」なるものを作ってみました。REST/XML over HTTP POX over HTTP というのは、俺の解釈でいいますと、パラメータを指定して GET （POSTの場合もある）により情報の入ったコンテンツをXML形式で取得するというものです。WebService::Simple は基本的にこれ従っていればどんな API にも対応しているはずです。もしくはそうしたいです。  追記: masakiさんからTwitter経由で突っ込みをもらったので修正しておきました。確かにRESTという言葉が入っていると誤解されちゃいますよね＞＜ 参考: POX over HTTP - naoyaのはてなダイアリー  @yusukebe あれで REST とか言うと誤解を生むから POX over HTTP と言って欲しい   最近こうしたウェブAPIを利用するためのプログラムをいくつか作っているのですが、何回も同じ処理をコピペしているのに気づいて、短いコードながらも（50行くらいだよ）モジュール化してみたという経緯です。 ウェブAPI を利用するには、  リクエストURLの作成 コンテンツの取得 XMLのパース   という3ステップがあるので、この処理を「WebService::Simple」に任せるようにしました。 XMLのパースには個人的に扱いやすいと思っている XML::Simple を使っているため、返却される値はPerlオブジェクトのリファレンスとなります。  例としてFlickrのAPIを挙げます。キーワードで写真を検索して結果をダンプするスクリプトは、WebService::Simple を使わないとしたら以下のように書けます。 #!/usr/bin/perl use strict; use warnings; use LWP::Simple; use XML::Simple; use URI::Escape; use YAML; use utf8; binmode STDOUT, &#34;:utf8&#34;; my $api_key = &#34;your_api_key&#34;; my $url = make_url( &#34;flickr.photos.search&#34;, { text =&amp;gt; &#34;猫&#34; } ); my $content = get($url) or die &#34;Couldn&#39;t get xml&#34;; my $xs = XML::Simple-&amp;gt;new( forcearray =&amp;gt; [&#34;</description>
    </item>
    
    <item>
      <title>nipotan と nagayaman を送り出す nipotan nite に行ってきた</title>
      <link>https://yusukebe.com/posts/2008/0326032130/</link>
      <pubDate>Wed, 26 Mar 2008 12:21:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0326032130/</guid>
      <description>Livedoor の nipotan さんがアメリカに旅立つということで昨日25日に開催された「nipotan nite」に参加してきました。はてなの nagayaman も京都に行っちゃうってことで nagayaman の壮行会も兼ねているらしいです。 Livedoor 組、Perl組み、サブテカ組み、そしてTwitter組みを併せて参加者なんと130人！ 中にはネット上で知り合いだったけど今回初めて nipotan に会うって人もいたみたいです。 俺も nipotan さんや nagayaman と直接会ったことは数回しかないのですが、 2人とも「愉快なお兄さん（おじさん？）」という感じで一緒にいるととても楽しくなります。  イベントの司会はマジシャンギークことKuboonが務め、いきなり nipotan がプロジェクタのスクリーン裏から登場するというマジックを披露してスタート。 ビデオメッセージや、サブテカの人達のLT（Lightning Talk）もあり、一部の人たちは自重しつつも、大変盛り上がりました。 また個人的には、ネット上ではなんとなく知っている人とリアルで初めてあうという出会いがいくつもあり楽しかったです。というか俺、あんまり、会っても顔と ID が一致しないまま帰ってきてしまってごめんなさい、ごめんなさい。  nipotan 登場
 後半 nipotan へのプレゼントを渡すときに、nipotan はイ○ポだけどスケベという印象から、 俺は「スケベ代表」タスキ（使用済み）をあげました。自分はゆーすけべーなので自分の形見を渡すようなものです。といってもドンキで800円くらいなんですけどね。 それで、渡したら以降ずっとそのタスキをかけていてくれてなんか嬉しかったです。 是非、日本を代表するスケベとして世界を驚かせてください。  スケベ代表たすきをかけてスピーチするnipotan
 そういえば、nagayaman は社長の家庭の事情で京都へいくらしいのですが、nipotan がアメリカに行く理由が未だにわかりません。とはいえ、お二人とも新天地で楽しんで来てください！ ああと、おまけで、もうすでにうｐされてるとのことですが、 俺が撮影した水室にぽ介による「Kiss me Goodbye」のニコニコへのリンクを貼っておきます。 まじかっこよかった！ 【ニコニコ動画】Kiss Me Goodbye / 水室にぽ介 
 タスキ スケベ代表 posted with yusukebe.com::AmazonSearch on 2008.3.26 おもちゃ＆ホビー / ジグ  Amazon 売り上げランキング: 62151  Amazon.co.jpで詳細を見る    会場でもかかっていた nipotan が好きという終わりなき旅、俺も大好きだよ！ 
 終わりなき旅 posted with yusukebe.com::AmazonSearch on 2008.3.26 Mr.Children 桜井和寿  CD / トイズファクトリー (1998/10/21) Amazon 売り上げランキング: 40348  Amazon おすすめ度の平均:  最高の曲  時を越えて人を応援し続けてくれる歌  ☆５つでは到底足りない。   Amazon.</description>
    </item>
    
    <item>
      <title>YouTube動画のお気に入りをPodcast化してiTunesやiPod で見れるサービス「ListPod」をリリースしました</title>
      <link>https://yusukebe.com/posts/2008/0323004204/</link>
      <pubDate>Sun, 23 Mar 2008 09:42:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0323004204/</guid>
      <description>  YouTubeの動画をお気に入り（マイリスト）として登録できて、それがそのままPodcastを吐いてくれて、iTunes や iPod ですぐ見れちゃう！という新サービス ListPod をリリースしました。 以下説明書きからの引用です。   ListPod はお気に入りの YouTube の動画 をマイリストとして登録でき、 それらを Podcast として配信するサービスです。 OpenID ログインによる簡単なユーザー登録をすれば誰でも、マイリストを作成できます。 Podcast によって配信される動画は mpeg4 形式 h.264 コーデック (mp4拡張子) のため iTunes はもちろん、iPod などのプレイヤーでも再生することが可能です。   ListPod - YouTube動画のマイリストを作ってPodcastで見よう！
  使い方については、使っている様子をキャプチャした動画があるのでそちらと、記事にまとめたものがあるのでそちらを参考にしてみてください。  ListPod を使っている様子 ゆーすけべー日記: ListPod の使い方   自画自賛で申し訳ないですが、このサービス、いいです。 以前「はてブしたYoutube動画をPlaggerでダウンロード＆PodcastしてiPod nanoで見るライフハック(？)はすごくいい」と題して、YouTube動画をはてなブックマークしてそれを Pagger でダウンロード＆変換＆Podcast化して iTunes や iPod でみることの便利さ、面白さを紹介しました。 その時から感じていたのですが、この作業をもっと簡単に素早くできないかというのが ListPod を作る上での動機になります。キャズムとでも言うのでしょうか、敷居の高いことだけれども、やれる人にとってはすんげー便利でいいよ！というものを、ウェブのサービスとして広く一般の人に使ってもらえるようにして、自分も楽するというのができれば嬉しいです。「これ、Plagger 要りませんから！」「ウェブで全部できちゃんだからねっ！」  Podcast に含まれる YouTubeの動画を iTunes や iPod シリーズで読み込ませるために、先週リリースした YouTubeMP4 を使っています。YouTubeMP4 の公開時にあるサービスへの「布石」とよんでいましたが、つまり この ListPod のためだったわけです。このように、YouTube が mpeg4 のファイル形式での公開をアンオフィシャルながら始めたというのが技術的トピックのひとつです。  もう一つ、このサービスにとってテクニカルな側面で重要だったのが「OpenID」です。ログイン認証はすべて OpenID で行うことにしました。2.0 対応なので、ログインフォームに「yahoo.co.jp」と入れるだけでもいけます。OpenID ってなんぞー？という方はググればたくさん情報があるのでそちらを参照していただきたいのですが、認証の部分を実装しなくてよくなった分、かなりスピーディに作ることができました。ログインのテストを行っていて、とりわけ Yahoo! Japan の 2.0 の場合、うまく成功できた瞬間はやはり感動しました。  あと細かいことを言えば、まだまだ改善の余地ありますが、検索結果の動画などをマイリストに追加する時の操作性を向上させるために JavaScript のライブラリ jQuery を使った Ajax を用いています。また、ページ数が今まで作ったサービスに比べて多いので、URI設計について多少考えさせられるところがありました。 ROA (リソース指向アーキテクチャ) に一応基づきつつ「名詞」ベースのURI構造にしつつも、動画を追加したり、マイリストを編集したりするところの URI は「動詞」ベースとするのが個人的にわかりやすかったです。  多少ニッチなサービスになりかねないですが、このサービスを機に iPod でお気に入りの映像を持ち歩くこの可能性を提示できればいいと思っています。 ということで、是非 ListPod 使ってみてください。 ユーザー登録は簡単ですし、登録しなくとも Podcast を iTunes などに登録するができますよ。もし、質問、提案、要望などあったら、この記事へのコメントもしくは、はてブコメントで受けつけてます。 以上、Enjoy！  ListPod - YouTube動画のマイリストを作ってPodcastで見よう！  </description>
    </item>
    
    <item>
      <title>ListPod の使い方</title>
      <link>https://yusukebe.com/posts/2008/0323003548/</link>
      <pubDate>Sun, 23 Mar 2008 09:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0323003548/</guid>
      <description>ListPod の使い方を解説します。 使っている様子の画面をキャプチャした動画があるので、そちらも参考にしてください →ListPod を使っている様子。  とりあえず今のところ ListPod の機能には主に以下があります。  YouTube にある動画を検索 マイリストを作成 マイリストに動画を追加 Podcast を iTunes に読み込む iTunes で動画をダウンロードする URL から Podcast を作成 ブックマークレットを使う iPod と同期して映像を持ち歩く   これらを順番に紹介していきましょう。 YouTube にある動画を検索  OpenID によるログインが済んだら自分のマイリストを作成し、動画を追加していくことが可能です。 まずは、YouTube にある動画を ListPod から検索してみましょう。 検索フォームにキーワードを入力するとヒットした動画を一覧で見ることができます。 動画が再生したい時には、サムネイル画像をクリックしてみてください。再生がはじまります。  マイリストを作成  検索結果の画面から、新しくマイリストを作るには、動画の詳細表示の下にある「マイリストを新規作成」をクリックしましょう。 フォームが出てくるのでそこに希望するマイリストの名前を入力して「作成」ボタンを押します。 するとその場でマイリストができます。  マイリストに動画を追加  動画情報にあるプルダウンメニューからその動画の登録先としたいマイリストを選択して「に追加」ボタンを押せば、マイリストに追加されます。 自分のマイリストの確認をしたい場合は、右側バーの「マイインフォ」→「マイリスト一覧」をクリックしてください。作ったマイリストの一覧が表示されます。そこでマイリストの名前のリンクをクリックすればそのマイリストの詳細ページへと飛びます。  Podcast を iTunes に読み込む  ではいよいよマイリストの Podcast を iTunes へ読み込ませてみましょう。 といっても Podcast と書いてあるリンクをドラッグ＆ドロップで iTunes へ放り込むだけです。 もしくは Podcast （RSS）の URL を iTunes に登録してみてください。 ちなみに、一度マイリストを iTunes に登録しておけば、ListPod 側で動画を追加した場合に、iTunes の Podcast を更新するだけで最新の動画をダウンロードしていくことができます。  iTunes で動画をダウンロードする  iTunes の「Podcast」からダウンロードしたい動画を「入手」すればダウンロードが始まります。 動画によってはダウンロードに失敗する場合がありますが、その場合もう一度「入手」ボタンを押して何度か試みてください。それでも解決しない場合がごくたまにありますが、その時は YouTube 側に動画が無いかエラーを吐いているかなので、諦めてください。  URL から Podcast を作成  キーワードによる検索結果から動画をマイリストに追加できるだけではなく、YouTube へのリンクを含むページの URL を入力することによって、そのページの Podcast を作ることもできます。 例えば、CDTube の URL を入力し、iTunes に登録しておけば、毎週のランキングに登場した曲に関する動画を自動的に取得していくことも可能になります。 ブックマークレットを使う  こちら、もっと改善の余地ありですが、ブックマークレットを登録しておくと、YouTube の動画ページを見ていて、この動画をマイリストに追加したいなという時に便利です。ブックマークレットをクリックすれば ListPod の追加ページへと飛ぶようになっております。また、YouTube のページのみならず、YouTube へのリンクを含むページでブックマークレットすれば「URL から Podcast を作成」する ListPod のページへ行けます。 iPod と同期して映像を持ち歩く  最後に iTunes と iPod を同期させてみましょう。 h.</description>
    </item>
    
    <item>
      <title>PerlでYouTubeのmpeg4を直接ダウンロードする - 勝手に添削？</title>
      <link>https://yusukebe.com/posts/2008/0316011841/</link>
      <pubDate>Sun, 16 Mar 2008 10:18:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0316011841/</guid>
      <description>YouTubeMP4をコマンドラインから使いたいとのこと。   でも、右クリックめんどうだなあ、ということでコマンドラインからダウンロードできるようにしてみた。  YouTubeMP4をコマンドラインから使いたい - Seeking for my unique color.   勝手に添削、というか添削になってないんだけど、 これってぶっちゃけわざわざYouTubeMP4にアクセスしないでもYouTubeのページから直接スクレイピングすればよくって、 以下のスクリプトで実現できます。あとMech使わなくてもLWPはGETすれば自動的にリダイレクト先をフェッチしてくれます。 #!/usr/bin/perl use strict; use warnings; use LWP::UserAgent; my $url = $ARGV[0] || &#34;http://www.youtube.com/watch?v=N7NTRPKfUtw&#34;; my $ua = LWP::UserAgent-&amp;gt;new; my $response = $ua-&amp;gt;get($url); die $response-&amp;gt;status_line unless $response-&amp;gt;is_success; my $content = $response-&amp;gt;content; if($content =~ /video_id=(.+?)&amp;amp;l.*?&amp;amp;t=(.+?)&amp;amp;/){ my $mp4_url = &#34;http://www.youtube.com/get_video?video_id=$1&amp;amp;t=$2&amp;amp;fmt=18&#34;; warn &#34;downloading mp4 from $mp4_url\n&#34;; $ua-&amp;gt;mirror($mp4_url, &#34;$1.mp4&#34;); }else{ warn &#34;Error\n&#34;; }  
 Spidering hacks―ウェブ情報ラクラク取得テクニック101選 posted with yusukebe.com::AmazonSearch on 2008.3.16 Kevin Hemenway Tara Calishain 村上 雅章  単行本 / オライリー・ジャパン (2004/05) Amazon 売り上げランキング: 34884  Amazon おすすめ度の平均:  回り道しても読む価値がありました  『Hacks』の白眉  混沌のWEBからデータを収集した人は必読   Amazon.</description>
    </item>
    
    <item>
      <title>YouTubeのmpeg4ファイルへのリンクを簡単にみつけられるサービスを半日で作った</title>
      <link>https://yusukebe.com/posts/2008/0314122653/</link>
      <pubDate>Fri, 14 Mar 2008 21:26:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0314122653/</guid>
      <description>  YouTube が iPod Touch 向けなどに h.264 コーデックの mpeg4 ファイル形式の動画をせっせとエンコードしていたわけですが、先日そのファイルへのアクセス方法がネットで広まりました。 自分もその日のうちに Perl のスクリプトを書いて実際に h.264 形式のファイルダウンロードしてみて、 そのまま QuickTime や iTunes などで再生できて感動しました。 YouTube から直接ダウンロードするので、変換作業等もなく、とても速いのです。  こうした背景を踏まえ、YouTube 動画の mpeg4 ファイル（h.264形式）へのダウンロードリンク先を自動的に抽出して「右クリック→名前をつけてファイルへ保存」で簡単にゲットできるサービスを作ってみました。ホワイトデーです。  YouTubeMP4 - YouTube の動画をmpeg4で高速ダウンロード / Download mpeg4 video from Youtube directly
  今朝閃いて今晩先ほどリリースです。今日はシエスタをしたので実質、半日でアイデアからドメイン取得、実装、リリースをしたことになります。もちろん仕組みは簡単なのでエロえらいわけではないですが、今まで最速でできたサービスです。  ダウンロードしたい YouTube 動画を選んでこのサービスに読ませるわけですが、 その方法が3つほどあります。以下です。  トップページにあるフォームにURLを入力する ブックマークレットを登録してDLしたいYouTube動画のページでクリック YouTubeのURLにmp4を足す。こんな感じ。    http://www.youtube.com/watch?v=FAPtTS0TYtU →　http://www.youtubemp4.com/watch?v=FAPtTS0TYtU   デモの様子をwinkというソフトでキャプチャして分かりやすく紹介するのを作りましたので、ご覧ください。  YouTubeMP4デモの様子   というわけで、半日で作ったサービスゆえ、まだバギーなところがあると思いますが、どうぞ使ってください！ あ、ちなみに、動画へのリダイレクト先であるYouTubeのサーバーがContent-Typeをうまく吐かないので 「右クリック→ファイルへ保存」しないと重たい文字化けの塊をみることになるので注意してください。  ところでこのサービスはとある目的への布石でしかない…かもね！ </description>
    </item>
    
    <item>
      <title>Perl から YouTube の新API を使って動画をアップロードする</title>
      <link>https://yusukebe.com/posts/2008/0313033113/</link>
      <pubDate>Thu, 13 Mar 2008 12:31:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0313033113/</guid>
      <description>昨日の夕方頃、YouTube API のドキュメントを見たら、急に内容が追加されていてびっくらこいたわけですが、 YouTube の API に新しく、動画をアップロードする機能やプレイヤーをJavaScriptから制御できる機能が追加されました。というわけで、早速 Perl を使ってローカルにある動画をYouTubeにアップロードするスクリプトを書いてみました。いろいろと癖があるので、適当に解説をします。  今回試したのは「Direct Uploading」という方法で、ローカルにあるスクリプトから直接動画ファイルを読み込んでポストするものです。他にもウェブフォームからユーザーにファイルを選んでもらってアップロードするやりかたもあるようです。この新API、とても充実しています（その代わりなのか昨日はやたらGDataのフィードが重たかったよ！）。  アップロードする流れは以下の順番になります。  Developer Key を取得 YouTube アカウントでの認証 authentication_token の取得 アップロードするビデオ情報の設定 リクエストの作成 アップロード 結果の得取   YouTube にある動画を検索して結果を取得するだけなら、GDataのフィードを読めばいいので、関係ないのですが、今回の場合は Developer Key が必要になってきます。 以下のページから登録ができます。  http://code.google.com/apis/youtube/dashboard/developerSignup    次にYouTubeアカウントの認証について説明します。 動画をアップロードするとなると、その人のYouTubeのアカウント名義でアップロードするわけであり、そのアカウント情報を用いて認証をしなければなりません。いつもYouTubeで利用しているユーザー名とパスワードを認証URLにPOSTで渡して、authentication_token とやらを取得します。 この authentication_token がアップロードをするリクエストに必要になってきます。 認証だけならリクエストURLに対してPOSTメソッドを発行するだけです。 最後にアップロードするサンプルスクリプトを掲載しますが、そのサンプルから認証をするサブルーチンを紹介すると以下のようになります。HTTP::Request::Common を使ってPOSTのリクエストを生成しています。 Emailパラメータにはユーザーアカウントを入れます。Emailとありますが、YouTubeに登録しているメールアドレスではありません。 アカウント名です。これが、最初にはまったポイントです。source パラメータはなんか適当に入れてればよさげ。 use LWP::UserAgent; use HTTP::Request::Common; my $ua = LWP::UserAgent-&amp;gt;new; sub auth { my $request = POST( &#34;https://www.google.com/youtube/accounts/ClientLogin&#34;, Content_Type =&amp;gt; &#39;application/x-www-form-urlencoded&#39;, Content =&amp;gt; [ Email =&amp;gt; $username, Passwd =&amp;gt; $password, service =&amp;gt; &#34;youtube&#34;, source =&amp;gt; &#34;uploads&#34;, ], ); my $response = $ua-&amp;gt;request($request); die $response-&amp;gt;status_line unless ( $response-&amp;gt;is_success ); $response-&amp;gt;content =~ /Auth=(.</description>
    </item>
    
    <item>
      <title>人気娼婦とたくさんのオッサンの 性行為で学ぶ TheSchwartz</title>
      <link>https://yusukebe.com/posts/2008/0307174031/</link>
      <pubDate>Sat, 08 Mar 2008 02:40:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0307174031/</guid>
      <description>Web2.0 時代のジョブキューサーバーと呼ばれて久しい TheSchwartz ですが、今更ながら必要に駆られて弄っています。どんなものかの正しい解説については tokuhirom が記事を書いているので気になる方はそちらをご覧ください→web2.0 時代のジョブキューサーバー Gearman と TheSchwartz の関係について - TokuLog 改め だまってコードを書けよハゲ。  ちなみに、俺は、性行為を例えに使ったサンプルを作ってみて、その挙動を確認して学んでいるところ、というのが今回のお題です。なので俺の拙い知識での理解なのであんま信用しないでください。あくまでネタということで。では説明に入ります。  まず、ジョブキューとは、というのを簡単に理解したのですが、まあ、その名の通り、ジョブはお仕事です。 しかし、時間がかかるお仕事の場合など、それにある制限を設けたいときなどがあります。 大変なお仕事が一気に来られたらそれを処理する仕事人さんが困ってしまったりするからです。 だから   「お仕事は同時に（例えば）一個しかさばけねーんだよ」   そして  「いちいちそのお仕事終わるのまってられねーから、順番が着たらやっといて」   って感じにしたいのです。  これをより性行為というものを通して具体的に想像していきます。 とある人気の娼婦がいました。性行為という仕事をする仕事人さんです。 そして、彼女と性行為をしたいオッサンがたくさんいます。彼らが突然大勢で「やらせろよ」と押しかけると、娼婦は大変です。もちろん穴は一つ（ここではあえて一つにします）しかないので、同時に性行為をすることができるのは一人のチンコとだけです。そこで、娼婦は「私とやりたいのならチンコを並べて置いといて、順番に処理するから」と言います。ということでオッサンたちは前の人との性行為が終わるのを待つことなく、ちんこだけ置いて去ればいいのです。あとは順番がきたら娼婦がかってにちんこと性行為をしてくれます。 もちろん、娼婦が暇なときはすぐにちんこと穴との性行為が始まるようになっています。 こうして、娼婦さんはたくさんのオッサンのちんこを順番に（キューとして）処理し、オッサンたちは自分以外のオッサンをあまり気にせず娼婦を妊娠させることができるわけです。  サンプルコードの総称は「sexschwartz」にしました。 仕事をする worker の 娼婦は一人でいいのですが、問題はたくさんのオッサンというところで、そのオッサンたちをどこで手に入れようかと思ったのですが、そこはいいのがありました。外国の俳優さんたちです。 makidaisuke さん products の Acme::Actors::JA （Acme-Actors-JA作った - D-6 [相変わらず根無し]）を使ってリストをYAML形式にして、オッサンである client が読み込み、ランダムで自分は誰であるかを決定するという仕組みです。そして、自分のチンコの名前を 娼婦であるworkerに伝えるということにしました。  ということで以下サンプルコードと動いているところです。  娼婦、sexschwartz_worker.pl。 #!/usr/bin/perl package Worker; use strict; use warnings; use FindBin; use lib &#34;$FindBin::Bin/lib&#34;; use base qw(TheSchwartz::Worker); use IO::File; use utf8; use Encode; sub work { my ( $class, $job ) = @_; my $chinko = $job-&amp;gt;arg-&amp;gt;{chinko}; print encode(&#34;utf-8&#34;,&#34;$chinko 気持ちいい\n&#34;</description>
    </item>
    
    <item>
      <title>YourAVHost にジャンルタグ機能を追加</title>
      <link>https://yusukebe.com/posts/2008/0211010106/</link>
      <pubDate>Mon, 11 Feb 2008 10:01:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0211010106/</guid>
      <description>  とあるオジサンと YourAVHost についてチャットしていたら   AV 女優名をあまりしらないオジサン（自分）にとっては、
ジャンルとかシチュエーション別に動画が見つかったら嬉しいでござる。   と言ったとか言わないとか。とはいえ、女優名別のみならず、他の方法で動画を探す手立てが欲しいというリクエストはあったので、これを機に YourAVHost にジャンル機能を追加しました。  トップページのジャンルタグというところをクリックすればタグクラウドを見ることができ、また各エントリーにジャンルタグが表示されるようになりました。女優タグと同じくそのタグが動画の内容とマッチしているかという精度に関してはあまり確証できるものではありませんが、ひとつの目安になると思います。   以下18禁リンクになりますが、メジャーなタグだと「3P」、「おっぱい」、「女子高生」とかがあります。 珍しいのだと、「おむつ」、「ジーパン」、「電マ」とかあって結構笑えます。  YourAVHost - 3P のYourFileHost動画 YourAVHost - おっぱい のYourFileHost動画 YourAVHost - 女子高生 のYourFileHost動画 YourAVHost - おむつ のYourFileHost動画 YourAVHost - ジーパン のYourFileHost動画 YourAVHost - 電マ のYourFileHost動画   どのような言葉を拾って「ジャンル」としているかという仕組みですが、これはアダルトビデオ向けジャンル一覧の辞書を利用しています。この辞書、実はこれまた別の Web サイトを作ろうという話が昔持ち上がってそのために一緒にやっていた某鎌団子がせっせと作ってくれたものです（そのサイトはまだできてませんがそのうち作るかも）。結構網羅的でかつセンスフル、いい仕事しています。 そのリストを元に、テキストを渡すとジャンルの文字列を配列として返してくれる Acme::AV::Genre というPerlのモジュールをでっちあげクローラーの中で使っています。vaginarepos にうｐってますが、こんな感じで使えます。 use Acme::AV::Genre; use utf8; my $text = &#34;あいだゆあ　スチュワーデス姿で３Ｐファック！&#34;; my $genre_parser = Acme::AV::Genre-&amp;gt;new(); my $genres = $genre_parser-&amp;gt;text($text); foreach my $genre (@$genres) { utf8::encode($genre); print &#34;$genre\n&#34;; } #「3P」と「スチュワーデス」が出力される   また、ジャンルタグの他にも機能追加を行いました。 きっかけは、「一ファン」と言う方から以下のようなメールをいただいたことです。   ゆうすけべ様  いつも楽しませて頂いております。
youravhostで、使えそうなRSSをまとめてみました。
自らyourfilehostに動画をアップロードしているサイトばかりです。
これらのRSSを使うと、新鮮なアップしたての動画情報が得られると思います。
もしよろしかったら、youravhostの参照元RSSに加えてられないでしょうか？
やはり、新しい動画を求めてしまいます＾＾；；；宜しくお願い致します。
  このように yourfilehost の動画を探してリンクしている質のいいブログを紹介してもらいました。 そこでせっかくなので、今までテクノラティの検索結果だけをリソースとしていたのに対し、yourfilehost を紹介している外部のブログのフィードをリソースとするという拡張もいたしました。 この参照元 RSS の拡張機能ですが、YourAVHost が単に外部ブログをリソースとして使うのではなく、そのブログとのやり取り（相互リンクの新しい形みたいな）ができればいいと思っています。  というわけで、YourAVHost のマイナーヴァージョンアップについてでした。 今後は、この YourAVHost のプラットフォームを利用してすごいサービスを展開しようと思っています。 これまたお楽しみに。Enjoy！ </description>
    </item>
    
    <item>
      <title>「エロサイトにおけるコンテンツマッチ型広告APIの自作」の資料</title>
      <link>https://yusukebe.com/posts/2008/0121113124/</link>
      <pubDate>Mon, 21 Jan 2008 20:31:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0121113124/</guid>
      <description>  よい子の皆さん、真似しないでください。  露出狂友の会、野望新年会 で発表した資料をこちらに置いておきます。   エロサイトにおけるコンテンツマッチ型広告APIの自作    *注意: YourAVHostの広告システムについては、DMM.Adult のアフィリエイト運営会社様からは現状のシステムを見せて一応の了承を取っております。 </description>
    </item>
    
    <item>
      <title>YourAVHost その後</title>
      <link>https://yusukebe.com/posts/2008/0117143551/</link>
      <pubDate>Thu, 17 Jan 2008 23:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0117143551/</guid>
      <description>去年の12月26日未明にリリースし、年末の下半身に衝撃をもたらしたらしいという YourAVHost 。 現在はてなブックマークしたユーザー数はエロサイトとして驚異的な「738Users」。 1月6日には動ナビという日本最大の裏ポータルサイトにも取り上げられ、ピーク時にはサイト内合計で 12万PV / 1day 。 友達にも何故か「おめでとう」という電話が深夜にかかってきて、サイトを作ったことを褒めてもらいました。  そんなYourAVHost、公開してから地味にいくつかの新機能の実装、アクセス対策、また広告の変更などを行ってきました。ようやくアクセスが落ち着いた段階なのでこのようなYourAVHostの変更点や俺が学んだことなどを簡単に紹介していきたいと思います。 12万PV / 1day のアクセス  ある程度予想はしていましたが、さすがにエロサイトなので、これほどのアクセスが来るとは思ってもいませんでした（というか今考えたらエロサイトだからアクセスが来たとも言えるかもしれませんね）。 これは完全に後述する俺のWebサーバー周りの設定サボリが原因なのですが、 サーバー止まりまくりです。リリースした初日、次の日とはてなブックマーク経由のユーザーが押し寄せ、 apache のプロセスが立ち上がりまくって、3G 積んでいるメモリを圧迫。 そのまま Swap を食いつぶしてフリーズするという事態が多々起こりました。 また、動ナビに取り上げられた日には先ほど述べた通り、12万PV / 1day のアクセス。 メモリを食いつぶす以前に、apache の MaxClients で設定している 256 を上回り瞬間的に処理しきれない状態が続きました。  Google Analytics のグラフ
 そもそも、10万PV / 1day レベルのアクセスというのはそれほど多いわけではなく、普通に運用している方であれば簡単にさばくことができるものだと思います。 完全に俺がやっているコンテンツをサーブする仕方がまずかったようで、今思うとお恥ずかしいばかりです。 Webサーバーの構成は、静的コンテンツを扱いまたリバースプロキシの役割も負う apache2 と、 今回作ったYourAVHostのページなどダイナミックなコンテンツを扱う mod_perl を読み込んだ apache1.3 と2つのWebサーバーを物理的に1台のサーバーでまかなうという具合で成り立っています。これを踏まえて、大きな問題は以下の2つでした。  1.YourAVHostのページ内に含まれる画像を全て mod_perl の apache でサーブしていた 2.そこで画像を全て static なコンテンツを扱う apache2 でサーブさせようとしたが、キャッシュの設定、具体的には mod_expire の設定を何もしていなかった   1 の全てを mod_perl でサーブするというのはあまりにも致命的なやり方でした。 mod_perl 環境では、apache のプロセス上にコンパイル済みの Perl プログラムが常駐することになり、プロセスひとつに付きメモリ使用量が top コマンドで 50M 前後、いやそれ以上になることがあります。 YourAVHost には画像がたくさんありますから、それらを読み込むたびに 50M のプロセスが動くことを考えるとすぐにサーバー全体のメモリを食いつぶしてしまうことは明白です。 さすがにこれはないなと、自分で気づき、すぐさまスタティックなコンテンツを扱うホストを立て、 mod_perl を組み込んでいない apache 2 の方で画像をサーブするようにしました（ サーバーを変えずとも httpd.conf で設定し mod_perl を組み込まずサーブする方法もあると思います ）。 これで圧倒的にページ全体の読み込み速度が速くなりました。  ところが、動ナビに取り上げられた日は、apache2 の MaxClients である 256 のアクセスを同時にさばくことができなくなりました。KeepAlive の設定なども確かなはずです。 そこで次の日 IRC の #catalyst-ja な方々にアドバイスをいただきました。 とりあえずサイトのパフォーマンスを計測してくれる YSlow という聞いたことはあるが使ったことのない、Firefox の アドオンを勧められて入れてみました→YSlow :: Firefox Add-ons。 で、だからといって今だサイトの評価は最低の「F」ランクなのですが、 問題2 のコンテンツのキャッシュについて問題ありだと言うことを気づかせてくれました。 具体的にはmiyagawaさんに言われたのですが、静的コンテンツをサーブする apache2 に mod_expire を導入して設定するということです。 その結果、YourAVHost で扱うような画像は変更されることがありませんから、それをそれぞれの HTTPレスポンスヘッダに Expires を付加するという形で「1週間は変更されないよ」という風にブラウザ側に教えてあげることができます。するとブラウザは一度読み込んだ画像に対して、expire していなければサーバー側に問い合わせることがなくなり、apache2 へのアクセスはかなり軽減されるようになります。 この設定をするだけで、負荷は大きく減り、次の日も同じくらいのアクセスがあったのですが、問題無くさばくことができました。 catalyst-ja の皆様、へっぽこな質問に答えていただきありがとうございます。  ということでまとめると、  mod_perl で処理する必要の無い静的コンテンツは mod_perl で扱うな 静的コンテンツには mod_expire で Expires ヘッダーをつけてキャッシングさせよ   となります。 いやぁ、ほんとに俺のやり方が単にまずかっただけですが、 まさに経験をもってこれら設定の仕方と効果を感じることができて、とても勉強になりました。 新機能  次にYourAVHostの地味な新機能を2つ紹介します。 まずサイトを AutoPagerize に対応させました。  AutoPagerizeはページ分割されたWebサイトを自動的に下に継ぎ足して表示するスクリプト。FirefoxのGreaseMonkey上で動作する。  AutoPagerizeとは - はてなダイアリーより   これによりAutoPagerizeをインストールし、Onにしていると、 トップページから2ページ目に行くためにいちいちクリックしていなくてはいけないところ、 次のページが自動的に継ぎ足される形になります。これで、どんどんとエロファイルを見ていくことができるようになりましたね！  もうひとつの新機能、と呼ぶまでもないかもしれませんが、サイトの更新を知らせる Twitterボット を作りました。こちらです。  Twitter / YourAVHost   とある人から熱烈なリクエストがあったので。サイト自体がRSSを出力しているから、Plagger::Plugin::Publish::Twitterが使えてあっさりできました。 follow していれば、YourAVHostの最新情報がいつでも手に入るよ！ 広告を全面的DMMに、自作APIでコンテンツマッチ  これは、自分にとっては大きなことで、実装も結構パワー使いました。 YourAVHost の広告というか、サイト上での導線について個人的に意見を持っていて、 実際に自分もある程度実践していることがあります。 YourAVHost経由で、YourFileHost にて見たエロ動画が気に入って、 好きになった女優さんがいたら、次は高画質なのを見たくなるだろう。 それでその女優さんが出ている気になる高画質のビデオがすぐ見れるとなったら、お金払ってもいいよね、 というものです。 その高画質なビデオの供給先となりうるのが、今回扱うことにした DMM.</description>
    </item>
    
    <item>
      <title>Flickr には某氏厳選47人のグラビアアイドルにおいて画像が8407枚あり、そのうち2670枚は小倉優子</title>
      <link>https://yusukebe.com/posts/2008/0113091331/</link>
      <pubDate>Sun, 13 Jan 2008 18:13:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2008/0113091331/</guid>
      <description>id:gamella こと大学の同期のお友達「ともちゃん」がErogeekチックなことをしていたのを発見。   今、ちょっと作成を考えているWebサービスがあって、その練習のためにFlickrから画像を取得するスクリプトを書きました。 （中略）
 何をしたかったかと言うと、Flickrにどれくらいグラビアアイドルの画像がアップされているかを調べたかったのです。理由は聞かないでください。  とりあえず、グラビアアイドルのリストを作成します。個人的に気に入っているグラビアアイドルを50人ほどピックアップしてみました。…  Flickrから2000枚の品質の高いグラビアアイドル画像を取得してみた - Future Insightより   理由は聞きません。でも、そのともちゃんチョイスのグラビアアイドルリスト、貸して下さい！ というわけで、ともちゃんはPythonでスクリプトを書いてたけど、俺はPerlでダウンローダー作った（Plaggerでもできそうだけど素で書いてみたかった）。  お決まりの iPod touch にいれるとこんな感じアイドルまみれ
 それで、最後にそのスクリプトを貼り付けておくけど、面白かったのはともちゃんも調べたかったという、各グラビアアイドルの画像が何枚 Flickr にアップされているかという数。  Flickr API 初めて使ってあんまよく理解していないかもしれないけど、 「flickr.photos.search」メソッドにアイドル名を text クエリーとして渡すと上限500でURLが返ってくる仕組みらしい。ともちゃんはそのURL数、上限500で写真の数をカウントしていたけれど、APIの返り値に total というのがあって、それは500以上でも Flickr 内にあるそのクエリーにヒットした画像の数を返してくれる。Perlのコードだとこんな感じ（XML::Simpleでパースしているのは好みっす）。 use Flickr::API; use XML::Simple; my $api_key = &#34;&#34;; my $api = new Flickr::API( { key =&amp;gt; $api_key, forcearray =&amp;gt; [&#39;photo&#39;] } ); my $xs = XML::Simple-&amp;gt;new( keyattr =&amp;gt; [] ); warn &#34;total_count is &#34; . &amp;amp;search(&#34;query&#34;); sub search { my ($query) = @_; warn &#34;searching $query ...&#34;; my $res = $api-&amp;gt;execute_method( &#39;flickr.photos.search&#39;, { text =&amp;gt; $query } ); my $ref = $xs-&amp;gt;XMLin( $res-&amp;gt;{_content} ); return 0 unless $ref-&amp;gt;{photos}-&amp;gt;{total}; return $ref-&amp;gt;{photos}-&amp;gt;{total}; }   このコードを使い、日本語の名前とアルファベット名でそれぞれ検索して total のカウントを足して数えてみると、一位はダントツ2670枚で小倉優子りん。2位が沢尻エリカの633枚だからすごい差。ちなみに、1枚しかなかったのは最下位、和希沙也ちゃんだった。  リストには47人のグラビアアイドルがいて、その全てのFlickr画像の数を足すと8407枚になった。なるほど、Flickr にはユーザー撮影した写真がばかりであまりそのような画像は少ないと思ったけど、そこそこあるんだな。いや、ってかぶっちゃけ多いのか少ないのかよくわからないな。とにかく小倉優子りんがダントツなのは把握した。  結果をDumpしたのを以下に貼り付けておきます。ともちゃんはこの結果からどのような考察をしてくれるのだろうか。 total_count: 8407 --- count: 2670 en: Ogura Yuko ja: &#39; 小倉優子&#39; --- count: 633 en: Sawajiri Erika ja: &#39; 沢尻エリカ&#39; --- count: 614 en: Minami Akina ja: &#39; 南明奈&#39; --- count: 507 en: Hoshino Aki ja: &#39; ほしのあき&#39; --- count: 362 en: Toda Erika ja: &#39; 戸田恵梨香&#39; --- count: 304 en: Kawamura Yukie ja: &#39; 川村ゆきえ&#39; --- count: 278 en: Ayase Haruka ja: &#39; 綾瀬はるか&#39; --- count: 264 en: Nagasawa Masami ja: &#39; 長澤まさみ&#39; --- count: 252 en: Yamamoto Azusa ja: &#39; 山本梓&#39; --- count: 238 en: Morishita Chisato ja: &#39; 森下千里&#39; --- count: 233 en: Nagasaki Rina ja: &#39; 長崎莉奈&#39; --- count: 190 en: Natsukawa Jun ja: &#39; 夏川純&#39; --- count: 187 en: Irie Saaya ja: &#39; 紗綾&#39; --- count: 168 en: Kosaka Yuka ja: &#39; 小阪由佳&#39; --- count: 159 en: Hara Fumina ja: &#39; 原史奈&#39; --- count: 148 en: Takizawa Nonami ja: &#39; 滝沢乃南&#39; --- count: 109 en: Yasu Megumi ja: &#39; 安めぐみ&#39; --- count: 107 en: Tsugihara Kana ja: &#39; 次原かな&#39; --- count: 98 en: Yuki Maomi ja: &#39; 優木まおみ&#39; --- count: 87 en: Isoyama Sayaka ja: &#39; 磯山さやか&#39; --- count: 84 en: Akiyama Rina ja: &#39; 秋山莉奈&#39; --- count: 77 en: Mitsuya Yoko ja: &#39; 三津谷葉子&#39; --- count: 74 en: Aibu Saki ja: &#39; 相武紗季&#39; --- count: 74 en: Iwasa Mayuko ja: &#39; 岩佐真悠子&#39; --- count: 55 en: Komatsu Ayaka ja: &#39; 小松綾夏&#39; --- count: 49 en: Anzu Sayuri ja: &#39; 杏さゆり&#39; --- count: 45 en: Sugimoto Yumi ja: &#39; 杉本有美&#39; --- count: 36 en: Okubo Mariko ja: &#39; 大久保麻梨子&#39; --- count: 34 en: Tokito Ami ja: &#39; 時東あみ&#39; --- count: 33 en: Kumada Yoko ja: &#39; 熊田曜子&#39; --- count: 32 en: Nakamura Miu ja: &#39; 仲村みう&#39; --- count: 28 en: Yabuki Haruna ja: &#39; 矢吹春奈&#39; --- count: 23 en: Ando Sayaka ja: &#39; 安藤沙耶香&#39; --- count: 21 en: Nakagawa Shoko ja: &#39; 中川翔子&#39; --- count: 19 en: Hamada Shoko ja: &#39; 浜田翔子&#39; --- count: 19 en: Sato Hiroko ja: &#39; 佐藤寛子&#39; --- count: 17 en: Yasuda Misako ja: &#39; 安田美沙子&#39; --- count: 14 en: Shiratori Yuriko ja: &#39; 白鳥百合子&#39; --- count: 13 en: Aizawa Hitomi ja: &#39; 相澤仁美&#39; --- count: 11 en: Natsume Rio ja: &#39; 夏目理緒&#39; --- count: 11 en: Wakatsuki Chinatsu ja: &#39; 若槻千夏&#39; --- count: 9 en: Morishita Yuri ja: &#39; 森下悠里&#39; --- count: 8 en: Kiguchi Aya ja: &#39; 木口亜矢&#39; --- count: 5 en: Suzuki Akane ja: &#39; 鈴木茜&#39; --- count: 5 en: Yamazaki Mami ja: &#39; 山崎真実&#39; --- count: 2 en: Kinoshita Yukina ja: &#39; 木下優樹菜&#39; --- count: 1 en: Kazuki Saya ja: &#39; 和希沙也&#39;   ところで、よくよく、リストとか写真とか見てみると、「三津谷葉子」とか「夏川純」、そして「磯山さやか」とうまいこと俺の趣向に合っていることが判明した。ともちゃんGJ！ もちろん、ゲットした画像は iPod touch でくぱぁしたよ！   では最後にダウンローダーのPerlスクリプトを貼り付け。Flickrに過度な負荷を与えないようにね。 あ、あとダウンロードしなくても画像見たいだけだったらともちゃんがWebアルバム作ってくれてるよ→idol album。 #!</description>
    </item>
    
    <item>
      <title>YourAVHostにあるお気に入りのAV女優の動画をPlaggerで一括ダウンロードしてiPodで見るエロハック</title>
      <link>https://yusukebe.com/posts/2007/1230155942/</link>
      <pubDate>Mon, 31 Dec 2007 12:59:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1230155942/</guid>
      <description>昨日おとといと恒例の年末ネタ旅行のロケに鎌団子と行って来た。 まぁ内容は年明けに予告編映像をアップするのでそれを見てもらうとして、 その道中ひらめいたことを年末ハック、いや年末エロハックとしてやってみたというお話。  鎌団子は最近、「サラリーマンの見方 花太郎」に通っていて、そこで鑑賞したDVDの中に、最近すごいはまったAV女優さんがいたということで盛り上がったんですよ。「おおさわゆか」っていうらしい。それ聞いて俺もたまらなく見たくなったわけ。  それで帰ってきてこの前作ったYourAVHostで検索かけてみたの。 そしたらでてくるじゃん！ でもね、やっぱ、鎌団子が「おおさわゆか、いいよー」って言った瞬間に二人して見たかったなーと思うわけ。 だからiPod touch とか iPod nano とか iPod classic でもなんでもいいんだけど、動画が見れる iPod にお気に入りのAV女優さんの映像を入れておけば楽しいんじゃね！と思った。 というか、YourAVHost作って使ってみて、普通に前々からもたくらんでいたことなんだけど。  かったるい前置きが長くなりましたが、何をしたいかといいますと、 YourAVHostのAV女優タグで指定したタグの映像をYourFileHostから一気にダウンロードしてiPodで見れる形式に変換してpodcast吐いてiTunes経由でiPodに入れてうはうは！というエロハックです。昔紹介したYouTubeとかニコニコ動画の映像をPlaggerで（ry のYourAVHost版になります。   まず、これを実現するために、YourFileHostにあるFLV形式の映像ファイルへのパスをenclosureとして持つRSSを出力するようにYourAVHostに少し手を加えました。 メインのRSSと異なり、1映像ファイルにつき 1 entry のRSSになっています。 さらに、タグごとに絞り込んだRSSを吐かせるようにもしました。 パスは  トップ（新着）が http://youravhost.net/rss_enclosure タグ別が　http://youravhost.net/tag/タグをURIエスケープしたもの/rss_enclosure   となっています。リクエストごとにYourFileHostのAPIを呼ぶので出力が遅いのはご勘弁を＆過度のアクセスはご遠慮ください。  各女優タグページの
 「RSS with Enclosure (flv)」というリンクからflvのEnclosure入りフィードを吐いている
 後は、ニコニコ動画やはてぶ＋YouTubeの時と同じようにPlaggerで料理をするだけです。 分けると以下のようなフェーズになります。  タグ別フィードをSubscribe Filter::FetchEnclosure でflvをダウンロード（enclosureタグがすでにRSSに入っているのでFind::Enclosureする必要無し！） Filter::FFmpeg で h264 形式に変換 Filter::RewriteEnclosureURL でenclosureのURLを変換したものに書き換え フィードをPublish iTunesで読み込ませてダウンロード iPod をつないで同期 あとは楽しむだけ   podcastをiTunesで読み込ませたところ
 iPod touch で見放題！
 これがPlaggerの config.yaml のサンプルです。 plugins: - module: Subscription::Config config: feed: - url: http://youravhost.net/rss_enclosure - module: Filter::FetchEnclosure config: dir: /home/user/dir rule: module: Deduped path: .</description>
    </item>
    
    <item>
      <title>yourfilehostをAV女優名で探せるエロサイトを作ってみた</title>
      <link>https://yusukebe.com/posts/2007/1227001445/</link>
      <pubDate>Thu, 27 Dec 2007 09:14:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1227001445/</guid>
      <description>YourFileHostの動画をAV女優名別に、検索したり、新着動画をみたりすることができるエロサイト「YourAVHost」を作ってみました。これまでは優良であり有料なアダルトサイトを紹介するサービスを作ってきましたが、今回は強く要望があった無料で見れる動画の紹介サービスになります。18禁です。  YourAVHost - YourFileHostの動画をAV女優名別で検索 
  このサービスの鍵となる「YourFileHost」とはYouTubeのようにユーザーがアップロードした動画をブラウザで簡単に見ることができる海外のサービスなのですが、YouTubeでは厳しいエロに対する規制が全くないのでエロい動画がたくさん置いてあります。ところが、動画に対する情報＝メタ情報が非常に少なく、例えば日本語でタイトルを検索するということがこのサービス上では不可能です。某動画検索サービスを裏技的に使えば日本語での検索も可能とのことですが、 ユーザーが検索したいキーワードはだいたい決まっているので、ここはAV女優名と決めうちをして、AV女優名で検索したり、AV女優名ごとにYourFileHostの映像が見れたら嬉しいなぁ、というのを叶えるのがこのYourAVHostとなります。  補足として、YourAVHostについてより引用。   YourAVHostとは、YourFileHostの動画をAV女優名別に検索をしたり、 新着動画を見ることができるかもしれないサイトです。  （中略）トップページからは、最近ブログにリンクが張られたYourFileHostでAV女優と関係のある動画の新着情報が表示されています。 女優タグページでは女優名がたくさん並んでおり、女優別にYourFileHostの動画を見ていくことができます。   YourFileHostの映像はよくエログとかって呼ばれているようなアダルトなブログにリンクが張られています。 これが後述する仕組みにも直結するよいリソースとなるのですが、 こうしたサイトのYourFileHostの動画へのリンクがいわゆるだましリンクになっているケースが非常に多くて結構うざいのです。例えば、   白石ひより 動画1 動画2 動画3 動画4 動画 5   というように「動画No.」というテキストにリンクが張ってある風でも、実際に飛んでみたらアフィリエイトサイトだったというようなものがあります。サイト運営者側としてはYourFileHostの無料動画をえさにして、だましリンクという形で、うまくいったら紹介料を取るというまぁ古典的なやり方ですね。 だまされずに動画までたどり着ければ、実際、YourFileHostの動画は多少画質が荒いですが、結構いい感じに見て興奮できます。ところが、まだ問題があって、よくひとつの動画が分割してアップロードされている場合があり、続きを見るにはどこのURLをたどればいいの？という罠に陥りがちです。 今回作ったYourAVHostはAV女優名別に動画を見たいという主目的がありますが、 個人的な目的として今述べたような問題を全てクリアに解決するサービスを目指しました。 つまり、だましリンク無し、広告を入れるならちゃんと広告とわかる広告を内容にマッチさせてうまく入れる、 分割された動画をまとめてひとつのエントリーとしてリンクを張る、というものです。  実際できたものを自分で使ってみると、  たまにAV女優とマッチングされた動画に出演している女優が違うことがある まだ蓄積されている情報が少ない   というシステム上のしょうがない点があるもののかなりイイ感じです。 思うに、今まで自分が見たことのないAV女優さんの名前を見つけて、そのプレイを「試聴」のような感覚でYourFileHost映像を見るという流れができてる点が評価に値します。 各エントリーの左側にはYourFileHostの映像のサムネイルとリンクが設けられているのですが、 右隣にはその女優さんに関連するエロページへのリンクが張ってあります。 オンラインで見れる優良アダルトサイトへのものが主で、気に入ったらそのサイトから購入して高画質で見ることもできます。実はこの情報、俺が以前作ったErohoo!という選りすぐった優良アダルトサイトからのみキーワードで検索できるサービスの情報をそのまま流量しています。ってか Erohoo! の API を作っていわゆるマッシュアップをしている形です。自分で作ったエロサイト同士をマッシュアップさせるなんて思ってもみなかったのですがなかなか面白いです。  というわけで、夜のおかずにするなり、新しいAV女優を発掘するなり、皆さん楽しんでください。  では仕組みを簡単に説明。 ウェブアプリとしては蓄積された情報を新着順、タグ別、エントリー別に表示させるだけといういたってシンプルなものです。なので鍵となるのは情報を取ってきて、AV女優名と関連付けたりするクローラーです。 どのようにYourFileHostの映像を探してきて、AV女優名とマッチングさせているのかというと、 まず、technoratiのブログ検索からYourFileHostの動画へのリンクを張っているブログを探してきてフィードを取得します。それをパースして、各エントリーのtitleやdescriptionに対して、AV女優名が含まれているかどうかの判定を行っています。これは以前紹介した「Acme::JapaneseAvActressを使ってPerlで文章の中にAV女優の名前が含まれているかを判定する」と同じアルゴリズムで行っています。ようはこの仕組みのための布石だったわけです。 もし、AV女優名が含まれているエントリーがあればそのURLを一度フェッチして、YourFilehostへのリンクを全てひっぱてきます。これで漏れがなくなります。そのリンクを、「実はある」というYourFilehostの裏APIを自作で実装したモジュール「WWW::YourFileHost」に与えてサムネイル画像を取得しています。 やはりサムネイルがあるかないかで見た目やくいつきがだいぶ変わりますので。 こうして集めた情報をmysqlにぶち込んで、クローラーは役目は終わり、後はCatalystで作ったウェブアプリで読み込むのみです。 先ほども述べましたが、一応エロにはめずらしいマッシュアップサイトになっていて、以下のサービスに依存しています。  technorati wikipedia(Acme::JapaneseAvActressで使用) YourFileHost Erohoo!(自作、広告で使用)   ってな具合で、なかなか楽しい実装になりました。たびたび申し上げますが、よろしければ楽しんでください！ 関連エントリー  ゆーすけべー日記: YourAVHostにあるお気に入りのAV女優の動画をPlaggerで一括ダウンロードしてiPodで見るエロハック  関連書籍 
 AV女優 (文春文庫) posted with yusukebe.com::AmazonSearch on 2008.1.5 永沢 光雄  文庫 / 文藝春秋 (1999/06) Amazon 売り上げランキング: 10396  Amazon おすすめ度の平均:  ズシンと来ました。  深くて冷たい河の中  可愛かったです。とても。   Amazon.</description>
    </item>
    
    <item>
      <title>dankogai の添削に miyagawa product で答える</title>
      <link>https://yusukebe.com/posts/2007/1209115414/</link>
      <pubDate>Sun, 09 Dec 2007 20:54:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1209115414/</guid>
      <description>  Danさんに添削された Acme::JapaneseAvActress。  404 Blog Not Found:perl - 勝手に添削 - Acme::JapaneseAvActress   モジュール名をどうするかはちとおいといて（ちょｗおいときすぎ＞＜）、   次にAcme::JapaneseAvActress::Actressのフィールド。$aja-&amp;gt;yomiに対応する$aja-&amp;gt;engnameがあると、海外のerogeeksも喜ぶかも。    この部分。Danさん本人が Lingua::JA::Kana というかなとローマ字を変換するモジュールを先ほど作ったので、これ使えば女優のローマ字を返すメソッドできるんじゃね？と思ってはてブしたら、miyagawaさんが   yusukebe: Lingua::JA::Kanaは人名だとうまくいかないとおもう
use Lingua::JA::Hepburn::Passport
  と教えてくれた。つまり、人名を Lingua::JA::Kana 使ってそのままローマ字変換すると「ゆうこ→yuuko」とかになってしまう。この場合「ゆうこ→yuko」となって欲しい。 そこで Lingua::JA::Hepburn::Passport 。 「日本の外務省パスポートのルール にあるヘボン式に則ったもの」ということで人名をそれっぽくヘボン式ローマ字に変換してくれる。 この2つのモジュールを試す、簡単なスクリプトを書くとこういう具合になった。 use utf8; use Lingua::JA::Kana; use Lingua::JA::Hepburn::Passport; my $hepburn = Lingua::JA::Hepburn::Passport-&amp;gt;new; print $hepburn-&amp;gt;romanize(&#34;ゆうこ&#34;) . &#34;\n&#34;; #YUKO print kana2romaji(decode_utf8 &#34;ゆうこ&#34;) . &#34;\n&#34;; #yuuko   おおー、miyagawa++; 。 ってなわけで、Lingua::JA::Hepburn::Passport を使って Acme::JapaneseAvActress の女優さんクラスに engname メソッドを追加しました。 sub engname { my $self = shift; my $yomi = $self-&amp;gt;yomi; $yomi = decode(&#34;utf-8&#34;,$yomi); my $hepburn = Lingua::JA::Hepburn::Passport-&amp;gt;new; return $hepburn-&amp;gt;romanize($yomi); }   これで、海外のエロギークが喜ぶかもね！  /lang/perl/Acme-JapaneseAvActress - CodeRepos::Share - Trac  </description>
    </item>
    
    <item>
      <title>Perlで文章の中にAV女優の名前が含まれているかを判定する</title>
      <link>https://yusukebe.com/posts/2007/1207074138/</link>
      <pubDate>Fri, 07 Dec 2007 16:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1207074138/</guid>
      <description>先日紹介した、日本のAV女優一覧を取得するPerlモジュール「 Acme::JapaneseAvActress  」。Danさんに添削されたことはひとまず置いておいて、 これを応用したスクリプトを書いてみました。 文章の中にAV女優の名前が含まれていたら、そのAV女優オブジェクトを返すというものです。 テキストを解析するに当たって woremacx さんが作った「WebService::YahooJP::TextParse」を使わせていただきました。woremacx ++;  例えば「白石ひよりと柚木ティナとおいかわなおはやっぱカワイなぁ」という文章を解析する コードはこんな具合です。 #!/usr/bin/perl use strict; use warnings; use WebService::YahooJP::TextParse; use Acme::JapaneseAvActress; use Encode; use Data::Dumper; my $text = &#34;白石ひよりと柚木ティナとおいかわなおはやっぱカワイなぁ&#34;; my $config = { appid =&amp;gt; &#34;&#34; }; my $ma = WebService::YahooJP::TextParse-&amp;gt;new(%$config); my $actress = Acme::JapaneseAvActress-&amp;gt;new( { &#39;cache_root&#39; =&amp;gt; &#39;/tmp/avactress&#39;, &#39;default_expires&#39; =&amp;gt; &#39;7days&#39;, } ); $actress-&amp;gt;get; my $iter = $ma-&amp;gt;analysis($text); my @temp = (&#34;&#34;,&#34;&#34;); my @actress; while ( $iter-&amp;gt;hasNext ) { my $word = $iter-&amp;gt;getNext(); my $name = $temp[0] . $word-&amp;gt;{surface}; my $yomi = $temp[1] . $word-&amp;gt;{reading}; utf8::encode($name); utf8::encode($yomi); if ( $actress-&amp;gt;name($name) ) { push( @actress, $actress-&amp;gt;name($name) ); } elsif ( $actress-&amp;gt;yomi($yomi) ) { push( @actress, $actress-&amp;gt;yomi($yomi) ); } $temp[0] = $word-&amp;gt;{surface}; $temp[1] = $word-&amp;gt;{reading}; } print Dumper( \@actress );   結果は yusuke@com:~/work/ero$ perl textparse.</description>
    </item>
    
    <item>
      <title>Amazonアソシエイト決算2007.11を発表するテスト</title>
      <link>https://yusukebe.com/posts/2007/1206113225/</link>
      <pubDate>Thu, 06 Dec 2007 20:32:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1206113225/</guid>
      <description>Danさんの真似をして「Amazonの2007年11月分の決算の集計が終わったので結果を発表します。」というこのエントリーを書くために、 AmazonアソシエイトからのレポートをXMLで取得して、パースしてHTMLに書きだすというPerlのスクリプトを書いた。で、みてみた。所詮、俺なんかの範疇では3位くらいまでしかちゃんと格付けできないことがわかった。 そして、エロDVDがたくさん売れてた。  というしょぼいランキングですが、せっかく作ったので、1位から3位を紹介します。 エロDVDはその中には含まれていないので心配ご無用です。  えー、1位は「いかにして問題をとくか」でした。 「ゆーすけべー日記: いかにして効率よく大量のおっぱい画像をダウンロードするか」というエントリーに張ったのが功を奏し結構売れてます。 実際、いい本なので、まだ味読の人は是非。 個人的には、3位以内には入っていませんが、 「ゆーすけべー日記: &#34;Welcome To The Black Parade&#34; - My Chemical Romance」で紹介したマイケミの「ザ・ブラック・パレード」が売れたのが嬉しいです。   いかにして問題をとくか
1位だよ！
[本日記による言及]   あなたはコンピュータを理解していますか? 10年後、20年後まで必ず役立つ根っこの部分がきっちりわかる！ (サ
2位だよ！
[本日記による言及]   星がきれい
2位だよ！
[本日記による言及はないよ]   メタマス!―オメガをめぐる数学の冒険
3位だよ！
[本日記による言及はないよ]   仙界伝 封神演義 外伝新章
3位だよ！
[本日記による言及はないよ]   ファイナルファンタジーXI アルタナの神兵 拡張データディスク
3位だよ！
[本日記による言及はないよ]    日記で言及してなくても結構売れたりするものですね。 ちなみに、Amazonが出力するreport.xmlをパースしてHTMLに書き出すPerlのスクリプトはこんな感じです。 中古で売れた本の重複を防いだり、順位付けをするため、ちょっと長くなってます。 #!/usr/bin/perl use strict; use warnings; use XML::XPath; use XML::XPath::XMLParser; use Template; use Unicode::RecursiveDowngrade; my $xp = XML::XPath-&amp;gt;new( filename =&amp;gt; &#39;report.xml&#39; ); my $nodeset = $xp-&amp;gt;find(&#39;//Item&#39;); my @lists; foreach my $node ( $nodeset-&amp;gt;get_nodelist ) { #print Dumper($node); my %attribute; foreach my $attr ( @{$node-&amp;gt;find(&#39;@*&#39;)} ){ $attribute{$attr-&amp;gt;getName} = $attr-&amp;gt;getNodeValue; } push(@lists, \%attribute); } my @items; foreach my $list (@lists) { my $flag = 1; foreach my $item (@items) { if( $list-&amp;gt;{Title} eq $item-&amp;gt;{Title}){ $item-&amp;gt;{Qty} ++; $flag = 0; last; } } push(@items, $list) if $flag; } @items = sort { $b-&amp;gt;{Qty} &amp;lt;=&amp;gt; $a-&amp;gt;{Qty} } @items; my $num = $items[0]-&amp;gt;{Qty}; my $no = 1; foreach my $item (@items) { if( $item-&amp;gt;{Qty} == $num ) { $item-&amp;gt;{No} = $no; }else{ $num --; $no ++; $item-&amp;gt;{No} = $no; } } my $rd = Unicode::RecursiveDowngrade-&amp;gt;new; my $ref = $rd-&amp;gt;downgrade(\@items); my $tt = Template-&amp;gt;new; $tt-&amp;gt;process(\*DATA,{items=&amp;gt;$ref}) || die $tt-&amp;gt;error(), &#34;</description>
    </item>
    
    <item>
      <title>日本のAV女優一覧を取得するPerlモジュール「Acme::JapaneseAvActress」をCodeReposに</title>
      <link>https://yusukebe.com/posts/2007/1205003614/</link>
      <pubDate>Wed, 05 Dec 2007 09:36:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1205003614/</guid>
      <description>Erogeek Conference #1 でも発表した、日本のある程度有名なAV女優一覧を取得するPerlモジュール 「Acme::JapaneseAvActress」をCodeReposにアップしました。 合計で2600名のAV女優が今のところリストアップされます。  一人のAV女優には  name（漢字を含む名） yomi（読みふりがな） initial（頭文字ふりがな） year（デビューの年西暦）   というプロパティを持っています。 仕組みとしては、 Wikipediaの日本のAV女優一覧というページのExportというXMLを出力するサービスから、 正規表現でごりごりスクレイピングしています。 Web::Scraperは使ってません。  使用例として、例えば、2007年にデビューしたAV女優をData::Dumperでダンプするには use Acme::JapaneseAvActress; use Data::Dumper; my $actress = Acme::JapaneseAvActress-&amp;gt;new( { &#39;cache_root&#39; =&amp;gt; &#39;/tmp/avactress&#39;, &#39;default_expires&#39; =&amp;gt; &#39;7days&#39;, } ); $actress-&amp;gt;get; my $actlist = $actress-&amp;gt;year(&#34;2007&#34;); print Dumper($actlist);   出力結果は $VAR1 = [ bless( { &#39;name&#39; =&amp;gt; &#39;あいかわゆら&#39;, &#39;yomi&#39; =&amp;gt; &#39;&#39;, &#39;initial&#39; =&amp;gt; &#39;あ&#39;, &#39;year&#39; =&amp;gt; &#39;2007&#39; }, &#39;Acme::JapaneseAvActress::Actress&#39; ), bless( { &#39;name&#39; =&amp;gt; &#39;愛澤こころ&#39;, &#39;yomi&#39; =&amp;gt; &#39;あいざわ こころ&#39;, &#39;initial&#39; =&amp;gt; &#39;あ&#39;, &#39;year&#39; =&amp;gt; &#39;2007&#39; }, &#39;Acme::JapaneseAvActress::Actress&#39; ), bless( { &#39;name&#39; =&amp;gt; &#39;合沢萌&#39;, &#39;yomi&#39; =&amp;gt; &#39;あいざわ もえ&#39;, &#39;initial&#39; =&amp;gt; &#39;あ&#39;, &#39;year&#39; =&amp;gt; &#39;2007&#39; }, &#39;Acme::JapaneseAvActress::Actress&#39; ), bless( { &#39;name&#39; =&amp;gt; &#39;相沢桃&#39;, &#39;yomi&#39; =&amp;gt; &#39;あいざわ もも&#39;, &#39;initial&#39; =&amp;gt; &#39;あ&#39;, &#39;year&#39; =&amp;gt; &#39;2007&#39; }, &#39;Acme::JapaneseAvActress::Actress&#39; ), bless( { &#39;name&#39; =&amp;gt; &#39;愛嶋リーナ&#39;, &#39;yomi&#39; =&amp;gt; &#39;あいしま りーな&#39;, &#39;initial&#39; =&amp;gt; &#39;あ&#39;, &#39;year&#39; =&amp;gt; &#39;2007&#39; }, &#39;Acme::JapaneseAvActress::Actress&#39; ), …   こんな具合です。$actress-&amp;gt;year(&#34;</description>
    </item>
    
    <item>
      <title>PlaggerでCDTube(シングルランキング)の映像をまとめてダウンロード＆Podcast</title>
      <link>https://yusukebe.com/posts/2007/1130033024/</link>
      <pubDate>Fri, 30 Nov 2007 12:30:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1130033024/</guid>
      <description>昨日の俺のファンであるのどぐろさんに会えた記念。 のどぐろさんは言いました。  流行り歌をまとめてダウンロードしたくないですか？
 以前から、作りたいなと思っていたのは、Yusukebeさんが作ったCDTube（カウントダウンチューブ）というサービスからflvファイルを一発で落とすソフトだ。CDTubeは、CDTVのようにその週のヒット曲を1位から100位まで提供してくれるサービスだ。オリコンなんかと違うのは、その1位から100位までの曲のミュージックビデオをYoutube動画から探してきて表示してくれるというとってもありがたいサービスなのだ。  流行り歌をまとめてダウンロードしたくないですか？ - のどぐろより   ということでそれPlaggerでやってみたよ。  CDTubeをちょこっと改造してAtomフィードはかせてref=related属性のついたlinkを作ってその先をYouTubeの映像にして、この前紹介したPlaggerのレシピに入れ込めば一気にダウンロード＆iTunesやiPodで見れる形式に変換してPodcastで読み込めるよ。  iTunesでCDTubeの1位から10位までの映像Podcastを読み込ませたところ
 iPod touch で見たところ
 Atomフィードは今のところ20位まで吐いてます。URLは以下です。  http://pulpsite.net/cdtube/atom   これが config.yaml の例です。 plugins: - module: Subscription::Config config: feed: - url: http://pulpsite.net/cdtube/atom - module: Filter::AtomLinkRelated - module: Filter::FindEnclosures - module: Filter::FetchEnclosure config: dir: /home/user/dir rule: module: Deduped path: ./deduped.db - module: Filter::FFmpeg config: command: /usr/bin/ffmpeg ext: mp4 dir: /home/user/dir encoding: utf8 extra_options: -coder 0 -level 13 -ac 2 options: video_codec: h264 bitrate: 600 audio_codec: aac audio_sampling_rate: 44100 audio_bit_rate: 128 frame_size: 432x320 - module: Filter::RewriteEnclosureURL config: rewrite: - local: /home/user/dir url: http://localhost/~user/dir - module: Publish::Feed config: format: RSS dir: .</description>
    </item>
    
    <item>
      <title>はてブしたYoutube動画をPlaggerでダウンロード＆PodcastしてiPod nanoで見るライフハック(？)はすごくいい</title>
      <link>https://yusukebe.com/posts/2007/1127122931/</link>
      <pubDate>Tue, 27 Nov 2007 21:29:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1127122931/</guid>
      <description>以前書いた記事「 ゆーすけべー日記: Plaggerでニコニコ動画を一括ダウンロード＆変換 Podcast を生成して iPod touch で見る - 2007年11月最新版」で実際にできることを確認し可能性を感じた、「動画共有サイト＋Plagger＋iPod」 の組み合わせ。 じゃあ実際に「できる」からと言って使うのか？というのがこういうハッキングではついてまわることだと思います。で、様々なパターンで試してみました。その結果、すごくいい組み合わせを見つけて実践しています。   最近仕事の関係上、週2〜3日、神奈川から都内へ電車で通うことになって電車での時間の使い方を考えるという機会に会っています。というのも個人的な話ですが、俺は生まれてこの方、電車通学・電車通勤というものをしたことがないのです。試行錯誤の上、ベストな時間の使い方はこうです。 まず、行きはたいてい昼過ぎが多いので、車中シエスタ（昼寝）をして過ごします。 で、帰り、例えば新橋から横浜までは小説やライトノベルなどの文庫本を読みます。 俺が帰る時間はそこそこ混んでいて、手元が狭いので文庫本を持つのが精一杯です。 すると丁度横浜につく頃にはだんだんと飽きてくるので、いよいよ iPod の登場です。 iPod で Podcast に登録したアニメ （最近だと「電脳コイル」に夢中、最初は印象だけで「ぼくらの」のインパクトが薄い感じかなとか思っていたけど、第3話を見終わって、勇子が出てくるあたりから伏線張りまくりな感じにｗｋｔｋしっぱなし）を見ます。横浜−大船間は割りと空いているので iPod で堂々と映像見てても平気な雰囲気です。 それに、大船からモノレールで帰る時間を合わせると丁度アニメ1話を見終わるというぴったりな時間配分になっております。  では、実際に「使っている」という具体的な「動画共有サイト＋Plagger＋iPod」のレシピはというと、以下です。  見たいYouTubeの映像を特定のタグをつけて（例: [forpodcast] ）、はてなブックマークしていく その特定のタグのはてなブックマークのAtomフィードをPlaggerでSubscriptionする Filter::AtomLinkRelatedでブックマーク先のYouTube映像のリンクを取得する Filter::FetchEnclosure、以前の記事と同じようにFilter::FFmpegなどを使って動画のダウンロード、変換、Podcast化 iTunesで読み込ませる  iPod nano （！）に同期させる   そう、はてなブックマークを有効に活用することで、お気に入りのYouTubeの動画をPodcastに登録することを実現しています。以前の記事ではニコニコ動画の映像が素材でしたが、やはり欠けているビデオなどYouTubeの方にあったりするので最近はYouTubeが多いです。  はてなブックマークで特定のタグをつけたページ
 タグ別にAtomフィードを出力してくれる
 そして、最終的に見るのは新型 iPod nano がいい！のです。 ってか、俺、iPod touch 持っている癖に nano 持っているお！ ということで2つとも試した結果、iPod touch の大画面も捨てがたいところですが、 数十分片手で持ちながら見るにはやはり iPod nano の小ささがずいぶんと助かるものです。 それに、iPod nano の画面の大きさでも絵は十分追えます（アニメでしか検証していないのでドラマとかはどうなるかはわかりましぇん）。   以上のレシピを実現するためのPlaggerのconfigの例はこんな感じです。 例のごとく、CodeReposにも置いておきました→/config/plagger/yusukebe/hatebu-youtube2podcast.yaml - CodeRepos::Share - Trac。 global: assets_path: /path/to/assets/ plugins: - module: Subscription::Config config: feed: - url: http://b.hatena.ne.jp/kamawada/atomfeed?tag=forpodcast - module: Filter::AtomLinkRelated - module: Filter::FindEnclosures - module: Filter::FetchEnclosure config: dir: /home/user/dir rule: module: Deduped path: .</description>
    </item>
    
    <item>
      <title>Plaggerでニコニコ動画を一括ダウンロード＆変換 Podcast を生成して iPod touch で見る - 2007年11月最新版</title>
      <link>https://yusukebe.com/posts/2007/1106132959/</link>
      <pubDate>Tue, 06 Nov 2007 22:29:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1106132959/</guid>
      <description>Plaggerを使って、ニコニコ動画のマイリストなどのRSSから、そのエントリにある動画をダウンロードし、iPod touch で見れるような形式に変換して、Podcast も吐いて iTunes 経由で iPod touch に読み込ませ、いつでもどこでもニコニコ動画を見れる方法を紹介。おそらく、現在、一番スマートなものです。   と、その前にこれにはいろいろ経緯があって、簡単に説明すると  俺がPlaggerのPlugin、Filter::FetchNicoVideo を作る。それを利用すると「Plaggerでニコニコ動画のFLVとコメントを一括ダウンロード！」ができる ニコニコ動画、認証の仕様変更、Filter::FetchNicoVideoがそのままでは使えなくなる iPod touch 発売 hakobeさんが「iPod touch向けのニコニコ動画のPodcastを生成する - はこべにっき#」という記事を書く(hakobe++)  その中ではFetchNicoVideoをニコニコ動画の仕様変更に対応させるパッチが掲載されている     shinさんもhakobeさんの記事を見て「PoWer Station-WeBlog!:ニコニコ動画からPlaggerでPodcastを作りiTunesで見たいゼ」という記事を書く   ところが、俺がメンテしてないせいもあり、FetchNicoVideoについてもPlaggerの設定ファイルについても割とカオス的状況になっている(shinさんも苦労している様子)   そこで俺が、後述するCodeReposにhakobeさんのパッチをマージした最新のFilter::FetchNicoVideoと設定ファイルをアップする←今ここ   hakobeさんの記事とかなりかぶり気味ですが、最初にとりあえず、どんな具合かをお見せします。 あ、ちなみにニコニコ動画側では最近、「ツールによるダウンロードは遠慮願いたい」なる警告を出しているので、 自己責任でお願いします。  まず、マイリストに iPod touch で見たい動画を追加していきます。  俺もhakobe氏に習ってあやしげなマイリストを作った
 公開状態のマイリストはRSSを出力するので、 Plaggerで読み込ませて動画をダウンロード＆iPod touch 向けに変換し、 さらに Podcast のXMLを出力させます。 しばらく待つと（動画の変換に結構時間かかります）その作業が終わるので、iTunes の Podcast に読み込ませて動画をダウンロードさせます。  マイリストを公開にすると外部からRSSを読むことができる
 Plaggerが生成したRSSをiTunesに読み込ませるとPodcastのところから動画が見れる
 そしていよいよ iPod touch をつないで同期させると、 iPod touch の「ビデオ」→ Podcast のところに映像が入っているようになります。  iPod touch の動画一覧
 うほぉー、これで今まで追いつけてなかった「灼眼のシャナ2期」が電車の中でもモノレールの中でも見れるぜ。 でもニヤニヤしててまじ俺きもい。 やり方  Plagger のフェーズとしては、  マイリストのRSSをSubscription、つまりとってくる Filter::FetchNicoVideo でニコニコ動画のflv形式のファイルをダウンロードする Filter::FLVInfo でアスペクト比を判定する（ニコニコ動画のflvはアスペクト比が4:3のものと、16:9のものが混在しているので、hakobeさん作GJ!） Filter::FFmpeg でflvをH.264という iPod touch で見れる映像形式に変換する Filter::RewriteEnclosureURL で動画のパスと Podcast 用のURLとのマッピングを行う Podcast のRSSを出力する   という具合です。もし、もっとお手軽にやりたかったら、Filter::FLVInfoの部分を省くと、config.</description>
    </item>
    
    <item>
      <title>ギークなお姉さんはエロギークを好きになってくれるのかな</title>
      <link>https://yusukebe.com/posts/2007/1106010137/</link>
      <pubDate>Tue, 06 Nov 2007 10:01:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1106010137/</guid>
      <description>   恋焦がれる理想の男性・ギークに近づくため、PHPをお勉強してギークな女を目指すブログ  ギークなお姉さんは好きですか 0日目　ギークはじめました   理想の男性・ギークとあるけど、Erogeek/エロギークには恋焦がれてくれるのかな。 たぶん全力でひかれるよね （ひかれる＝どんびきの「ひかれ」る。typoで惹かれたらうれしい）。 </description>
    </item>
    
    <item>
      <title>札コラメーカーの楽しみ方</title>
      <link>https://yusukebe.com/posts/2007/1024012834/</link>
      <pubDate>Wed, 24 Oct 2007 10:28:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1024012834/</guid>
      <description>  先日リリースしたが、案外リアクションが薄くて、個人的に願っていた「空前の札コラブーム」を作れていない…、その札コラを簡単に作れるサービス「札コラメーカー」。 とはいえ地味にリリース当初からヴァージョンアップさせていて、それの報告と共に「札コラメーカー」の楽しみ方を紹介します。  まず、最初に使って面白いと感じるのは「集合写真」で検索した結果の画像を札コラすることですね。 たくさんの人の顔が同じものになるということは不気味ですが、ウケます。    あと、検索キーワードでは「モーニング娘。」も割りと鉄板ネタです。LOVEマシーンのジャケットとか全員の顔がコラされているどころか、 変なところに顔が出現していたりします ( 書いといて肖像権やばそげ… ) 。    次なる楽しみ方は、お札の顔にするだけではなく、違う有名なお方の顔にしちゃう機能を使うことです。 今のところ、ルーさん、タモリさん、関根勤さん、バカ殿様さん、そしてリクエストがあったYappoさんの顔が写真の顔ととりかえっこできるように追加しました。もうこうなったら「札コラ」の領域を超えて「アイコラ メーカー」になってきちゃってます ( マジで権利やばいかも ) 。各変換された写真のページにそれぞれリンクを張ってあるので、そこをクリックすると変換されます。やはりそれぞれ皆さん顔のインパクトが強いですね。顔を取り替えるだけでこれだけ面白いのか、と感嘆するほど。さすがです。  お札な方以外に、ルー、タモリ、関根勤、バカ殿様、Yappoが並ぶ
 元画像は俺と研究室の後輩「ほよ」なんだがルーさんの顔になるとなんか面白い
  タモさんいっぱい
 機能の追加として、公開当初、IRCのとあるチャンネルでご意見をもらって速攻で実装したのですが、 Flickrの最新写真を表示して、それを札コラできるというものを付け加えました。 Flickrの写真はサイズも解像度も大きくて変換に時間がかかりますが、 それだけ出てきた結果が何故だかシュールになります。解像度が高い分、変なところが顔として検出されているからかもしれません。あ、あと細かいですがトップページの最近検索されたキーワードをタグクラウド風にしましたよ。  Flickrの新着画像
  さて、いろいろと面白い画像が作られるわけですが、それをみんなで共有したい！ということで、 はてなブックマークを利用してその目的を一部果たす機能をつけました。 出力された画像のページには、はてなスターも含め、はてなブックマークに追加ボタンがありますが、 それをクリックして「はてブ」してもらうと、「最近はてなブックマークされた札コラ」というページに、少々タイムラグがありますが新着順に表示されるようになっています。また、トップページにも、一番最近はてなブックマークされた画像がリサイズされて表示されています。ですから、皆さんも、是非面白い札コラを見つけたら、はてブしてくれるとそれを共有できるかもしれません。  トップページ
 また、共有のもう一つの試みとしてtumblrを共有して画像を貼り付けていこうというのをやっています。 こちらです→札コラ/tumblr ログイン情報を晒すと、  email : satsucolla (at) pulpsite.net
pass : ichiyo   となっております。 tumblrの方もよかったらご利用ください。  ところで「さすがだ」と思ったのは、Perlハッカーで知られるmiyagawaさんの写真を札コラしてみても、 顔が検出されませんでした→札コラメーカー - http://d.hatena.ne.jp/ images/diary/m/miyagawa/miyagawa.jpg の5000円コラ。 紫の何かを口に押し付けている→顔が検出されない→「札コラさせねーぞ」と対策をしているのですね。 やはり偉大な方でございます。  というわけでいろいろと紹介してきたわけですが、 この「札コラメーカー」、使っていくと若干「樋口一葉慣れ」してしまって個人的に受けるインパクトが薄れる反面、「これはぴったりはまったなー、ワロス」という新たな発見もあります。 暇つぶしにはもってこいですな。てな感じでまだの人は使ってみてください。フィードバック等ありましたら、 コメント or はてブコメントにて受け付けていまーす。   札コラメーカー      </description>
    </item>
    
    <item>
      <title>札コラメーカーをリリースしました</title>
      <link>https://yusukebe.com/posts/2007/1022082245/</link>
      <pubDate>Mon, 22 Oct 2007 17:22:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1022082245/</guid>
      <description>  ゆーすけべー ( yusukebe ) は実験サイト pulpsite.net にて、 お札に描かれている人物の顔と写真に写っている顔とを取り替えて遊ぶことができるサービス 札コラメーカー ( pulpsite.net/satsucolla/ ) を、 2007年10月22日より開始いたしました。  札コラメーカー
  札コラメーカーでは、ネット上の写真のURLを入力もしくは、 キーワードで検索した結果の画像を選択するなどして写真を指定し、 その写真にて顔が検出されれば、1000円札・5千円札・1万円札にそれぞれ描かれている 野口英世・樋口一葉・福沢諭吉などの顔と取り替えることできる、 「札コラ」を簡単に作ることできるサービスです。 詳細につきましては札コラメーカーサイトの「札コラメーカーとは」をご覧ください。  札コラメーカーを使うと例えば、俺の全身写真がこんな感じにユキチナイズドされます。   さて、「札コラ」という発想がでてきた経緯ですが、 ネットの界隈で有名なYappoさんがUstreamで札コラをはじめて、 一瞬だが空前の札コラブームが起こって若干それにインスパイアされて作ったという経緯もあります。 ( 参考: Flickr Photo Download: とんでもないオサツ )。 ですが、実はタイミングを同じくして、 俺が以前所属していた奥出研の合宿にOB達が乗り込むという開発合宿が1ヶ月ほど前にあって、 その時に「何作ろうか」とでてきたアイデアがこの札コラだったのです。 アイデアが出る前には、「出てこないよー」と悶々していて、俺がシエスタ( 昼寝 )して起きたらいつの間にか 「札コラ」の話で盛り上がっていました。 じゃあなんでその面子の中で、札コラという発想が出てきたのかというと、 今からさかのぼること4年以上前、鎌団子と一緒に友達の顔をいじくって「友達アイコラ」なるものを作りました ( 参考: ゆーすけべー日記: 友達アイコラ ) 。その時にやたら面白かった記憶が鎌団子にあって、そこから「ぽんっ」とアイデアが出たようですね。  ところで、このサービス、権利的にかなり限りなく黒に近いグレーな代物です。 著作権しかり、肖像権しかり…。 しかし、とりあえず面白いので今のところは公開、ということで皆さん利用してください。  作り方としては簡単なもので、OpenCVを使っているImage::ObjectDetectで顔検出して、マスクで樋口一葉さんとかの顔をのっけっています。 プログラミング的な難しさより、そのマスクの一葉さんの顔とかを切り抜いて、顔周辺のアルファを下げたりするフォトショップ的な作業の方が大変でしたね。 あと、個人的な話ですが、今回から本格的にSubversionとTracを使い出しました。 慣れないところがありますが、これだと本番環境とテスト環境を簡単に分けて開発できたりして便利ですね。  ま、てな感じでたびたび申し上げますが、みなさん、札コラメーカー、よろしければ楽しんでください。  札コラメーカー       追記  英世・一葉・諭吉・ルー・タモリ以外に、この人の顔をコラ素材したらおもろいんじゃないかなーって思った人は顔写真を探してURLを教えてくれたら、挑戦してみたいと思います。コメントもしくは yusuke (at) kamawada.com でうけつけまーす。 </description>
    </item>
    
    <item>
      <title>Erogeek Conference #1 が開催されました</title>
      <link>https://yusukebe.com/posts/2007/1019053530/</link>
      <pubDate>Fri, 19 Oct 2007 14:35:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1019053530/</guid>
      <description>  エロい技術についてエロい技術者＝Erogeeksが語り合うErogeek Conferenceの記念すべき第1回が、去る2007年10月17日渋谷のなんか暗い場所にて開催されました。 基調講演をお願いしたヌイッター開発者 イエイリー氏をはじめ、phGspotさん、Acme::Oppai Authorさんなど豪華顔ぶれが揃いつつも、こっそりと割と身内的な感じで、かつシュール、そしてもちろんエロい集いでした。 肝心のみんなの発表内容をいざレポート！といきたいところですが、 これほんとに公開できないような話ばかりだったので一部修正済み写真をお見せして、 後はご想像にお任せするという形にしたいと思います。 ただ、僕が発表した「yusukebeの遅漏トーク」に関しては、たぶん見せて平気じゃないかと思うので、 例のごとくSlideShareとPDFという形で置いておきます。 Erogeek Conference #1 yusukebeの遅漏トーク  | View | Upload your own    erocon01_yusukebe.pdf  Erogeek Conference #1  渋谷のなんか暗い場所、* わざと画質落としてあります
 某氏。やはり面白い方でした。というか違う方面で予想以上のインパクトがありました。
 phGspot氏による今後のErogeek予測
 おみやげで大人のおもちゃ系がたくさん揃った。スライドに映るシルエットがシュール
 懇親会は豆腐屋、なぜかさきほどより人数が増えている
 去り際に撮った写真、おっぱいみたいなので顔ばれ防止
 ちなみに、開始3時間前くらいに鎌団子と電話して、来てみてたらと誘ったらその気になって、発表までしちゃいました。さらに、懇親会にあまやんも登場して、俺を含めた奥出研OB3人がErogeeksにいるというおもろい状況になりました。  さて、待望（？）の次回、Erogeek Conference #2 ですが、幹事で有名なお方が仕切りをやってくれるとかくれないとか。とにかく Erogeek Conference 楽しかったです。 </description>
    </item>
    
    <item>
      <title>いかにして効率よく大量のおっぱい画像をダウンロードするか</title>
      <link>https://yusukebe.com/posts/2007/1015084049/</link>
      <pubDate>Mon, 15 Oct 2007 17:40:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1015084049/</guid>
      <description>Erogeekとしてとある実験のため、大量のおっぱいが写った画像ファイルが必要になった。 しかも何千枚という枚数である。 なので、アダルトサイトなどに行って右クリックで保存などという、 ちまちましたやりかたではやってられない。   いかにして効率よく大量のおっぱい画像をダウンロードするか   とりあえず、俺は後ほど紹介するスクリプトで8000枚近くのおっぱい画像をダウンロードすることに成功した。    実行している様子
 詳しい解説はしませんゆえ、コードみてください。 あとこのスクリプトを使ってなんか問題が起こっても俺は何も責任を負いませんよー。 他にもっと効率よく大量のおっぱい画像をダウンロードできる方いらしたら教えてちょ！ #!/usr/bin/perl use strict; use warnings; use Yahoo::Search; use LWP::UserAgent; use Digest::MD5 qw(md5_hex); use Path::Class qw(file); my $query = &#34;おっぱい&#34;; my $image_dir = &#34;./temp&#34;; my $yahoo_appid = &#34;&#34;; my $start = 0; my $num = 1; my $count = 50; my $ua = LWP::UserAgent-&amp;gt;new; while () { my $result_num = search($start); last unless $result_num; $start = $start + $count; } sub search { my $start = shift; my @Results; for my $try (1..100){ @Results = Yahoo::Search-&amp;gt;Results( Image =&amp;gt; $query, AppId =&amp;gt; $yahoo_appid, Mode =&amp;gt; &#39;all&#39;, Start =&amp;gt; $start, Count =&amp;gt; $count, AllowAdult =&amp;gt; 1, ); last if @Results; sleep 10; warn($@) if $try == 100; } map { fetch($_) } @Results; return $#Results + 1; } sub fetch { my $result = shift; my $head = $ua-&amp;gt;head($result-&amp;gt;Url); my $url; if( $head-&amp;gt;content_type =~ /image/ ){ $url = $result-&amp;gt;Url; }else{ $url = $result-&amp;gt;ThumbUrl; } my $filename = Digest::MD5::md5_hex($url); my $filepath = file($image_dir , $filename); print &#34;</description>
    </item>
    
    <item>
      <title>Mashupediaにインタビューが掲載されました</title>
      <link>https://yusukebe.com/posts/2007/1005082754/</link>
      <pubDate>Fri, 05 Oct 2007 17:27:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1005082754/</guid>
      <description>  Mashupediaの「マッシュアッパーを追う！」という企画で先日インタビューされて早速記事にしてくれました。  第10回　マッシュアッパーを追う！「これ☆ほしい」「CDTube」 yusukebe.com : インタビュー : 記事 : MASHUPEDIA - マッシュペディア - : Web API x Mashup
  注釈 : Mashupediaとは「ベクターが運営する、WEB APIとマッシュアップに関するコミュニティーサービス。」
MASHUPEDIAとは - はてなダイアリーより  一部抜粋させていただくと   ■ アイディアの段階から実現すると言うのに壁はありませんか。  和田 ： 私の場合はリビドーです。リビドーとは衝動、特に性衝動を現しています。性衝動にかられて開発して学んでいく、それを体現したのを私はリビドー駆動開発と呼んでいます。 実は最初に作ったサービスはエロプラといいまして、Plaggerが面白そうだから触ってみたらリビドーが動いたという感じ。    ■ 最後に、Mashupを作る方にアドバイスをお願いします。  和田 ： Erogeeになって下さい。物欲など欲を利用すると上達しやすいと思います。 そして、まずは作ってみること。   ちょｗErogeekの布教ｗｗｗ  ちなみに人からインタビューされるのは2度目です。 1度目にされた模様はこちらを参考に→ゆーすけべー日記: 奥出研偉人伝Blogに掲載されました。 </description>
    </item>
    
    <item>
      <title>Shibuya.pm tech talk #8 で 「リビドー駆動開発によるPlaggerとCatalystを使ったサイト開発」を発表してきました</title>
      <link>https://yusukebe.com/posts/2007/1002033306/</link>
      <pubDate>Tue, 02 Oct 2007 12:33:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/1002033306/</guid>
      <description>  昨日10月1日に行なわれた Shibuya.pm tech talk #8 のLightning Talksで、 「リビドー駆動開発によるPlaggerとCatalystを使ったサイト開発」という題目の発表をしてきました。 本格的にShibuya.pmに参加したのが初めての上、いきなり発表、さらに内容が基本エロ、そしてトリ。 ということで空気読めてるか心配でしたが、元気よくやってみました。 まずは、そのスライドと録画していただいた動画を貼り付け＆それへのリンクを取り急ぎという形でお見せしてから、個人的に「感激した」という感想をつらつらと述べようと思います。 *注意 : 時系列的には本来、9月29日〜30日にかけて行なわれた、大笑いして最後には衝撃のハプニングが起こったという、鎌団子の結婚式二次会、三次会、四次会、五次会の模様をお送りするべきですが、ネタが濃くてまとめるのに時間がかかりそうという点と、Shibuya.pmネタの方がどちらかというと早急に記事にすべきということでご了承ください。また、お楽しみにしていてください。実は今回の発表のスライドに出てくる謎の写真とも微妙にリンクしています。 Shibuya.pm tech talk #8 「リビドー駆動開発によるPlaggerとCatalystを使ったサイト開発」スライド  ダウンロード   「リビドー駆動開発によるPlaggerとCatalystを使ったサイト開発」(PDF)  Shibuya.pm tech talk #8 「リビドー駆動開発によるPlaggerとCatalystを使ったサイト開発」映像   Ustream.tv リビドー駆動開発によるPlaggerとCatalystを使った(Mashup)サイト開発 (yusukebe) - Shibuya.PM tech talk #8   後からUstreamのログみて気づいたんですが、声でかすぎだったみたいですね。 ごめんなさい＞＜ Shibuya.pmとは？  まず、Shibuya.pmについて知らない方向けに、軽く解説しておいた方がいいですね。 Shibuya.pmとはShibuya Perl Mongersの別名で、Perl Mongersというのは地域ごとのPerl(プログラミング言語の一つです)のユーザグループの集まりのことを指し、Shibuya.pmはShibuyaとつくだけあり東京近辺のPerl使いの皆様が集っています。一応日本では一番大きいPerlのユーザ会だと思います。  Shibuya Perl Mongers  Shibuya.pmデビューにあたって  会場に向かう電車の中で変な汗かきまくるほど、実はドキドキしてました。 というのも、僕は1年ほど前からPerlを本格的にはじめたんですが、 それからというものShibuya.pmのGeek(いい意味でのHacker)な皆さんのモジュールを使わせてもらったり、彼ら(と)のBlogやチャットを介してPerlプログラミングの勉強をさせていだいたたりと、日々非常にお世話になっていて、こうしたリスペクトしている人たちと初めて生で対面するんですから。 しかも、同じ立場で発表するときたら、もう緊張、さらに興奮するしかありません。  会場に前乗りして、待っているとWeb上で顔を拝見したことのある方々が続々と登場してきて、勇気を振り絞って、「はじめましてゆーすけべーです」と挨拶をして名刺交換。 そりゃあもう感激です。  Yappoさん、miyagawaさん、takesakoさん、dankogaiさん、zigorouさん、mizzyさん、tokuhiromさん、typesterさん、たつをさん、nipotanさん、otsuneさん...。皆さん、憧れの人たち。お会いできてほんとに光栄です。そして、予想していた通りの人柄で、暖かく接してくれました。いいお兄さん達という感じです。  例えば、Yappoさんには「アフロじゃないじゃないですか」と突っ込まれたり、 miyagawaさんには「お世話になってます、いろいろと迷惑かけてないですか？」とたずねると「だいじょぶっすよ」という予想していた通りのいい意味でそっけない返答をしてくれたり、 takesakoさんは恐縮するほど腰を低くして挨拶をしてくれたり、 dankogaiさんはリアクションがしずらい質問をしてくれたり、 mizzyさんは会話の中に「お口で」という軽いエロネタをはさんできたり…。 そうそう、イベントが終わったあと、懇親会があるのか無いのかわからずに、みんなとはぐれてしまい、会場の外でしょんぼりと一応誰か来るかなと待っていたら、IRCのチャットでotsuneさんが懇親会の場所を教えてくれてほんとに嬉しかった。 みんなやさしいよぉーーー。  otsuneさんに教えてもらって中華料理屋を見つける
 懇親会は、隣がtypesterさんだったのでCatalystやカヤックのこととか話せてよかった＆ otsuneさんが近くにいたので、案の定Erogeek的トークになっていろいろアイデアも出ておもろかった。 とにかく、あの場に入れるだけで幸せでした。  懇親会の様子、無修正だけど画像小さくしたよ
 去り際に全体を撮影
 肝心の僕の発表なんですが、とにかく、「もうこうなったら」ということでめちゃくちゃ声張って、勢いで押しまくりました（だから録画された映像では音声が割れまくりんぐ）。 技術的に目新しいことものを発表できるわけではないので、とにかくコンテンツ勝負。 内容はまさにリビドー、エロ！ 1年ぶりのプレゼンでしたが、我ながら笑いを誘うことができたと思います。erogeek++でたくさんインクリメントしてくれましたし。 今後は、miyagawaさんのWeb::Scraperの様な「こりゃ使ったら楽しそう」と思えるようなモジュールなりを作って、技術的要素がもう少し入った発表ができるように精進したいと思います。  miyagawaさんの発表
 俺の発表
 ということでShibuya.pmの皆さん、ありがとうございます。 これからもよろしくお願いします。 追記  うちの親父もUstream経由で見てたみたいです。 ってかあの発表を親父に見られるってどんだけー。 でも恥軸がぶれているのでとりわけ、気にしない。  Shibuya Perl Mongersデビュー - 親子丼的ビジネス奮闘記（７） (mark-wada blog)  </description>
    </item>
    
    <item>
      <title>Erogeek宣言</title>
      <link>https://yusukebe.com/posts/2007/0929080535/</link>
      <pubDate>Sat, 29 Sep 2007 17:05:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0929080535/</guid>
      <description>遅ればせながら、私ゆーすけべー（yusukebe）はErogeekになりましたことをここに宣言いたします。いや、「Erogeekになった」というよりか、「Erogeekという言葉で自らを表すことができた」と言った方が語弊がない気がします。  Erogeekとは「エロい技術について(股間も)もりもり盛り上がっているエロい技術者」のこと指し、またそれと同時にErogeek達の集まり＝コミュニティのことも表しています。  記念すべき、Erogeekという言葉が生まれたのは2007年9月7日、IRCチャンネル#plagger-jaにて。 詳細は公式HPの「Erogeek誕生の瞬間 - Erogeek」を参考にしていただくとしてざっくりとした流れをご説明いたします。  俺が10月1日に開催されるShibuya.pm Tech Talk #8で初参加のくせにエロサイト開発とかの話をしたいと持ちかける するとtokuhiromさんがShibuya.pm以外の場でエロい技術について話す機会＝Erogeek Conferenceを開催すればいいのではというまさに「きっかけ」的発言をする（結局、俺のエロネタはShibuya.pmの方でもLTで発表することになったよ！）   「yusukebeさんと Yappo さんで Erogeek Conference を開催するとか。」   Erogeekという言葉がここで生まれる そこで誰がErogeekか？というお題のErogeek認定委員会がIRC上で行なわれる 現在のところ少しあやふやだが俺がErogeekのリーダーっぽい(自分だけKYで名乗っているだけかも＞＜) そして、Erogeek Conference #1 の基調講演者としてあの「ヌイッター開発者 イエイリー氏」が来るかも!? 今に至る   Erogeek Conference #1 は10月17日に予定されています。 楽しみです。  ところで、 Erogeekとして2chに前向きに晒されました。  752 ：デフォルトの名無しさん：2007/09/24(月) 21:38:18 Perlを8月から勉強しはじめて、リャマ、アルパカ、EffectivePerlは通読しました。 リファレンスを使えるようにはなりました。 オブジェクトもCPAN moduleのコードを読むだけならできます。 書くのは無理ですが。 そこで次のステップに,と思うのですが、なかなか遅々として進めないでいます。 Web applicationを作りたいです。 CPAN moduleをあさったりしてますが、他にどんな勉強しかたがありますか？ オープンソースのWeb applicationから勉強するにはどうしたらいいですか？ 良く分からないのですが、sf.netで十分ですか？ それから、いつも書くコードが数十行なので、大規模なアプリを作る基礎力がついていない 気がします。何か題材があればいいのですが、先輩方はどうやってPerl codingの題材を見つけて こられたのですか？ 758 ：デフォルトの名無しさん：2007/09/24(月) 22:22:01 エロサイト作ろう エロパワーは偉大だ 760 ：752：2007/09/24(月) 22:26:03 &amp;gt;&amp;gt;758 有益なアドバイスありがとうございます。 実はあるページ[1]をみてから、 エロサイトもいいかもと期待に股間をふくらませています。 儲けを狙うなら、エロですね！！！ エロパワーは偉大。 脚注 [1] ゆーすけべー日記: エロサイトの管理人説 http://yusukebe.com/archives/07/09/04/114840.html   Perlについての質問箱 32箱目より  このように、エロをエネルギーの根源としてPerlの世界に飛び込んでいくことを「リビドー駆動開発」とotsuneさんが名づけました。これもまた、まさに僕がしていることをうまく言葉にしてくれています。Shibuya.pm tech talk #8 で発表するLTのテーマも「リビドー駆動開発」になります。  それとあんま本題とは関係ないのですが、先日はてなダイアリーキーワード「yusukebe」をworemacxさんが作ってくれました →yusukebeとは - はてなダイアリー。woremacx++  Perl界隈の人たちは、質問をつぶやいたら速攻で教えてくれたりと、みなさんやさしくて、ヌクモリティを感じます。いろいろとお世話になっています。いよいよ Shibuya.</description>
    </item>
    
    <item>
      <title>「Mash up Award 3rd」の全応募作品をはてブ数と共に並べてみた</title>
      <link>https://yusukebe.com/posts/2007/0916115312/</link>
      <pubDate>Sun, 16 Sep 2007 20:53:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0916115312/</guid>
      <description>「これ☆ほしい」も応募したリクルートとサンが共催している「Mash up Award 3rd」。 募集も締め切り、全応募作品数は合計「193作品」! 公式ページにて全作品の概要を見ることができる。 他にどんなのがあるのかなーと眺めてみるが、さすがに量が多いので見る気がうせた。 せめて、現時点で世間からの評価がいかほどなのか？がある程度わかれば嬉しい。 ということで、かなり偏りはありそうだが「はてなブックマーカー」をその世間とみなし、 「はてなブックマークされた数」と共に作品をリストアップしてみたよ。  すると…。 おお、今のところ、「これ☆ほしい」、MixClipsとAddClipsについで3位だよーーー。 すげー。  リストは手入力なんてことはもちろんせずにさくっとPerlで作った。 Web::Scraper(Perlのモジュール)でコンテスト応募作品一覧のページから タイトル＋リンクをスクレイピングして配列に入れる→ Template ToolkitでHTML出力→ はてなブックマーク数を画像で取得するAPI でブックマーク数表示、という具合です。 実は、これも広義の意味でのMashup！  とりあえず、 以下に(鬼長いけど)「Mash up Award 3rd 全応募作品一覧 with はてなブックマーク数」のリストを。 そしてその後に、このリストを生成したPerlのソースを貼っておきます。 Mash up Award 3rd 全応募作品一覧 with はてなブックマーク数   Hot-ma-Pepper [ホット・マ・ペッパー]     たべなびっぱ     MixClips(ミックスクリップ）     yellowspan 楽器レビュー     Twitter Voice     U.T. ( Unique translator )     地図で探すグルメ情報 Gour!Map(グー!マップ)     楽天市場ブラウザ RakishFree     AddClips(アドクリップ）     楽楽楽天     全国ホテル・旅館カンタン検索     グルメ.</description>
    </item>
    
    <item>
      <title>「これ☆ほしい」BugFix &amp;amp; タイムライン機能追加 &amp;amp; 評価とコメントお願いします</title>
      <link>https://yusukebe.com/posts/2007/0916070637/</link>
      <pubDate>Sun, 16 Sep 2007 16:06:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0916070637/</guid>
      <description>ウェブで話題の「みんなの物欲」がひとめでわかるサイト『これ☆ほしい』(リリース)。 エントリー情報が更新されないというバグ(？)を修正しました。 それに伴い、DBを初期化してしまったので、過去のエントリーのPermalinkがずれてしまいましたが、 ご了承ください。これで、 とあるエントリーにUserが新しく「これほしい」とタグをつけてはてブすれば、 その分カウントが一つ増えるようになりました。  さらに加えて、新機能「タイムライン」を追加してみました。 これは「これ☆ほしい」に登録された人気エントリーを「時系列Ｘほしいカウント」で 並べて見ることができるというものです。 @nifty TimeLine のAPIを使っています。 「ほしいカウント」が5とか6とかのエントリーが多いので下の方はわりとカオスになっちゃってますが、 それを差し引けば、時間別にどんな物が流行ったのかが一目瞭然なのでわりかし面白いかもしれません。     『これ☆ほしい』人気エントリー タイムライン - @nifty TimeLine ( @niftyのTimeLineページ )   また、つくるぶというサービスが提供しているサイトスカウターなるものを設置してみました。   サイトスカウターは、デベロッパーのみなさんが作成したサイトに設置することで、サイトのPV（サイトスカウターのロード回数）、サイトにアクセスしたユーザーからの評価点やコメントを得ることができるツールです。
 サイトスカウター あなたのサイトを診断します -つくるぶより   「これ☆ほしい」のトップページなどの右サイドに貼り付けてあるので、是非みなさん、 評価及び、コメントをお願いします。お願いします。お願いします。 このサイトスカウターの評価＆コメントは「Mashup up Award 3rd」審査の参考になるということなんで、 みんなのおかげでもしかしたら、もしかするかもよ！ だから、お願いします。おながいします。お願いします。   補足 : コードの話  まず、バグをどうやって直したか、というかバグって呼んでいいのか？ とりえあずこんな状態でした。   公開してから気づいて、速攻で直したんだけど、 これ☆にはちょっとしたバグがありました。 記事が重複して現れるという現象です。 例えば『iPod Touch @ Apple』へのリンクを持つページが3つ登録されちゃうとか。 強引に直して重複は無くなったけど、その代わり更新情報が取れなくなってしまっている現状です。 これはStore-DBICの仕様なのでしょうがない…。  ゆーすけべー日記: 「これ☆ほしい」公開から2日目でのフィードバックまとめより   解決策として、otsuneさんに教えてもらった、 「SmartFeedでEntryを一つのFeedにまとめてからStore-DBICする」という方法で直しました。 config.yamlにSmartFeed::Allを加えて、Store::DBICのruleを設定すればすればOKです。 Dedupedも不要になりました。 - module: SmartFeed::All - module: Store::DBIC rule: expression: $args-&amp;gt;{feed}-&amp;gt;id eq &#39;smartfeed:all&#39; config: schema_class: Plagger::Schema::SQLite connect_info: [ &#39;dbi:SQLite:/path/to/plagger.db&#39;, ]   次に、@nifty TimeLine へ APIを使ってポストする部分について解説。 「これ☆ほしい」のエントリーからカウントが5以上のものをひっぱってきて、 まだTimeLineに登録されていなかったら新規「できごと」を作成してポスト、 登録されていたら「できごと」更新という機能を持つPerlプログラムを作りました。 それをcronで回しています。  エントリー情報は、 Plaggerが生成して、Catalyst側で利用しているdbから(Catalystアプリの)DBIx経由で取得しています。 自分で書いた記事ですが、 「Catalystのモデルを外部スクリプ&amp;amp;トから操作する(Loaderが0.</description>
    </item>
    
    <item>
      <title>「これ☆ほしい」公開から2日目でのフィードバックまとめ</title>
      <link>https://yusukebe.com/posts/2007/0912141255/</link>
      <pubDate>Wed, 12 Sep 2007 23:12:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0912141255/</guid>
      <description>おととい公開した 「これ☆ほしい - みんなの物欲」。 久しぶりに「はてなブックマーク」のトップ「最近の人気エントリー」に載ったり、 はてブでいろいろとコメント書いてくれたりと嬉しかった。 そこで、とりあえず 現状のフィードバックのまとめとか個人的な感想を書いてみる。 でもその前に記念スクリーンキャプチャ。   「25歳今日童貞卒業した」にはなんか負けたくなかった
 ちなみに、俺が作ったサイトorページで「はてなブックマーク」のトップ「最近の人気エントリー」に、 1日以上載ったのは「Plaggerでエロサイト作ってみた」と「CDTube」くらいかな？ 有名な人のブログ記事や、「〜〜〜のまとめページ」などはやっぱりはてブされやすいけど、 ぺーぺーの俺なんかが作ったサイトとかだとなかなかそこに行き着くまでが大変なんだな。 だから素直に嬉しいよー。   今現在、はてなブックマークしてくれたuserは「」。 そのはてブのコメントをいくつかピックアップしてレス形式で以下羅列します。 個人user名を記載してますので、それでもし支障があれば、コメントください。訂正いたします。  toratorazeroさん 「あれも欲しい これも欲しい もっと欲しい もっともっと欲しい」
rytichさん 「webサービス アレも欲しい!コレも欲しい!」
  おお、そういう歌ありましたね。ブルーハーツですね。 高校の時やたら聴いてたの思い出しました。 そしたら、今の頭の中ではそのフレーズがループしまくりんぐです。  funagonさん 「はてブこれ欲しいタグをカウントしてランキング？」   はいそうです。 「これ欲しい」タグだけじゃなくて「ほしい」とか「買いたい」とか複数のタグに対応しています。  mercysluckさん 「ほしと欲しいをかけているようですね。ほしい〜の」   Yes！かけていると同時に リリース当初はテラカオスに捉えられていたけど最近になって落ち着きだしている はてなスター＝『はて☆すた』及び、 来週最終回を迎える『らき☆すた』へのオマージュでもあります。  wt-999-twさん 「眺めるだけでもおもしろいねー」   あざーす。そうなんですよ、Webサービスでたまに「入力」をやたら求められるサイトとかあるんですが、 あれって結構僕はだるいと思っていて(もちろんその先に面白いことがあればやるけどね)、 今回はぼーと「眺める」だけでおもろいってのを目指しました(でも結果論ですｗ)。  kensuuさん 「ありだなー、こういうの　→なんかやたらと同一人物にスターつけられると恥ずかしい」   ごめんなさい、ごめんなさい、ごめんなさい＞＜。それ僕です。 「これ☆」をはてブしてくれた人でコメントくれた方にはもれなく「id : kamawada = yusukebe = 僕」から、 「はて☆」がつきますキャンペーンを一人でしてました。  chikunaiさん 「こんなのもあるよ→http://www.collegoo.com/」   見てみました。『最近のお気に入り ColleGoo（コレグー）: お買い物好き集まれ！』ってやつサイトですね。 このブログにも「すけべー」さんからコメントいただいたんですが、 Socialtunes* モノ系ソーシャル も似たようなサービスで面白いですね。 ただ、『これ☆ほしい』の場合は、はてなブックマークが元素材になっている分、  ユーザーの母数が多い 商品自体だけが対象になっているのではなく、商品を紹介する記事などを扱っている (そのため、例えば海外で新製品が出た場合などをフォローすることができる)    という特徴があると思っています。  hashigotanさん 「アマゾンへ飛ぶのもあるようだけど誰かのアマゾンアソシエイトの利益になったりするのかな(？ あと企業の人間が「ほしい」タグとか付けてこのサイトを通じて儲けたりとかしないかな」   自演される可能性は多いにありますね。ただこの点は、最近増えているソーシャルブックマークのスパムや、 昔からあるブログへのTBスパムの問題と似通っていて、 今後のネット社会全体の問題と捉えることができますね(僕は割りと楽観的に考えていますが…)。 アマゾンへのリンクは「これ☆ほしい」制作者である僕のアソシエイトタグが入ってます。 すいません、すいません。せっかくなので入れさせてもらってます。 でも、それで収入が入ってきた分、僕、勇気付けされて、もっといいもの作ると思います。  julajpさん 「数値やグラフ傾向が無いと決め手にかけそう。」   カウントと時間軸でグラフ作るのありっすね。今後の追加機能候補として入れておきます。 @nifty TimeLine - ソーシャル・タイムライン ←これ使えそう。  tomisimaさん 「これは危険。ポチッとしまくりたくなる。」   まじ、危険ですよね。この前も俺「ポチッとな」で『iPod Touch』と『新型PSP』と『DS Lite』と…を(略)。 なんか注意書き書いておいた方がいいかも。  shidhoさん 「ここでほしい欲しい言ってるとこのエントリが含まれるのかな?</description>
    </item>
    
    <item>
      <title>はてブでみんながほしいと感じた記事がひとめでわかる「これ☆ほしい」を作ってみた</title>
      <link>https://yusukebe.com/posts/2007/0910104208/</link>
      <pubDate>Mon, 10 Sep 2007 19:42:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0910104208/</guid>
      <description>つい先日「iPod Touch」などを衝動買いしてしまった僕ですが、 そんな物欲をさらに加速させるようなサイト「これ☆ほしい」を作ってみました。 「これ☆ほしい」とは、ウェブで話題の「みんなの物欲」がひとめでわかるサイトであります。 はてなブックマークされたエントリーの中からユーザーが「欲しい」とか「買いたい」などといった、 タグやコメントをつけたものをピックアップし、カウントして表示しています。  これ☆ほしい - みんなの物欲     機能としては、  トップページにて最近みんなが「ほしい」と注目されているエントリーを閲覧できる 24時間以内、今週、などといった期間別に人気の記事を並べ替える タグ別に絞り込む 楽天及びAmazonの注目アイテムを詳細とともに見る といったものがあります。   ウェブの記事に対してどれだけの人がほしいと思っているかをカウントするために、 「欲しい」「買いたい」などといったキーワードと、 はてなブックマークのタグ及びコメントをマッチングさせています。 複数のキーワードに対応していて、いろいろそれっぽいのを登録しました。 こうしてカウントすることで「10 ほしい」といった数字が出てくるわけですね。  さてご覧いただくとお判りの通り、2ヶ月ほど前に話題となった 「これはひどい」、「これはすごい」というサイトにインスパイアされて作りました。 「これ☆ほしい」を作ったいきさつはこんな感じです。  これはひどい＆これはすごいを見て、「それPlaggerでできるんじゃね？」 じゃあ俺が作るんだったら「これはエロい」だな 実際作ってみる はてなブックマークで「これはエロい」とか「エロ」などのタグをつけているエントリーを集めて、並べる。が、しかし 「ちょｗｗｗ、テラスパムサイト多いんだけどｗｗｗ」 萎える でも、せっかくそれ用にPlaggerのPluginとか作ったからなんか他に収集したら面白いキーワードないかな？ 丁度その頃、「Mash up Award 3rd」の対象APIに楽天のウェブサービスが入っていることを知る 楽天と言えば、「商品」だよな じゃあ、楽天に限らず「商品」、「物」の販売ページや紹介サイトの記事の中でどれだけみんなが欲しがっているかがわかったらいいかも それ、はてなブックマークで「これほしい」とか「買いたい」とかのタグをカウントすればよさげ やってみる、結構おもろいかも せっかくなので「Mash up Award 3rd」に出したい。そこで、楽天のアイテムに関してはAPIを使って詳細情報を埋め込むことにした さらに、「注目のAmazon」も加えた とりあえず、動作確認 「おお、iPod Touch みんな欲しがってるー」 ネーミングで悩むがストレートな「これほしい」にして、さらにブームが去りつつあるかもしれんが「☆」を入れる(ちなみに、Englishネームは&#34;wewantit&#34;、開発時のコードネームは「みんぶよ」) 公開←今ここ   では、作り方を解説。基本的にはErolystやCDTubeと同じく、 「Plaggerでアグリゲート→Store-DBIC→sqliteのDB→Catalystで読み込んで表示」という具合で動いています。 以前名づけた「Plalyst or PlaCata」メソッドです。 Plaggerの部分で、以下のオリジナルPlugin4つ使ってます。やたら作りました。  Subscription::HatenaBookmark Filter::AddHatenaBookmarkTagsCount Filter::RakutenWebService Filter::AddAmazonDescription   以下はconfig.yamlの例です。 global: assets_path: /path/to/assets timezone: Asia/Tokyo plugins: - module: Subscription::HatenaBookmark config: tags: - これ欲しい - これほしい - 欲しい - ほしい - これは欲しい - これはほしい - 物欲 - 買う - 買い物 - 買いたい！ - あとで買う - 欲しいもの - 購入候補 - ちょっと欲しいもの - +ほしい - shopping - ショッピング - goods - グッズ - wishlist - module: Subscription::Config config: feed: - http://b.</description>
    </item>
    
    <item>
      <title>日本VSオーストリアのサッカー見てたらプラガーがいた</title>
      <link>https://yusukebe.com/posts/2007/0908102016/</link>
      <pubDate>Sat, 08 Sep 2007 19:20:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0908102016/</guid>
      <description>  今朝早朝の「日本VSオーストリア」のサッカー見てたら交代選手で「プラガー」が出てきた、 と思ったら字幕には「プラーガー」って出てた。おしい。   ぐぐってみたら「Thomas Prager」という選手らしい。 参考記事   Thomas Prager - Wikipedia (テラドイツ語) Plaggerとは？ (Yusukebe::Tech)  </description>
    </item>
    
    <item>
      <title>「人として恥軸がぶれている」</title>
      <link>https://yusukebe.com/posts/2007/0906135946/</link>
      <pubDate>Thu, 06 Sep 2007 22:59:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0906135946/</guid>
      <description>#plagger-jaにて
 15:09 (Yappo) Plaggerファウンデーションにyusukebeさんの会社から寄付があるという都市伝説   A☆RI☆U☆RU　寄付ならずとも何かの形で還元したい。 そこで、有名エロ動画配信サイトをほぼ網羅した、PlaggerのFilter::EntryFullTextのYAMLがあることを発言。  20:10 (yusukebe) $ ls 20:10 (yusukebe) 1046034.yaml cutie82.yaml g-area.yaml omany.yaml sukiyakiav.yaml 20:10 (yusukebe) 10musume.yaml dmm_monthly.yaml h4610.yaml onacle.yaml tokyo-247.yaml 20:10 (yusukebe) 1pondo.yaml duga.yaml himemix.yaml peachbomb.yaml tora-tora-tora.yaml 20:10 (yusukebe) 99bb.yaml eroerooyaji.yaml ittele.yaml r-shodo.yaml 20:10 (yusukebe) ademusume.yaml eroseven.yaml movie-girls.yaml s-angels.yaml 20:10 (yusukebe) caribbeancom.yaml exotica-xxx.yaml newplay-st.com.yaml smooth-movie.yaml 20:10 (hsbt) うは 20:10 (hsbt) 網羅してるな 20:10 (otsune) 夢が詰まってる   それらエロコンフィグ、エロプログラミングソースを共有すれば、 PlaggerファウンデーションもしくはPerl界隈の方に何かしらの恩返しができるのではないかと考える。  20:34 (yusukebe) いやーでもPlaggerにはお世話になってますよ 20:34 (yusukebe) PlaggerでPerlと正規表現覚えたもの   時間が前後するが、コードシェアに関して、  20:08 (tokuhirom) それ coderepos.org でできるよ   CodeRepos ktkr!  20:14 (Yappo) 今北産業 20:14 (Yappo) まだhtpasswdきてないよ   htpasswd送る。いきなり幼稚園児の俺がCodeReposのcommiterになる。 が、しかし  21:38 (yusukebe) ちょ、今見たけど、俺のコード汚すぎて見せるのはずかしす 21:39 (otsune) エロサイトははずかしくないのに 21:39 (otsune) ソースは恥ずかしがるってのは 21:39 (otsune) どういう羞恥心だ   そして、名言が生まれる。  21:40 (mala__) 恥軸がぶれている   ということでInspired by malaさんの 「人として恥軸がぶれている」歌詞完成。 まさに今の俺の心情を表している。  「人として恥軸がぶれている」 深夜俺はブログを見ていた やることもないからぼーっと見ていた コーディング成功者がはてぶされていた あの人は軸がぶれてない　素敵 嫉妬するや　そう思って閉じたよ もう寝るぜ　明日からまたサイト管理だ 勃起せずに俺はエロ本をめくった AVの女優　あえいでいた 巨根ちんぽが私のタイプなのよ 彼らったら軸がぶれてない　素敵 わかったぜ(エロサイトで)報われた　その訳 人として　俺恥軸がぶれてんだ それならば 居直れ　もう えろえろえろえろまくって (エロサイト)管理者なの　わかんねぇようにしてやれ しこるぜ　もうえろえろ人間でもきっと 君がいたら やれる (あたしも見てるの 気づいて) 軸のぶれをバイブと考えろ このぶれがエロ界をも変えるだろう 人も俺のサイトに気づかざるを得ない 今はただ震えて見えたって もう　わかったぜ(エロサイトで)報われた　その訳 人として　恥軸がぶれているのさ ああ　わかったぜ震えてる　その訳 それPlaから支えられていたからさ 居直るんだ 僕らは　もうえろえろえろえろまくって (エロサイト)管理者なの　わかんねぇようにしてやれ しこるぜ　もうえろえろ人間でもきっと 君に会えば やれる (あたしがいるの 気づいて)  人として軸がぶれている from YouTube  ことの発端になった記事  ゆーすけべー日記: エロサイトの管理人説  人として軸がぶれている @ Amazon</description>
    </item>
    
    <item>
      <title>はて☆すたでアバウトミーの質問に答えることができる「くえ☆すた」を作ってみた</title>
      <link>https://yusukebe.com/posts/2007/0812175801/</link>
      <pubDate>Mon, 13 Aug 2007 02:58:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0812175801/</guid>
      <description>  [2007年8月8日] 本日、@niftyウェブサービスをオープンしました。@niftyウェブサービスとは、@niftyの各サービスのAPI（Application ProgramInterface）を公開する開発者向けのサイトです。
(中略)
@niftyの第１弾公開APIとして「@nifty TimeLine β」、「アバウトミーβ」、「トピックイット」のAPIをリリースしました。どれも面白いデータを扱えますので、楽しみながら新しいサービスを作ってみてください。
  @niftyウェブサービスがオープンしました - @nifty WebServiceより。 ということで、早速、アバウトミーのAPIを使って、 はてなスターでアバウトミーの質問に答えることができるサービス「くえ☆すた」を楽しみながら作ってみました。アバウトミーとはプロフィールを作成できるサービスで、そのプロフィールを作る上でユーザーが投稿した質問に答えるという機能があるのですが、そこで使われている現在16000件以上もある質問に対して、はてなの提供するブログのエントリーなどに☆をつけることができるはてなスターで答えてしまおうというものです。  くえ☆すた     くえ☆すた : くえ☆すたについてでも書いてますが、アバウトミーの質問だったらアバウトミーで答えりゃいいじゃん、って感じですが、ここはid:jkondo氏に敬意を示す意味でも、強引に「はて☆すたで答えることに意味があるのだ。☆だからこそ楽しい。」という信念を持って作りました。 さらに、kentroさんが作ったはて☆すたアンケートの劣化版パクリな要素大有りで、確かにそうなんですが(苦笑)、アバウトミーを使うからこそ質問の数がたくさんあるのでこちらはこちらでよろしければ楽しんでください。 詳しいことはくえ☆すた : くえ☆すたについてをみてちょ。 それはそうと、はてなスターTシャツ欲しい！ </description>
    </item>
    
    <item>
      <title>Plaggerでニコニコ動画のFLVとコメントを一括ダウンロード！</title>
      <link>https://yusukebe.com/posts/2007/0809015502/</link>
      <pubDate>Thu, 09 Aug 2007 10:55:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0809015502/</guid>
      <description>暇さえあればニコニコ動画。 今日はそんなニコニコ動画をPlaggerを使ってもっと楽しむ方法( = ニコプラ)を教えちゃいます。 Plaggerって何？という人はこちらをご覧ください→Plaggerとは？ (Yusukebe::Tech)。  本日紹介するのは、ニコRSSというサイトが配信しているニコニコ動画のRSSや、ニコニコ動画にひっそりと実装されているマイリストのRSSをPlaggerで読み込んで、その動画を一括でダウンロードするというレシピです。  ニコRSSさんは「本日のランキング動画」や「タグ」「検索結果」の動画へのRSSフィードを提供してくれているとても便利なサービスです。例えば「本日のマイリスト登録ランキングのRSS」はこちらで取得できます→ http://zio3.net/nicoRss/Handler.ashx このように、RSSのエントリーのリンク先がニコニコ動画の動画ページ、つまり 「http://www.nicovideo.jp/watch/sm000000」という形式になっている場合に、 その動画のFLV(Flashビデオ形式)ファイルとXML形式のコメントファイルをダウンロードしてくれるPlaggerのPluginを作りました。 それがこちらです→Plagger::Plugin::Filter::FetchNicoVideo / ver0.01 (Yusukebe::Tech)。 これをPerlの@INCディレクトリなどに適切に配置するかPlaggerのconfigファイルで指定するPluginディレクトリなどにぶち込めば最初の準備は完了です。 早速config.yamlに以下を書いて、plagger -c config.yaml と実行すると、 「本日のマイリスト登録ランキング」100件の動画をダウンロードしはじめます。 いきなり100件もダウンロードしたくねぇえーーという人は途中でCtr-Cとか押して中断してください。 というかほとんどの人はそうした方がいいです^^;  plugins: - module: Subscription::Config config: feed: - url: http://zio3.net/nicoRss/Handler.ashx - module: Filter::FetchNicoVideo config: mail: your@mailaddress password: yourpassword dir: ./tmp/ filename_encode: shift-jis #OSによって変えてください download_comment: 1 #コメントをダウンロードしたいときに1としてください   端末から plagger -c config.yaml コマンドを実行してダウンロードしている様子
 ダウンロードされたFLVとXML、更新日時でソートするとダウンロードされた順に並べられる
 一応これだけでもダウンロードできることはできるのですが、少々問題があります。 まず、ニコRSSのランキングだと100件と件数が多いので、それを制御したいということ。 そして、このままだと重複して同じ動画をダウンロードする場合あって、それではニコニコ動画サーバーに余計な負荷をかけてしまいます。 そこで、Plaggerの機能であるRuleを使います。件数の制御には RecentNを、 重複の制御にはDedupedを使います。 この場合のDedupedのengineにはmanabouさんのDB_File_URLを使った方がよいでしょう(通常のDedupedではpermalinkとdateをあわせたキーで重複をチェックしているが、ニコRSSの場合、permalinkだけの重複チェックの方がいいから)。 それらを組み合わせたconfig.yamlはこんな感じになります。 (追記: Dedupedに関してはotsuneさんからコメントいただきました。このハックの方がいいかもですね。)  plugins: - module: Subscription::Config config: feed: - url: http://zio3.net/nicoRss/Handler.ashx - module: Filter::FetchNicoVideo rule: - module: RecentN count: 20 - module: Deduped engine: DB_File_URL path: ./deduped.db config: mail: your@mailaddress password: yourpassword dir: .</description>
    </item>
    
    <item>
      <title>ブログで今話題のニコニコ動画がわかるNiconorati(ニコノラティ)を作りました</title>
      <link>https://yusukebe.com/posts/2007/0728064225/</link>
      <pubDate>Sat, 28 Jul 2007 15:42:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0728064225/</guid>
      <description>  みんな大好きニコニコ動画。 そんなニコニコ動画をもっと楽しめないかとブログで&#34;今&#34;話題のニコニコ動画がわかるNiconorati(ニコノラティ)というサイトを作ってみました。  
Niconorati (ニコノラティ) - ブログで今話題のニコニコ動画  名前でおわかりの通りテクノラティのAPIを使っていて、つい最近ブログにリンクが貼られたニコニコ動画を、はてなブックマークのコメントなどと一緒に一覧できるサイトです。 見ていると多いときには2,3分にひとつくらいのペースでニコニコ動画へのリンクを貼ったエントリーが全国のどこかで生まれているのがわかって面白いです。 あと、作っていていたら既出かもしれないがはてブで注目されているニコニコ動画を表示するランキングとかGoogle Ajax APIによる検索とかの機能もつけちゃいました。  ニコニコ動画のサイト内ではランキングやタグ機能などを使って動画を探すんですが、どうもそうすると見る動画が偏ってきちゃう。そこで、Niconoratiを使って他の人がどんな動画に興味を持っているかという手がかりから新しいニコニコ動画に出会うということができるかもしれないですね。 ちなみに、XMLやフィードのファイルは30分おきにキャッシュしていて、そのほかデータは自前では抱え込まないという個人的にはお得意の他のサービスにべったり寄り添ったシステムになっています。 はてぶのコメント表示とかでAjaxのロード使いまくっているので重たいかもしれませんが、あしからず。 興味のある方は使ってくださいな。でも、ニコニコの見すぎには注意してね。 </description>
    </item>
    
    <item>
      <title>某ウェブサービスを使ってエロサイト検索「Erohoo!」を作ってみた</title>
      <link>https://yusukebe.com/posts/2007/0712024108/</link>
      <pubDate>Thu, 12 Jul 2007 11:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0712024108/</guid>
      <description>  ERO Plaネトラン掲載記念ということで(もないんだけど)、某ウェブサービスを使ってオトナ向けサイトだけを対象にキーワードでムフフなページを検索できるサイト「Erohoo!」を作ってみました。   検索対象になっているページは厳選された優良動画配信サイトから。 現在のところ「ウラ」なサイトが21件登録されておりまして、『あの女優さんの「ウラ」なビデオあるのかな？見たいな』なんてときにお役に立つこと間違いなしでございます。 また、検索して「ウラ」なページが見つからなかったとしても「オモテ」なサイトから検索して結果を返してくれるので清くあきらめてそちらを楽しむのもよし。ということで、今夜のオカズはErohoo!にお任せ。 18歳以上の方で楽しみたい人はどうぞ。  Erohoo!  PS.  またネトランに載りたいのでこのページにトラックバックかけてみるテスト。 </description>
    </item>
    
    <item>
      <title>RimoChanMakerをRimoChと連動できるようにしました</title>
      <link>https://yusukebe.com/posts/2007/0401035413/</link>
      <pubDate>Sun, 01 Apr 2007 12:54:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0401035413/</guid>
      <description>  昨日公開した RimoChanMaker - Rimoちゃんメーカー。こいつで作ることができるようなユーザチャンネルを管理・共有するサービスRimoCh(名前が紛らわしいですが…)というのがありまして、これと連動したいなーと思っていたら早速作者のkentaroさんが対応してくれました(getベースのURLでチャンネル作成可能)。 リストを作ると「RimoChでチャンネル」というリンクが出てくるのでそれをクリックするとRimoChでチャンネルを作ることができます。これで「チャンネル作成＠RimoChanMaker」→「自分のお気に入りを管理＠RimoCh」→「チャンネルを見る＠Rimo」という流れができましたね。  ちなみに俺が作ったチャンネルは「RimoCh - kamawada のチャンネル一覧」ここに置かれていくことになります。 </description>
    </item>
    
    <item>
      <title>RimoChanMaker / Rimoのユーザチャンネルが簡単に作れるサービス</title>
      <link>https://yusukebe.com/posts/2007/0331144044/</link>
      <pubDate>Sat, 31 Mar 2007 23:40:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0331144044/</guid>
      <description>  はてなのテレビ「Rimo」でユーザチャンネルなるものが登場して楽しくなってきたので、そのユーザチャネルを誰でも簡単に作れるサービスをこさえてみました。こちらです→ 「RimoChanMaker - Rimoちゃんメーカー」。    補足説明をすると、RimoはYouTubeの映像をテレビみたいに「だら見する(だらっと特別な操作なしに垂れ流しされた映像を見る？)」ことができるサービス。「音楽」「コメディ」「フィルム＆アニメ」「ペット＆動物」という4つのチャンネルがあらかじめ用意されてあって、これらのチャンネルではRimo側が選んだ映像が流れる。 で、新しく出てきたユーザチャンネルというのは、よくあるYouTube映像のまとめサイトのようにYouTubeへの映像のリンクが張ってあるウェブページを元に独自のチャンネルを作れるもの。  RimoChanMakerではこうしたユーザチャンネルの元になるウェブページをわざわざウェブページを用意せずに以下のステップで作れます。  YouTube映像を検索 チャンネルに登録する映像を選らぶ(ドラッグ＆ドロップでリストに入れる) 適当に並べ替えたりする チャンネルを作成 or 1クリックでリストに入れた映像をRimoで見る   あまりにも簡単にチャンネルができちゃうので、ユーザチャンネルのリストを汚しちゃったりする弊害があったりして、その辺はどうにかしたいところ。 今のところ一度作ったチャンネルの映像は変更できないので、管理できるようにするとか、 kentaroさんが作ったRimoChと連動するとか･･･。 とりあえず、当初の目的であった「今、だら見したい映像達をすぐにRimoで見る」ってのが実現できるようになったのでよいかな。 </description>
    </item>
    
    <item>
      <title>カーセンサーとYouTubeのマッシュアップサイト作ってみた</title>
      <link>https://yusukebe.com/posts/2007/0309104117/</link>
      <pubDate>Fri, 09 Mar 2007 19:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0309104117/</guid>
      <description>  サンとリクルートが主催するMash up Award 2ndが開催中。 俺も参加したいなと各社が提供している開発リソースを見ていたら、カーセンサーラボのウェブサービスが目に留まった。車のカタログ情報を取得できるのがいい。 そこで、「それYouTubeとマッシュアップできるんじゃね」という空気になって、 面白いか＆審査対象になるのかはさておき、カーセンサーとYouTubeのマッシュアップサイトを作ってみた。 名前はいつも通り「ほげほげTube」メソッドで。できたのがこちら→CarTube / カーチューブ    【サイト表向きの説明】カーセンサーとYouTubeのマッシュアップサイトです。 カーセンサーのカタログに登録されている車に関連すると思われるYouTubeの映像を連続して再生します。 また、再生中にはその車に関するモデル情報や中古車情報などが表示されます。 ベータ版につき動作がおかしい点(とりわけ映像の再生制御)があることをご了承ください。
  ようは、カーセンサーのカタログに登録されている全車種のメーカー名(トヨタとか日産とか)と車名(クラウンとかマーチとか)をキーとしてYouTubeのタグサーチして、そこで得られた映像がランダムで流れて車の情報も一緒に表示という仕組み。多少挙動不審なところがあるけど、最近流行りの「だら見」っぽいこと＝自動連続再生で映像を見せるという方針。あと、再生される映像をメーカー別にフィルタリングできるようにしてある。  で、実際みてみると、出てくる映像が図ったかのごとくCMばかり。 今はもうテレビでは見れない昔のCMも見れたりして面白い。海外のCMとかYouTubeユーザーがパロディで作ったCMとかもでてくる。日産エクストレイルのCMのパロディがうける。  そこで、自分で作っておきながらCMについて考えさせられた。 例えば、「既に販売が終わった車種」はテレビCMなどで取り扱われることはまずないわけだが、 中古車の市場・流通はかなりあるわけで、そのためのYouTubeなどを使った映像によるプロモーションというのは可能性があるのではないかとか。CMって今はテレビ番組の合間に流れるもので、ザッピングされたり、レコーダーでスキップされちゃったりするけど、ある商品カテゴリーのCMをうまく集めていっぺんにみればその価値はあがるんじゃないかとか。。。  以下、ざっくりとした作り方。 今回の肝となるのが車の車種とYouTube映像の関連。 毎回再生ごとにクエリー発行してたら大変なので、オリジナルのクローラーを作って、カーセンサーラボWebサービスのカタログ検索→ブランド名及びモデル名を取得→YouTubeタグ検索→ブランド名とモデル名とYouTubeのビデオIDを持つリストを作成。映像はあまり長いのもなんなので120秒以下の物のみに限った。 Plagger使わないで初めての手作りクローラー体験。【中略】 あとは、バックエンドにJSONプロキシを構えて、ほとんどの動的な情報をJavaScriptで表示させる。最後に適当なロゴを書いてバナーにした。  まだまだ一発ネタ気味ですが、よろしければ暇つぶしにどうぞー。 </description>
    </item>
    
    <item>
      <title>4travel.jpとGoogleマップのマッシュアップサイトを作ってみた</title>
      <link>https://yusukebe.com/posts/2007/0115075835/</link>
      <pubDate>Mon, 15 Jan 2007 16:58:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0115075835/</guid>
      <description>  価格.com WEBサービスコンテストなるものが開催されていて、締め切りが今日。参加賞の「Mozilla Firefox ノベルティ」欲しい！ということで、勉強も兼ねて、旅行のクチコミサイトサイト4travel.jpとGoogleマップのマッシュアップサイトを作ってみた→4traWalker    【説明】4traWalkerは4travel.jpの旅行アルバムをGoogleマップからたどることができるサイトです。 マップ上の適当な場所をクリックするとその場所にちなんだ4travel.jpのアルバム写真が表示され、詳細も見ることができます。  ノリで作ったので、うまく動かない点結構あると思いますが、ご了承を。  簡単な作り方の解説。 実装方針としては基本Javascript/Ajaxでできる部分はブラウザ側に任せて、API叩いてJSONを吐くプロキシとしてCatalystを使うという感じ。もうView::JSON使いまくり。 動作の流れは、Googleマップでクリックされらそこの緯度・経度を取得→それをキーとしてinvGeocoderを使って住所を割り出す→4travelのエリアキーとマッピングさせる(マスタ参照csvから検索)→4travelのJSONPのAPIにエリアキーを投げる→ブラウザ側Javascriptのコールバック関数で処理して画像を並べる→画像がクリックされたらPrototype Window Classで詳細を表示させる、という具合。あと地味にAmazon ECSで検索かけてその地域に関係するかもしれない書籍も表示させたりもしてる。 クリックされたエリアと4travel.jpのエリアキーの対応が結構曖昧なので、クリックしても「県」の情報しか出てこなかったり、クリックした場所と違う場所にある同じ地名の写真でてるぞ、という場合もある実装。 このサイトも含め最近Javascriptのコーディングしていて、昔FlashのActionscriptをガリガリと書いていたときを思い出す。 もっと綺麗なコード書かなきゃなとか、Javascriptでもロジックとビューの部分をわけた方がいいなと体感できてよかった。 </description>
    </item>
    
    <item>
      <title>AmazonとYouTubeの音楽マッシュアップサイトを作ってみた</title>
      <link>https://yusukebe.com/posts/2007/0104053304/</link>
      <pubDate>Thu, 04 Jan 2007 14:33:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2007/0104053304/</guid>
      <description>  「俺流amazonの作り方」なる本が手元に転がっていたので、「じゃあやってやろうじゃないか」と、似たようなのがあるかもしれんがAmazonをYouTubeとマッシュアップさせたサイトを作ってみた。名前は「ZonTube」(ほんとはAmaTubeがよかったけど既にあったので無理やりこれにした)。これもまたCDTubeと同じくグレーがかった一品ですが公開してみる→ZonTubeβ。    ZonTubeはAmazonで扱っている音楽CDのトラックごとに、それと関係のあるYouTubeの映像が見れるかもしれないというもの。音楽CDへはAmazonみたいにカテゴリーからもしくは検索でたどりつくことができて、US、UK、JPと3カ国に対応。 例えば、Oasisの「Stop The Clocks」だとこんな感じ→ZonTubeβ (uk) : Stop The Clocks。 左サイドに「play」というリンクが出てくるのでそれをクリックすればYouTubeのサムネイルが出てきて、映像みれます。 CDを視聴するような感覚になるだろうか(ただ、もちろんメジャーな曲じゃないとそもそもYouTubeに映像がないので出てきません)。なんか、 USのパンク系バンドのCDとかだとアメリカのギターキッズたちが自分の演奏でその曲をカバーしたビデオが出てきたり、昔の辛島美登里の映像にであったりとなかなか面白い。  ざくっとした作り方を。今回はいつもお世話になっているPlaggerは使わず、ECSと呼ばれるAmazon E-Commerce ServiceのRESTとYouTube APIが基本的なモデル。それをCatalyst / Template Toolkitで処理。YouTubeの映像が表示される各CDのページでは、トラック名とアーティスト名をクエリーとしてYouTubeのタグ検索結果をして結果を表示という処理をAjaxでやってる。キャッシュ処理してないのでアクセスが大量に来るとやばげ。というわけでページが重たい場合はご了承ください。 </description>
    </item>
    
    <item>
      <title>CDTubeに自動カウントダウン機能をつけました</title>
      <link>https://yusukebe.com/posts/2006/1209092536/</link>
      <pubDate>Sat, 09 Dec 2006 18:25:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/1209092536/</guid>
      <description>  いたるところで話題になってしまった「CDTube - カウントダウンチューブ」ですが、自動カウントダウン(自動再生)機能をつけてみました。まだバグがいくつかありますが公開。 例えば「20位」の映像を見ていて、最後まで見終わったら、「19位」のページに自動で遷移して映像が流れはじめたり、 指定した秒数「30秒」や「1分」とかたったらどんどんカウントダウンしていくといったものです。 これで、放っておけば、ほんもののテレビに見たいに垂れ流しでカウントダウン映像を見れます。    いろんな見方があるんですが、例を挙げるとこんな感じです。   「20位」から、映像の再生が終わったらカウントダウン(デフォルト)  「20位」からカウントダウン、1分たったら切り替わる  「50位」からカウントダウン、30秒たったら切り替わる 「100位」から超イントロモードでカウントダウン   今もこの記事書きながらデュアルディスプレイの片方のディスプレイで垂れ流してCDTubeみてます。 テストも兼ねてずっと再生しているので、イマドキの邦楽がだんだんわかってきた気がするｗ  簡単な作り方の説明をすると、javascriptのsetTimeoutを使って指定された秒数が来たらページを切り替えるとしてます。映像の長さはYouTubeのAPIを使ってlength_secondsをとってこれるので、その時間をsetTimeoutの引数にしてます。なのでYouTubeの映像のタイムラインをすすめたりすると、「映像が終わっても切り替わらねーぞ」ということになります。その辺の例外は解決不可能なもの以外にも結構あるんですがひとまず放置しとります(URIとかもっとちゃんとしたい)。 PS.  いやーしかしCDTube、すごい反響だ。 はてブが現時点で500越え、ページビューは公開した次の日で1万5千超え。ちょっと、いやかなりびびってるかも。権利関係がやばそうなので、近日中になにか対策をするかもしれません。洋楽のオルタナティブロック版つくりてぇな。とりあえず、便利だといわれるのは嬉しいです。 </description>
    </item>
    
    <item>
      <title>PlaggerとCatalystでCDTVならぬCDTube作ってみた</title>
      <link>https://yusukebe.com/posts/2006/1203130402/</link>
      <pubDate>Sun, 03 Dec 2006 22:04:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/1203130402/</guid>
      <description>  Plaggerでエロサイトばかり作っていてもなんなんで、某すがちゃんに「Plagger使ったなんか面白いアイデアない？」と聞いた。   某すがちゃん「オリコンのチャートとYouTubeをマッシュアップさせたら、カウントダウンTVができるんじゃね？」   それPla。というわけで早速作ってみた。 できたのがこれ、名づけて「CDTube」＝「カウントダウンチューブ」。→CDTube - カウントダウンチューブ    CDシングルのランキング1位から100位までを表示して、その曲に関係すると思われるYouTubeの映像が見れるサイトです。ってかほとんどちゃんとPVが出てくるのがすごいんだが、権利的にものすごいグレーな感じがしてちと怖い。が、とりあえず動いて嬉しいので公開。  作り方はPlagger→db→Catalystという流れのPlalystメソッドを使用。Plaggerで曲のランキングを取得して、YouTubeとAmazonからタイトルとアーティストをキーにして検索かけてフィードを生成→dbに保存→Catalystでページ処理などの操作をできるようにした。詳しい実装方法はこちら。  ってかあんまり邦楽を聴かないので作っても自分で活用してないんだが、唯一驚いたのは今週11位にランクインしてる「最強パレパレード」！ ラジオやってんだｗ 追記  自動カウントダウン機能をつけました。 </description>
    </item>
    
    <item>
      <title>PlaggerとCatalystでエロサイト作ってみた</title>
      <link>https://yusukebe.com/posts/2006/1021111644/</link>
      <pubDate>Sat, 21 Oct 2006 20:16:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/1021111644/</guid>
      <description>Perlで書かれたプラガブルなRSS/ATOMフィードアグリゲーター(直訳)PlaggerとPerlのウェブアプリケーションフレームワークCatalystを使ってエロサイトを作ってみた。とりあえず公開。以前作ったERO Plaの進化版にあたります。動画系優良アダルトサイトの更新情報を自動取得して表示閲覧可能なだけではなく、エロページを検索をすることややタグ・キーワードをたどってエロページをみることができます。一応なんちゃってWeb2.0風なエロサイトを目指しています。 で、Catalystを使ったということでその名もErolyst/エロリスト！ 場所はこちら：エロリスト（18歳未満立ち入り禁止！）。まじCatalystの勉強になった。というか勉強のためと割り切ったらエロサイトみても興奮しなくなったｗ   以下ざくっとした仕組みについてだらだらと。  まず、ERO PlaでもやっているようにFilter-EntryFullTextを使って動画系アダルトサイトの新着ページをアグリゲートしてくる。それでそのデータをStore-DBICを使ってsqliteのファイル形式にしてそれをCatalystで読み込むというのが基本構成。 これやるとCatalystからPlaggerのフィードオブジェクトをモデルとして操作できるのでいろいろできるわけだ。 特に、これを使ってアサマシイことも考えているので、たとえばエントリー毎をPermalink化させて自分のサイトに取り込むことができるのが魅力。 Catalystのコード、一部公開するとEntryというパーマリンクを生成するメソッドはこうなっている。  sub Entry : LocalRegex(&#39;^(http://.*)&#39;) { my ( $self, $c ) = @_; my $url = $c-&amp;gt;request-&amp;gt;uri; my $uri_for = $c-&amp;gt;uri_for; $url =~ s|$uri_for||; my @entries = Erolyst::Model::Plagger::Entry-&amp;gt;search(permalink=&amp;gt;$url); my @tags = Erolyst::Model::Plagger::EntryTag-&amp;gt;search(entry=&amp;gt;$entries[0]-&amp;gt;id); $c-&amp;gt;log-&amp;gt;info($entries[0]-&amp;gt;tags); $c-&amp;gt;stash-&amp;gt;{entry} = $entries[0]; $c-&amp;gt;stash-&amp;gt;{tags} = $entries[0]-&amp;gt;tags; $c-&amp;gt;stash-&amp;gt;{template} = &#39;entry.tt&#39;; }   Catalystはいい点のひとつとしてこれを使うとURIがきれいになるというのがあるけど、 それをかなり体感できた。SEOの効果があがると嬉しい。  次に大きな機能として、検索というのがあるが、これはPlaggerのSearch-Namazuを使ってインデックスを作ってCatalystのコントロール側ではCPANモジュールSearch::Namazuで操作をしているという具合。  もう一つの面白い機能はタグ機能。 普通タグ付けというとソーシャルブックマークのようにユーザー自身がつけるのだけど、 このエロリストではちょっとそうしたCGM（Customer Generated Media）的要素ではない。 どうやってつけられるかというと、PlaggerでFilter-EntryFullTextで抽出するときに、適当に女優名などを見つけてきてそれをタグとしてくっつけている（参照: ゆーすけべー日記: EntryFullTextをタグ入れれるように修正）。というわけで例えば、白石ひよりタグページとかできるわけ。  CGMの件に触れたけど、一応Plaggerのモデル以外にも独自のモデルを作って、例えば、人気のあるタグがわかったりよく検索されるキーワードがわかるようになっている。 タグのページでははてな風味にクリック数の多いタグがでかくなるという仕組みです。  というわけで解説終わり。このPlagger＋Store-DBIC＋Catalystという構成はなかなか面白いということがわかった次第です。さて、このエロリストどうなっていくのやら。あ、あくまでアダルトコンテンツを含んでいるので18禁ですよー（エロリスト本サイトで18歳未満の人の退席先はYahoo!じゃくてはてなにしておいたｗ）。 追記  なんか検索がうまくいかないときがある。Search::Namazuがいけないのかなぁ。いやmod_perlで動かすとおかしいぞ</description>
    </item>
    
    <item>
      <title>PlaggerLDRでエロプラ</title>
      <link>https://yusukebe.com/posts/2006/0916034951/</link>
      <pubDate>Sat, 16 Sep 2006 12:49:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/0916034951/</guid>
      <description>   参考にしたページ  Plagger &amp;amp; PlaggerLDR のインストール : LoveVector subtechグループ - Bulknews::Subtech - [Plagger] Livedoor Reader Frontend  </description>
    </item>
    
    <item>
      <title>Store::DBICでentryのpermalinkも保存させるように修正</title>
      <link>https://yusukebe.com/posts/2006/0831162845/</link>
      <pubDate>Fri, 01 Sep 2006 01:28:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/0831162845/</guid>
      <description>  今夜もPlagger関係。feature-serverというbranchesにあるPlugin、Store::DBICを使えば、フィード情報をデータベースに保存できる。今のところsqliteで保存できることを確認(nfsでマウントした場所でsqliteのdbを作ろうとするとlockedなんちゃらで怒られるのが不満)。これを使って、Plagger→db→Catalystというのをたくらんでいてまたもやエロエロイロイロできそう。 今のバージョンだとStore::DBICで保存できるentryのプロパティにpermalinkがないので修正。ただただ、permalinkの文字を追加しただけですが、以下diff -u 。 </description>
    </item>
    
    <item>
      <title>EntryFullTextをタグ入れれるように修正</title>
      <link>https://yusukebe.com/posts/2006/0830114124/</link>
      <pubDate>Wed, 30 Aug 2006 20:41:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/0830114124/</guid>
      <description>  PlaggerのPlugin、Filter::EntryFullTextでは今のところtagsを入れることができないので、入れれるようにEntryFullText.pmを修正。 </description>
    </item>
    
    <item>
      <title>エントリーリストにはてブ件数を表示する、オンテナにはてブ件数表示機能追加</title>
      <link>https://yusukebe.com/posts/2006/0829014723/</link>
      <pubDate>Tue, 29 Aug 2006 10:47:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/0829014723/</guid>
      <description>  エントリー一覧のように複数のリンクが貼ってあるページがあって、それぞれのリンクにはてなブックマークされている件数を表示させるっていうのを2種類の方法で試してみた。 試す対象は、奥出研究室メンバーのBlog/日記の更新情報をお届けする「オンテナ」。 オンテナの最新記事リストには登録されいているBlogの記事最新100件がリンクされているので、 それぞれのリンクについて被はてなブックマーク件数を表示させる。  まず最初に考え付いた方法は、はてなブックマーク件数取得APIをPerlから操って、表示するにはAjaxを使うという方法。これはAjaxの勉強も兼ねて。で、実際に作ってできたんだけど、よくよく調べてみたら「ブックマーク数を画像で取得する API」なるものを使った方がcgiをたたかない分、格段に表示が早いし簡単なので結局そちらを採択。というわけで、オンテナにはてブ件数を表示させることができました。   でもAjaxのプログラムせっかく書いたので以下に公開。Ajaxのプログラムは初めてだったのでJavaScriptでてこずった。。。リファクタリング必要やね。 </description>
    </item>
    
    <item>
      <title>Plaggerでエロサイト作ってみた</title>
      <link>https://yusukebe.com/posts/2006/0824104057/</link>
      <pubDate>Thu, 24 Aug 2006 19:40:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/0824104057/</guid>
      <description>  Perlで書かれたプラガブルなRSS/ATOMフィードアグリゲーター(直訳)Plaggerを使って、エロサイトを作ってみた。有名/優良なアダルトサイトのエロページを更新時間順に紹介するというもの。その名もERO Pla。場所はこちら(18歳未満立ち入り禁止)。作ってる間エロサイト開きまくりで、母ちゃん急に部屋入ってこないかびくびくしながらYAML書いてたｗ    以下ざっくりとした作り方 </description>
    </item>
    
    <item>
      <title>CustomFeed::YouTube_dev APIを使ってビデオ情報を取得させる</title>
      <link>https://yusukebe.com/posts/2006/0729084555/</link>
      <pubDate>Sat, 29 Jul 2006 17:45:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/0729084555/</guid>
      <description>  YouTubeの特定のタグが付いたビデオページを投稿時間順にRSSで取得したい。 YouTubeのサイトでもタグによるRSSフィードを以下のようなURLでも取得できるらしい(参考:[戯] YouTube でタグによる RSS フィードを取得するには)。  http://www.youtube.com/rss/tag/タグ.rss   でも、これあんまりいけてなくて投稿時間順にソートすることができないんだよね。 ということで「それPla(ry」精神、Plaggerでやってみる。Pluginを探すとmizzyさんが作ったCustomFeed::YouTubeというぴったりのPluginがあるじゃないですか。video_date_uploadedでソートもできる。これはいけるぞ！と思ってRSSを作ってみたが問題がひとつある。RSSで言うとdc:date、pubDateといった更新時間が取得できないのだ。個人的にRSSの魅力はこの更新時間が取得できて、ソートできる点だと感じているので、このままでは使えないなとう感触。そこで、mizzyさんのCustomFeed::YouTubeをハックして俺の希望通りのフィードを吐くようにしてみる。  方針は、ビデオ情報に関してはYouTube APIを利用して取得するというもの。 CustomFeed::YouTubeはYouTubeの検索結果HTMLを解析して全ての情報を取得している。 そこには投稿時間の情報が無いので取得できないという具合になっている。 なので、CustomFeed::YouTubeで取得できるビデオのIDを利用して、そのままそのIDを引数にYouTube APIの youtube.videos.get_detailsというメソッドを呼び出してビデオ情報を取得する。 以下がそのサブルーチン。  sub get_details{ my($dev_id,$video_id) = @_; my $youtube_url = &#34;http://www.youtube.com/api2_rest?method=youtube.videos.get_details&amp;amp;dev_id=$dev_id&amp;amp;video_id=$video_id&#34;; my $youtube_xml = get ($youtube_url) or die(&#34;can&#39;t get xml&#34;); my $parser = XML::Simple-&amp;gt;new(); my $xml_ref = $parser-&amp;gt;XMLin(&#34;$youtube_xml&#34;); return $xml_ref-&amp;gt;{&#39;video_details&#39;}; }   ビデオ情報を取得したらそのままフィードのアイテムに追加。 ビデオの投稿時間upload_timeがUNIX時間で返ってくるので  Plagger::Date-&amp;gt;from_epoch($video_details-&amp;gt;{upload_time});   としてRSSの日付形式に変換してやる。  てなわけで、うまくハックできました→ ソース(YouTube_dev.txt)。Perl始めて間もないので何か変なとこあればアドバイスください。 我が研究室、奥出研のタグ「oklab」に関するRSSはこんな感じです→ http://www.kamawada.com/~yusuke/oklab/youtube/oklab.xml
ちょこちょこ利用しだしたPlagger、Pluginの書き方もわかってきたぞー。宮川さんとCustomFeed::YouTube作ったmizzyさんに感謝。 </description>
    </item>
    
    <item>
      <title>Plagger使ってデイリーベイスターズのRSSを吐き出す</title>
      <link>https://yusukebe.com/posts/2006/0611114006/</link>
      <pubDate>Sun, 11 Jun 2006 20:40:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/0611114006/</guid>
      <description>  横浜ベイスターズの試合情報はデイリーベイスターズというサイトがウェブでは一番充実している。 けど、RSS吐いてない。というわけでPlaggerのFilter::EntryFullTextっての使ってRSS吐き出してみた。 これ、 http://www.kamawada.com/~yusuke/work/plagger/baystars/dailybaysters.xml  うまくマッチさせるのがだるいので、extractの設定せずに、description空。 更新情報とタイトルがわかればいいやと、という主義なのでこれでよし。 なんとなくPlaggerがわかってきた。 Filter::EntryFullTextってのはRSS吐いてないページとかを対象として、 そのページのリンクをたどってページ更新情報＆サマライズをまとめてRSSにしてくれたり、 するんだな。便利だ。  以下assetsディレクトリに入れたyaml  # http://www.kanaloco.jp/sports/bay/back.htm author: Yusuke Wada custom_feed_handle: http://www¥.kanaloco¥.jp/sports/bay/back¥.htm$ custom_feed_follow_link: yb¥d+.html handle: http://www.kanaloco.jp/sports/bay/yb¥d+.html #extract: &amp;lt;p&amp;gt;&amp;lt;font color=&#34;#FF6600&#34; size=&#34;5&#34;&amp;gt;(.*?)&amp;lt;table width=&#34;360&#34; #extract_capture: body   コンフィグyaml  global: assets_path: /path_to/assets timezone: Asia/Tokyo plugins: - module: Subscription::Config config: feed: - url: http://www.kanaloco.jp/sports/bay/back.htm - module: Filter::EntryFullText - module: Publish::Feed config: format: RSS dir: ./ filename: dailybaysters.xml  </description>
    </item>
    
    <item>
      <title>ゆーすけべー日記イメージ検索できた、MovableTypeの記事からイメージ検索するPerl CGI</title>
      <link>https://yusukebe.com/posts/2006/0507141540/</link>
      <pubDate>Sun, 07 May 2006 23:15:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2006/0507141540/</guid>
      <description>ゆーすけべー日記のイメージ検索を作ってみた (前まであったのはYahoo!のウェブサービス使ってたけどMovableTypeの記事から検索した方が反映が早いし面白いので新しく作った)。 トップページの右上イメージ検索というところから検索できます。 URLはhttp://yusukebe.com/s/image.cgi  「鎌団子」で検索した結果
 このように人の名前で検索したりすると面白い。 2000件近いブログのエントリーから検索かけてるので重たいですが、勘弁を (あんまりアクセスするとサーバーが止まる可能性が…、でもとりあえず問題でるまで稼動させる)。  これ、単にクエリーにマッチする記事を見つけてきて、そこのimgタグの画像を表示して、 リンク先にはその記事へのパーマリンクを指定しているというもの。 画像の上にマウスを乗せるとその記事のタイトルが表示されるというのはあれこれポップアップを使わせていただきました。  PerlでMovableTypeのオブジェクトいじるという形で実装。以下ソースコード。 各自の環境にあわせて変数設定して、image.cgiとでも名前付ければ動くはず。 もっと賢いやりかたあったら教えてください。  #!/usr/bin/perl -w #MovableType Image Search #2006/5/7 #by Yusuke Wada #http://yusukebe.com #mt lib ディレクトリの場所を指定 use lib qw(/home/hoge/public_html/weblog/lib); use strict; use CGI; use CGI::Carp qw(fatalsToBrowser); use MT; use MT::Blog; use MT::ConfigMgr; use MT::I18N; use MT::Util qw(encode_html); #settings #mt-sconfig.cgiへのパスを指定 my $configpath = &#34;/home/hoge/public_html/weblog/mt-config.cgi&#34;; my $blogid = 1; #param my $q = new CGI; my $query = &amp;amp;encode_html($q-&amp;gt;param(&#39;query&#39;)); #検索クエリー # if keyword is null #HTMLは適当に書き換えて if (!$query){ print &amp;lt;&amp;lt; &#34;HERE&#34;; Content-Type: text/html &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Image Search&amp;lt;/title&amp;gt; &amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Image Search&amp;lt;/h1&amp;gt; &amp;lt;form method=get action=.</description>
    </item>
    
    <item>
      <title>debian&#43;apache2でmod_perlを有効にするには</title>
      <link>https://yusukebe.com/posts/2005/1225131057/</link>
      <pubDate>Sun, 25 Dec 2005 22:10:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2005/1225131057/</guid>
      <description> たぶん、これでいけると思う。
 1.mod_perlをapt-getでインストール #apt-get install libapache2-mod-perl2 2.モジュールを有効化 /etc/apache2/mods-available/perl.confに PerlModule ModPerl::Registry を追加 3.apacheを再起動  参考にしたサイト：  MovableType を mod_perl (Apache::Registry) 環境下で動かす方法 : NDO::Weblog Techknow Movable Type: Movable Type を mod_perl で高速化する - Apache::Registry 編 MovableType/高速化・軽量化 - Debianハックしちゃうぞ AquBlog: DebianでApache2 － モジュールの設定ファイル   追記(その1)
mod_perlは動いてるっぽいんだけど、Movabletypeに適用しようとするとエラる。よくわからん。
追記(その2)
apache2+mod_perl2の環境でMovabletypeはうまく動かないみたい。よくよく調べたりいじったりしてるとmod_perlで動かしたcgiはsuexecがきかないことが発覚。だめじゃん。
追記(その3)
apache1+mod_perl1の環境でMTを動かしてみたんだけど、キャッシュが裏目に出たのかMTの管理画面とか再構築するフォームとかをたたくと途中で何も表示されなくなる。Apacheのコネクション時間を設定すればいいのかな？誰か教えてけろー 追記(その4)
上記の問題、httpd.confのMaxRequestPerChildの値を大きくしたら直った。値が低かったから.cgiで複数プロセスを発生させるようなやつは途中で死んだんだ。 追記(その5)
上記、そんなことはなかった。 </description>
    </item>
    
    <item>
      <title>「Perlデータマンジング」読みました</title>
      <link>https://yusukebe.com/posts/2004/0307112512/</link>
      <pubDate>Sun, 07 Mar 2004 20:25:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2004/0307112512/</guid>
      <description>以前大量に本を買ったうちの一冊Perlデータマンジング―データ加工のテクニック集を読んだ。
 データマンジングとは聞きなれない言葉だけどこの本の冒頭には
 データマンジングとは、あるフォーマットのデータを受け取り、 その他のフォーマットに変換することすべてを表します。 と記述されている。 これってよくあることというか大抵のプログラミングはこういった作業が含まれるわけで、僕も普段からPerlのプログラミングに限らずFlashのプログラミングでさえもこの件で問題にぶち当たり、ぶちあったときに「ああここのデータは全部のプロパティをハッシュでもっときゃいいのかなー」とか反省することがある。反省することはするんだけどいざまた実装する時にその理想のことができなったりでまた失敗したり。
このPerlデータマンジングという本は、データをどのように受け取り、されにそれをどのような中間データとして保持し、出力するかという点の見事なアドバイスでありそこに神経を向けさせるいいスパイスになると思う。
あと、僕がPerlにかなり精通してないせいか「目からうろこ」的な発見がたくさんあった。たとえば「$/変数が入力レコードセパレータである」とか。
宮川さんの訳もさくっと読めたし、カバーや部のはじめのイラストに出てくるおっちゃん（トルコの国家第一秘書らしい）も楽しかったし、よい勉強になった。</description>
    </item>
    
    <item>
      <title>旧日記をインポート、完全移行達成</title>
      <link>https://yusukebe.com/posts/2004/0124155850/</link>
      <pubDate>Sun, 25 Jan 2004 12:58:00 +0900</pubDate>
      
      <guid>https://yusukebe.com/posts/2004/0124155850/</guid>
      <description>Hyper NIKKI Systemで運営してた旧日記のデータをMovableTypeで運用しているこの新ゆーすけべー日記（yusukebe.com）へインポートすることについさきほど達成した。
やり方は
HNS独自のフォーマットで書かれている日記データをMTのインポートフォーマットに変更
その際にサカイ家.NET: 過去の日記をインポートにあるperlのスクリプトを改良して使わせていただいた。サカイヤ屋さんスクリプトからの変更点は
 サカイヤさんスクリプトでは、HNSで改行を表す~を全て削除して、COVERT BREAKSに改行を任せているが、それだとかなり崩れるし、~が入るURLとかが正しく機能しないので行末にある~をbrタグに変換するようにした LINKやIMGタグのサイト名やALT名に空白が含まれるとおかしかったので修正した　（.*）を(.*?)にして最短マッチング！ LNEWで題名にURLが入るときにエントリータイトルにURLが含まれてしまうので、URLを取り除き、エントリーボディーの中にリンクを表示するようにした サカイヤさんのスクリプトではSUBやLSUBで始まるブロックもひとつのエントリーとしていたが、SUBやLSUBをh4であらわし、エントリーの最小単位をNEW、LNEWで始まるブロックとした 過去の日記の参照をそのままにすると新サイトに移行しても旧サイトへ飛んでしまう。自サイトへのリンクはURLから日付を抽出して、MTのDaily Archivesのhtmlへ飛ばすようにした イメージフォルダへのパスが相対だったので新サイトのアーカイブパスhttp://yusukebe.com/archivesをつけて絶対パスにした DIVに対応させた  などなど このようにPerl＆正規表現初心者の僕ががんばって作ったスクリプトがこちら
hnf2mt_yusuke01.pl
これをHNSの日記ファイルのあるディレクトリで実行。
できたファイルをMTのimportフォルダの中に入れて管理画面からImport。かなり長い時間かかって完了。約１０００のエントリーになった。リビルドもたいそうな時間が。インポートログはみていて気持ちがいい。
さあ過去のネタを掘り起こすぞ。そして掘り起こしてください（左のメニューとか検索とかから過去のネタにありつけます。面白いネタあったらコメントに書いてください。僕も掘り起こしていきます）</description>
    </item>
    
  </channel>
</rss>