+++
Categories = ["tech"]
Description = "   鎌団子が Perl を始めた。「初めてのPerl」を夜な夜な読んでから寝ているらしい。  昨日は久しぶりにオモロキオフィスに行って鎌団子と会ったので、「じゃあ、お勉強もいいけど実際に Perl のコードを書こう」ということになった。コ"
Tags = ["Perl"]
date = "2009-01-20T13:37:00+09:00"
title = "鎌団子にPerlを教える「スクレイピング編その1」"
author = "kamawada"
archive = ["2009"]
draft = false
+++


<p>
  <a href="http://kamadango.com/2009/01/perl.html">鎌団子が Perl を始めた</a>。「初めてのPerl」を夜な夜な読んでから寝ているらしい。
</p>
<p>
昨日は久しぶりにオモロキオフィスに行って鎌団子と会ったので、
「じゃあ、お勉強もいいけど実際に Perl のコードを書こう」ということになった。
コードを書く前にどんなものを作りたいかが重要なんだけど、
いろいろ話していくと最初は Webページや Web API 等 から情報取得をしたらいいじゃないかとまとまった。
</p>
<p>
  そこでとりあえず「ボケて」の自分のボケページから、ボケに対する星をつけてもらった数の合計（1ページ内にボケがいくつか表示されているのでそれの合計）を数えるプログラムを作ることにした（リンク: <a href="http://bokete.jp/user/kamadango/boke">鎌団子のボケページ</a>）。
  「それ、データベース持ってんだから直接読めばいいんじゃね」と思いつつ、スクレイピング、
  つまり Web ページから情報を引っこ抜いてくる手法を試してみることにした。
  ボケてのページを再確認したところ、Web::Scraper を使うほどあまり構造化されていないことに
  気づいたので正規表現を使う方向でやってみる。
</p>
<p>
  そんな具合で、サンプルコードを書いてみて解説をした。
  自分でいきなり書くのはさすがに難しいし、時間もかかる。最終的には自分でモジュール探したり、もしくは自分で書いたりして作っていくべきなんだけど、いいきっかけになるかなぁと。
  で、1行1行といってもそんな量ないんだけど、説明してみたらそこそこ納得してもらった様子である。
</p>
<p>
  自分もまだ勉強中の身であるが、このくらいだったら教えられるんだなと思ったり、
  Perl ってモジュールうまく使えばコード量かなり減らせるんだと気づいたり、個人的にも面白かった。
</p>
<p>
  プログラミングはきっかけが大事なので、鎌団子だけじゃなくてこの日記を見てもらっている人にも、その機会になればすごく嬉しい。
  ということで以下がサンプルコード、とコメントつきのサンプルコード。
  鎌団子にPerlを教えるがシリーズ化するかもしれないということでとりあえずそれに対応できるタイトルにしてみたので、続きがあるかもねー。
</p>
<p>
  コメント無し
</p>
<pre class="brush: perl"> use strict;
use warnings;
use Encode;
use LWP::UserAgent;
use Perl6::Say;
use utf8;

my $url     = "http://bokete.jp/user/kamadango/boke";
my $ua      = LWP::UserAgent-&gt;new;
my $res     = $ua-&gt;get($url);
my $content = $res-&gt;content;

$content = Encode::decode( "utf8", $content );
my @counts = $content =~ /★の合計.*?(\d+)/gm;

my $total = 0;
for my $count (@counts) {
    $total += $count;
}

say "total: $total";
 </pre>

<p>
  コメントあり
</p>

<pre class="brush: perl"> use strict;
use warnings;

use Encode;
use LWP::UserAgent;
use Perl6::Say;
use utf8;

# ボケて kamadango ボケページ の URL
my $url = "http://bokete.jp/user/kamadango/boke";

# ページを取得するために LWP::UserAgent モジュールを使う、インスタンス化
my $ua = LWP::UserAgent-&gt;new;

# get メソッドを使ってレスポンス(HTTP::Response)のオブジェクトを取得する
my $res = $ua-&gt;get($url);

# 本来ならばここで取得が失敗した場合の処理を入れるが割愛
# HTTP::Response の content メソッドを使って取得したページの中身を変数に入れる
my $content = $res-&gt;content;

# 取得したページを utf8 で decode する
$content = Encode::decode( "utf8", $content );

# 正規表現を使って★の合計数を数字として持ってきて、配列に入れる
my @counts = $content =~ /★の合計.*?(\d+)/gm;

# 配列を for 文でまわして該当する要素の値を
# $count 変数に入れつつ、$total 変数へ足していく
my $total = 0;
for my $count (@counts) {
    $total += $count;
}

# say メソッドで標準出力へ書き出す
say "total: $total";

 </pre>

<p></p>
<div style="float:left"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111269/kamawada-22/"><img alt="初めてのPerl" class="at-xid-6a0133f4781589970b015435b6f2d6970c" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015435b6f2d6970c-pi.jpg style="border:none;"></a></div>
<div style="float:left;margin-left:15px;">
<div style="font-size:12pt"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111269/kamawada-22/">初めてのPerl</a></div>
<div style="font-size:7pt;font-family:verdana;">posted with <a href="http://yusukebe.com/b/amazon/search/">yusukebe.com::AmazonSearch</a> on 2009.1.20</div>
<div style="font-size:10pt;">
<ul style="list-style-type:none;padding:0;">
<li>ランダル・L. シュワルツ トム フェニックス  </li>
<li>単行本 / オライリージャパン </li>
<li>Amazon 売り上げランキング: 12066</li>
</ul>
<ul style="list-style-type:none;padding:0;"><li>Amazon おすすめ度の平均: <img alt="4.5" class="at-xid-6a0133f4781589970b015435b6d28c970c" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015435b6d28c970c-pi.gif style="margin:0;"><ul style="list-style-type:none;padding-left:0;">
<li>
<img alt="5" class="at-xid-6a0133f4781589970b015435b6d28e970c" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015435b6d28e970c-pi.gif style="margin:0;"> 素晴らしきPerlの世界への案内</li>
<li>
<img alt="5" class="at-xid-6a0133f4781589970b015435b6d28e970c" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015435b6d28e970c-pi.gif style="margin:0;"> 読み物としても十分面白い</li>
<li>
<img alt="5" class="at-xid-6a0133f4781589970b015435b6d28e970c" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015435b6d28e970c-pi.gif style="margin:0;"> 定番書</li>
<li>
<img alt="5" class="at-xid-6a0133f4781589970b015435b6d28e970c" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015435b6d28e970c-pi.gif style="margin:0;"> 初心者も持っておきたい一冊</li>
<li>
<img alt="5" class="at-xid-6a0133f4781589970b015435b6d28e970c" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015435b6d28e970c-pi.gif style="margin:0;"> CGI言語としてのPerl</li>
</ul>
</li></ul>
<a href="http://www.amazon.co.jp/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AEPerl-%E3%83%A9%E3%83%B3%E3%83%80%E3%83%AB%E3%83%BBL-%E3%82%B7%E3%83%A5%E3%83%AF%E3%83%AB%E3%83%84/dp/4873111269%3FSubscriptionId%3D13C5PCPS36EMN8C22682%26tag%3Dws%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873111269">Amazon.co.jpで詳細を見る</a>
</div>
</div>
<div style="clear:left;"></div>

<p></p>
<div style="float:left"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798119172/kamawada-22/"><img alt="モダンPerl入門" src="http://ecx.images-amazon.com/images/I/51fKqQq6cgL._SL160_.jpg" style="border:none;"></a></div>
<div style="float:left;margin-left:15px;">
<div style="font-size:12pt"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798119172/kamawada-22/">モダンPerl入門</a></div>
<div style="font-size:7pt;font-family:verdana;">posted with <a href="http://yusukebe.com/b/amazon/search/">yusukebe.com::AmazonSearch</a> on 2009.1.20</div>
<div style="font-size:10pt;">
<ul style="list-style-type:none;padding:0;">
<li>牧 大輔  </li>
<li>大型本 / 翔泳社 </li>
<li>Amazon 売り上げランキング: 532</li>
</ul>
<a href="http://www.amazon.co.jp/%E3%83%A2%E3%83%80%E3%83%B3Perl%E5%85%A5%E9%96%80-%E7%89%A7-%E5%A4%A7%E8%BC%94/dp/4798119172%3FSubscriptionId%3D13C5PCPS36EMN8C22682%26tag%3Dws%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798119172">Amazon.co.jpで詳細を見る</a>
</div>
</div>
<div style="clear:left;"></div>

