+++
Categories = ["tech"]
Description = " 元ネタがmattnさんがsinatraで作ったものかつ、さらにmiyagawaさんにコアな部分を教えてもらったということで、お二人に敬意を示しつつ紹介。  Big Sky :: javascriptで動くtwitter streamクライ"
Tags = ["Perl"]
date = "2009-10-13T20:02:00+09:00"
title = "multipart/mixedなストリームをPlack/PSGIでpushする"
author = "kamawada"
archive = ["2009"]
draft = false
+++


<p>
元ネタがmattnさんがsinatraで作ったものかつ、
さらにmiyagawaさんにコアな部分を教えてもらったということで、
お二人に敬意を示しつつ紹介。
</p>
<p>
<a href="http://mattn.kaoriya.net/software/lang/javascript/20091013002658.htm">Big Sky :: javascriptで動くtwitter streamクライアントを作るならばmultipart/mixedを使うべき</a>
では、Twitter Stream API で取得したTwitterのつぶやきをmultipart/mixedで送出し、
それをdiggで使われているDUI.jsとStream.jsというJSのライブラリで受け取り、表示する方法を紹介しています。
</p>
<p>
sinatraで実装されているので、Plack/PSGIでも実装できないかと思って作ってみました。
</p>
<pre> $ plackup -a fast-twitter-stream.psgi --port 8080 -s Coro
 </pre>
<p>
で起動します。ServerにはCoroを指定します。
以下が fast-twitter-stream.psgi です。
</p>

<pre class="brush: perl"> use Coro;
use Coro::Channel;
use Coro::AnyEvent;
use AnyEvent::Twitter::Stream;
use Plack::Request;
use Plack::Builder;
use IO::Handle::Util qw(io_from_getline);
use Encode;

my $username = $ENV{TWITTER_USERNAME};
my $password = $ENV{TWITTER_PASSWORD};
my $boundary = '|||';
my $app = sub {
    my $env = shift;
    my $req = Plack::Request-&gt;new($env);

    if ( $req-&gt;path eq '/push' ) {
        my $queue    = Coro::Channel-&gt;new;
        my $streamer = AnyEvent::Twitter::Stream-&gt;new(
            username =&gt; $username,
            password =&gt; $password,
            method   =&gt; 'filter',
            track =&gt; 'twitter',
            on_tweet =&gt; sub {
                $queue-&gt;put(@_);
            },
        );
        my $body = io_from_getline sub {
            my $tweet = $queue-&gt;get;
            if( $tweet-&gt;{text} ){
                return "--$boundary\nContent-Type: text/html\n" .
                    Encode::encode_utf8( $tweet-&gt;{text} );
            }else{
                return '';
            }
        };
        return [ 200, ['Content-Type' =&gt; qq{multipart/mixed; boundary="$boundary"} ], $body ];
    }
    if ( $req-&gt;path eq '/' ) {
        my $res = $req-&gt;new_response(200);
        $res-&gt;content_type('text/html');
        $res-&gt;body( html() );
        $res-&gt;finalize;
    }
};

builder {
    enable "Plack::Middleware::Static",
        path =&gt; qr{\.(?:png|jpg|gif|css|txt|js)$},
            root =&gt; './static/';
    $app;
};

sub html {
    my $html = &lt;&lt;'HTML';
&lt;html&gt;&lt;head&gt;
&lt;title&gt;Server Push&lt;/title&gt;
&lt;script src=""&gt;http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js"&gt;
&lt;script type="text/javascript" src="/js/DUI.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/js/Stream.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function() {
var s = new DUI.Stream();
s.listen('text/html', function(payload) {
$('#content').prepend('&lt;p&gt;' + payload + '&lt;/p&gt;');
});
s.load('/push');
});
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Server Push&lt;/h1&gt;
&lt;div id="content"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
HTML
    return $html;
}

 </pre>

<p>
ブラウザから"<a href="http://localhost:8080/">http://localhost:8080/"</a>にアクセスすると、
もの凄い勢いでつぶやきが追加されていくのが分かるかと思います。しかも切断していないのでかなり高速です。
</p>
<p>
<strong>お試しの効果には個人差があります。</strong>
</p>
<p>
multipart/mixedとこのDiggライブラリの組み合わせ、いいですね。
というわけで、元ネタになったmattnさん、Plackでpush配信の仕方を教えてくれたmiyagawaさんありがとうございました。
Enjoy!
</p>
<ul>
<li><a href="http://github.com/yusukebe/fast-twitter-stream">yusukebe's fast-twitter-stream at master - GitHub</a></li>
</ul>

