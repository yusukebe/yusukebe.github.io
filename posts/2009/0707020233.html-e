+++
Categories = ["tech"]
Description = " 昨日公開した「sugokuii beta」。ある程度のトラフィックは予想していたものの、深夜0時を超えた当たりから急に負荷が高くなった。この深夜0時前後は魔の時間帯と俺は認識していて、他に俺が運営しているムフフなサイトも23時頃からほんと"
Tags = ["Perl"]
date = "2009-07-07T11:02:00+09:00"
title = "Senna、MySQL 周りの「sugokuii beta」対処法的チューニング"
author = "kamawada"
archive = ["2009"]
draft = false
+++


<p>
昨日公開した「<strong><a href="http://sugokuii.urasukebe.com/">sugokuii beta</a></strong>」。
ある程度のトラフィックは予想していたものの、
深夜0時を超えた当たりから急に負荷が高くなった。
この深夜0時前後は魔の時間帯と俺は認識していて、
他に俺が運営しているムフフなサイトも23時頃からほんと急にアクセスが増える。
ただ今回の場合は尋常ではなかった。それもそのはず、
某人気おもしろ系ブログからリンクをしてもらったらしく、
いわゆる「<strong>スラッシュドット効果</strong>」が発生していたのだ。
</p>
<blockquote>
<p>
スラッシュドット効果（スラド効果）、スラッシュドット現象（スラド現象）、Slashdot effectとは、あるウェブサイトがスラッシュドットに紹介されることで、そのサイトへのトラフィック（負荷）が爆発的に増え、サーバの限界を超えてしまうこと。一般的にウェブサイトに短期に爆発的にトラフィック（負荷）発生している状態だけを指すときもある。
</p>
<p>
<a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E3%83%89%E3%83%83%E3%83%88%E5%8A%B9%E6%9E%9C">スラッシュドット効果 - Wikipedia</a>
</p>
</blockquote>
<p>
ロードアベレージは20弱。上記のスラド現象に加え、今から考えると負荷に対しての「ずぼら」な作りのせいでなり負荷が高い。
ちなみにサーバーは ec2 の一番安い m1.small インスタンス一台ね。
</p>
<p>
そこで監視すると明らかに Senna を組み込んだ MySQL がボトルネックになっている。
というわけで、午前1時頃から Web アプリも含む以下の対処法的なチューニングを施し、
2時過ぎくらいにはやっと落ち着いてみれるようになので簡単に紹介。
</p>
<p>
my.cnf の設定を見直してキャッシュメモリを増やす。これは基本中の基本。
以下の DSAS のページが詳しいです。
</p>
<ul>
<li><a href="http://dsas.blog.klab.org/archives/50860867.html">DSAS開発者の部屋:5分でできる、MySQLのメモリ関係のチューニング！</a></li>
</ul>
<p>
それでも効果は薄いので、今度はアプリケーション側でキャッシュをさせる。
O/R Mapper には DBIx::Class を使っているので、そんな時は、
DBIx::Class::Cursor::Cached がお気軽で便利。
Cache オブジェクトには、Cache::Memcached::Fast を使用し、
schema を返す Mouse なオブジェクトのコードは以下のようになった。
</p>
<br>
<pre class="brush: perl"> package SugokuII::API::DB;
use Mouse;
use Cache::Memcached::Fast;
use DBIx::Class::Cursor::Cached;
use SugokuII::Schema;

has 'connect_info' =&gt; (
    is      =&gt; 'rw',
    isa     =&gt; 'ArrayRef',
    default =&gt; sub {
        return [ 'dbi:mysql:dbname:localhost', 'user', 'pass' ];
    }
);

no Mouse;

sub connection {
    my $self   = shift;
    my $schema = SugokuII::Schema-&gt;connect( @{ $self-&gt;connect_info() },
        { cursor_class =&gt; 'DBIx::Class::Cursor::Cached' } );
    $schema-&gt;default_resultset_attributes(
        {
            cache_object =&gt; Cache::Memcached::Fast-&gt;new(
                { servers =&gt; [ { address =&gt; 'localhost:11211' } ], }
            ),
            cache_for =&gt; 60 * 60,
        }
    );
    return $schema;
}

__PACKAGE__-&gt;meta-&gt;make_immutable();
1;
 </pre>
<br>
<p>
これで、そこそこ負荷が下がったが、どうもまだ senna の全文検索周りが
遅い。そこでドキュメントを見てみると以下のような記述を発見。
</p>
<blockquote>
<p>
Linux 2.6以降では、カーネルのバッファキャッシュを経由せずにファイルに非同期アクセスを行える AIO/DIOという機構が備わっています。
この機構を用いて、 VA Linux Systems Japan の北目さんがSennaのユーザレベルキャッシュ機能を実装しました。
低メモリ消費で高効率なキャッシュなので、メモリ資源の制約がシビアな環境で高い性能が要求される局面で効果が期待できます。
</p>
</blockquote>
<p>
ということで手元の環境でも動作したので、環境変数を設定するため
</p>
<pre> # export SEN_AIO_ENABLED=1
 </pre>
<p>
してから mysqld を起動させてみた。
すると、上記した対策をあわせてかなーり mysql の負荷が減ったようだ。
</p>
<p>
あとは細かい、けどそこそこ重要な対策。主にトップページの見せ方を工夫してみた。
当初は「Hot Words」として最近検索された単語を頻度でソートして毎回動的に表示してたのだけど、
これがまた重たい。なので、徐々に数を減らしていったが最終的には表示しないように施した。
けれども、「全く表示させない」というのはベストの策ではないことにちょっとして気がついた。
というのも、検索窓だけあって他にたどるリンクがない場合、
ユーザーはおそらく適当な単語を最初に入力して検索を行うであろう。
すると、上記したキャッシュのヒット率が格段に悪くなるわけで、
対策の意味が薄れてしまうのだ。
なので、静的に全く固定でトップページに一つだけ
</p>
<blockquote>
<p>
例: <a href="http://sugokuii.urasukebe.com/search?q=%E6%9F%9A%E6%9C%A8%E3%83%86%E3%82%A3%E3%83%8A">柚木ティナ</a>
</p>
</blockquote>
<p>
と検索結果へのリンクを張っておいた。
これだと初めて訪れたユーザーもとりあえずはそこをクリックすることになり、
キャッシュにヒットするのでレスポンスは速くなる。
その分だけ全体的な負荷が下がるとみていいだろう。
</p>
<p>
ということで、以下が munin で出力したロードアベレージのグラフです。
所々途切れているのは、あせって munin のプロセス自体落としてたからですw
時間がピークを過ぎたとはいえ、そこそこ負荷が減っているのがわかると思います。
</p>
<p>
<img alt="munin" class="at-xid-6a0133f4781589970b015391e39266970b" src="http://yusukebe.typepad.jp/.a/6a0133f4781589970b015391e39266970b-pi">
</p>
<p>
以上、今回学んだことを含みまとめてみました。
後ほど別エントリーで書こうと思うけど、
サーバーの負荷についての対策や心構えについては
この「<strong>キャパシティプランニング</strong>」という本が非常に刺激的なのでオススメです。
</p>
<div>
<div style="float:left"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113997/kamawada-22/"><img alt="キャパシティプランニング ― リソースを最大限に活かすサイト分析・予測・配置" class="at-xid-6a0133f4781589970b015391e39278970b" src="http://yusukebe.typepad.jp/.a/6a0133f4781589970b015391e39278970b-pi" style="border:none;"></a></div>
<div style="float:left;margin-left:15px;">
<div style="font-size:12pt"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113997/kamawada-22/">キャパシティプランニング ― リソースを最大限に活かすサイト分析・予測・配置</a></div>
<div style="font-size:7pt;font-family:verdana;">posted with <a href="http://yusukebe.com/b/amazon/search/">yusukebe.com::AmazonSearch</a> on 2009.7.7</div>
<div style="font-size:10pt;">
<ul style="list-style-type:none;padding:0;">
<li>John Allspaw  </li>
<li>ペーパーバック / オライリージャパン </li>
<li>Amazon 売り上げランキング: 37076</li>
</ul>
<ul style="list-style-type:none;padding:0;"><li>Amazon おすすめ度の平均: <img alt="4.0" class="at-xid-6a0133f4781589970b014e8bd727e1970d" src="http://yusukebe.typepad.jp/.a/6a0133f4781589970b014e8bd727e1970d-pi" style="margin:0;"><ul style="list-style-type:none;padding-left:0;"><li>
<img alt="4" class="at-xid-6a0133f4781589970b014e8bd727e1970d" src="http://yusukebe.typepad.jp/.a/6a0133f4781589970b014e8bd727e1970d-pi" style="margin:0;"> ログをとるソフトの使い方と見方を書いています</li></ul>
</li></ul>
<a href="http://www.amazon.co.jp/%E3%82%AD%E3%83%A3%E3%83%91%E3%82%B7%E3%83%86%E3%82%A3%E3%83%97%E3%83%A9%E3%83%B3%E3%83%8B%E3%83%B3%E3%82%B0-%E2%80%95-%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E6%9C%80%E5%A4%A7%E9%99%90%E3%81%AB%E6%B4%BB%E3%81%8B%E3%81%99%E3%82%B5%E3%82%A4%E3%83%88%E5%88%86%E6%9E%90%E3%83%BB%E4%BA%88%E6%B8%AC%E3%83%BB%E9%85%8D%E7%BD%AE-John-Allspaw/dp/4873113997%3FSubscriptionId%3D13C5PCPS36EMN8C22682%26tag%3Dws%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113997">Amazon.co.jpで詳細を見る</a>
</div>
</div>
<div style="clear:left;"></div>
</div>
<br>
<p>
引き続き、「<strong><a href="http://sugokuii.urasukebe.com/">sugokuii beta</a></strong>」をよろしくお願いします。
</p>

