+++
Categories = ["tech"]
Description = " Webアプリケーションが遅いとか感じる時って、僕の場合、I/Oがボトルネックなケースが多いのです。つまり、MySQLへクエリーを投げて返却を待つとか、memcachedにget/set等のメソッドを発行した時の待ち時間が長くかかってたり."
Tags = ["Perl"]
date = "2013-04-14T09:42:00+09:00"
title = "Devel::KYTProfのログをファイルに書き出して、I/Oのボトルネックを知る"
author = "kamawada"
archive = ["2013"]
draft = false
+++


<p>Webアプリケーションが遅いとか感じる時って、僕の場合、I/Oがボトルネックなケースが多いのです。つまり、MySQLへクエリーを投げて返却を待つとか、memcachedにget/set等のメソッドを発行した時の待ち時間が長くかかってたり... とかです。そうすると計測して原因を突き止めたくなります。PerlのプロファイラはDevel::NYTProfとか色々ありますが、こうしたI/Oに関しての計測は「<a href="http://search.cpan.org/dist/Devel-KYTProf/">Devel::KYTProf</a>」が便利です。適当な場所にて</p>

<pre> use Devel::KYTProf;
 </pre>

<p>するだけで標準エラー出力に「空気読んで」ウマいこと色付きで、I/O周りのかかった時間とどこの箇所か？を表示してくれます。</p>

<p><img alt="スクリーンショット 2013-04-14 9.44.05.png" src="http://yusukebe.com/archives/2013/04/14/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202013-04-14%209.44.05.png" width="557" height="333" class="mt-image-none" style=""></p>

<p>ただ、この「標準エラー出力に表示」ってのは開発時にターミナルで確認する分には便利なのですが、例えば本番環境などで一時的にパフォーマンスを計測するためにはちょっと不便なことがあります。出来れば確認がしやすいようにファイルに書き出したくなります。Devel::KYTProfではlogメソッドを実装してあるロガーを指定すれば、柔軟に出力を制御出来るので、それを利用してファイルに書き出すことが出来ます。</p>

<p>ネームスペースをどうするか？Mouse使っている！ってのは置いておいて以下のようなロガークラスを定義します。</p>

<pre> package Nopaste::Logger;
use Mouse;
use Log::Dispatch;
use Term::ANSIColor qw/colorstrip/;
use File::Spec;
use Encode;

has 'filename' =&gt; ( is =&gt; 'ro', isa =&gt; 'Str', default =&gt; 'kytprof.log' );
has 'logger' =&gt; ( is =&gt; 'ro', isa =&gt; 'Log::Dispatch', lazy_build =&gt; 1 );

sub _build_logger {
    my $self = shift;
    my $file = File::Spec-&gt;catfile('./log/' . $self-&gt;filename);
    my $log = Log::Dispatch-&gt;new(
        outputs =&gt; [
            [ 'File', min_level =&gt; 'debug', filename =&gt; $file, mode =&gt; 'append' ],
        ],
   );
   return $log;
}

sub log {
    my ($self, %args) = @_;
    my $message = $args{message};
    $message = colorstrip($message);
    $message = encode_utf8($message);
    my $time = scalar localtime;
    $message = "[$time] $message";
    $self-&gt;logger-&gt;debug($message);
}

__PACKAGE__-&gt;meta-&gt;make_immutable();

1;
 </pre>

<p>logクラスでは</p>

<ul>
<li>表示するメッセージを引数から取得</li>
<li>ファイルに書き出すのでカラー表示のためのいらない文字を削除する</li>
<li>エンコード周りの処理</li>
<li>タイムスタンプを追加</li>
</ul>


<p>してからLog::Dispatchを使ってファイルに追加保存していきます。
これをWebアプリのコード内で使います。</p>

<pre> use Devel::KYTProf;
use Nopaste::Logger;

...;

my $logger = Nopaste::Logger-&gt;new;
Devel::KYTProf-&gt;logger($logger);
 </pre>

<p>今回の設定だと、アプリを実行しているディレクトリから見て「./log/kytprof.log」というファイルにログが出力されます。ファイルを覗いてみるとこんな感じ！</p>

<p><img alt="スクリーンショット 2013-04-14 9.57.42.png" src="http://yusukebe.com/archives/2013/04/14/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202013-04-14%209.57.42.png" width="681" height="275" class="mt-image-none" style=""></p>

<p>お、いい感じですね。おかげでmemcachedのgetが異様に時間かかってる！ってのが発見出来たりして面白いです。オレオレで試しでやってみているので他にいい方法があれば教えてください＞＜</p>

