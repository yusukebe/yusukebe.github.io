+++
Categories = ["tech"]
Description = " ここ最近の僕の開発で指標になっているのは「システムとしてのクオリティを上げるか」であり、それって当然のごとく行われているかもしれなくて、いわゆる Quality Assurance = QA なんて言葉があったり、某社では Test En"
Tags = ["Perl", "Technologies", "Mojolicious"]
date = "2013-07-09T21:12:00+09:00"
title = "最近の開発周辺事情と職質テックトーク"
author = "kamawada"
archive = ["2013"]
draft = false
+++


<p>ここ最近の僕の開発で指標になっているのは「システムとしてのクオリティを上げるか」であり、それって当然のごとく行われているかもしれなくて、いわゆる Quality Assurance = QA なんて言葉があったり、某社では Test Engineer の方がいたりするわけです。ただ、あまりにも僕としては「ずさんな」ところが多々あると考えています。「よしAを変更した → デプロイ → Bがエラー出てる」なんてことがないように「機能が望むように動作しているか」をテストコードで担保しようと努めている次第です。例えば、先日サービス内で使用している Flickr API の一部メソッドが正常に機能しない（ どんなに一般的な語彙で探しても検索結果が空で返ってくる ）なんてことがありましたが、テストコードのおかげで問題の切り分け、つまり、これは本当に Web API が壊れているのだ！ということがテストスクリプトを走らせるだけで分かって「あ〜 テスト書いててよかったですね」と改めて思いました（ Flickr API はその後、開発者同士のメーリングリストに投げかけたところ、同じ症状で悩んでいる人、さらには中の人も現れ、直してくれました ）。</p>

<p>前置きが長くなりましたが、こうしたテストも含め開発周辺の便利なリソースやツールで最近使っているものを紹介してみます。ちなみに使用言語はPerl、Web Application Framework に <a href="http://mojolicio.us/">Mojolicious</a> を使った、公称月間1億PV以上のWebサービス / モバイルアプリのバックエンド例で、僕一人が開発を担当しています。</p>

<h3>GitHub Private Repository</h3>

<p>Git レポジトリに GitHub の Private Repository を利用。そもそも開発、運用にまつわるリソースはなるべく出来るものに関してはアウトソースする方針にしています。アウトソースと言っても人を使うのではなく便利なサービスに委譲する形です。そのためにどのサービスを使うかは慎重に身構えつつ、時にはノリで選ぶ感じです。GitHub は無料で使う分には Public Repository しか持てないので、月額$12の Small プランの契約をして10個の Private Repository が持てる状態になっています。Git の Repository と クールな UI を構築したりマネージするコストを考えるとアリじゃないか！と考えています。</p>

<h3>Carton v0.9.15</h3>

<p>Perl における Ruby の Bundler に相当するのが Carton です。「v1.0.0 が出るまで API の変更の可能性がある！」... けれど、現行 CPAN に上がっている v0.9.15 を使っています。モジュールのバージョンまで面倒を見て依存性を解決して環境をつくることが可能です。例えば分かりやすい例を挙げると Mojolicious が最近メジャーバージョンアップして 3.xx 系から 4.xx 系にアップグレードしたのですが、どーしても 3.xx 系を使いたいよねぇ〜 なんて時は cpanfile でバージョン指定しちゃうことが出来ます。</p>

<pre> requires 'Mojolicious', '== 3.97';
 </pre>

<p>この cpanfile を用意して</p>

<pre> $ carton install
 </pre>

<p>するといい具合に 3.97 がプロジェクトのディレクトリ内に入ります。</p>

<p><img alt="スクリーンショット 2013-07-09 20.31.45.png" src="http://yusukebe.com/archives/2013/07/09/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202013-07-09%2020.31.45.png" width="400"></p>

<p>この Carton で入れたモジュールとコアモジュールだけを使ってアプリを起動するには</p>

<pre> $ carton exec -- mojo generate app MyApp
 </pre>

<p>とかやります。現在、本番のアプリケーションも全てこの「carton exec」経由で立ち上げています。Perlbrewやplenvなどをで同じバージョンのPerlをインストールすれば「同じ環境である」という再現性が非常に高くなるので、下手に依存問題などで悩まなくて済んでよいです。</p>

<h3>Harriet</h3>

<p>テストの際に重宝しています。作者 tokuhiriomの記事を見ればどんなものか分かるかと思います。</p>

<ul>
<li><a href="http://blog.64p.org/entry/2013/05/16/201916">Harriet ー テストのときつかうにデーモンの取扱を簡単にするためのフレームワーク - tokuhirom's blog.</a></li>
</ul>


<p>テストを走らせるコマンド prove の Plugin になるのが便利で、.proverc に以下を追加しています。</p>

<pre> -PHarriet=t/harriet/
 </pre>

<p>今回対象となるアプリは、実際に立ち上げる時に dsn 情報や memcached のアドレスなどをPerlスクリプトの設定ファイルから読み出すのですが、テストの際には Harriet で有効になった環境変数の情報を元に設定を動的につくっています。これでアプリを通常使うのと同じようにテストでも API 呼び出しが出来ますね。</p>

<h3>Test::Mojo</h3>

<p>Mojolicious に付属の Test モジュール。コントローラをテストするのに使います。こんな感じの使い勝手です。</p>

<pre> my $t = Mojo::Test-&gt;new('MyApp::Web');
$t-&gt;get_ok('/')-&gt;status_is(200);
$t-&gt;post_ok('/new',
    form =&gt; { title =&gt; 'title', body =&gt; 'body' } )-&gt;status_is(200);
 </pre>

<p>Mojolicious クラスを継承しているモジュールを指定して何も考えずにそのままテスト書けます。</p>

<h3>Travis CI</h3>

<p>GitHub と連動して CI を行う Travis CI を Private Repository に対応させるってことで課金して、最近使いはじめました。高めの印象ある $129/月 でしたが使ってみて価値ありだったので！</p>

<p><img alt="スクリーンショット 2013-07-09 20.53.16.png" src="http://yusukebe.com/archives/2013/07/09/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202013-07-09%2020.53.16.png" width="400"></p>

<p>レポジトリトップの .travis.yml の設定の元、git push したら自動的に環境を Travis CI 側で構築してテストを走らせてくれます。テストがコケた、通るようになった、などの適切なタイミングでメールなりなんなりの通知が来ます。</p>

<hr>

<p><br></p>

<h3>職質テックトーク</h3>

<p>本来は New Relic とか Cinnamon について触れたいところですが、力つきたのでこの辺で。</p>

<p>そういえば、<a href="http://d.hatena.ne.jp/moznion/">moznion</a> が職質テックトークというのをやるらしく、そして、僕が、第1回のゲストに呼ばれているらしいので11日（木）19時30分から1時間程度、生放送にお付き合いください〜</p>

<ul>
<li><a href="http://www.ustream.tv/channel/shock-sheets-tech">USTREAM: 職質テックトーク</a></li>
</ul>


<p>来るYAPC::Asia 2013 の件とか YAPC::NA 行って来た的な 内容になるかもよ。よろしく〜</p>

