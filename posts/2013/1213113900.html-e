+++
Categories = ["tech"]
Description = " 久しぶりにWebのフロントエンドの実装をするため最近流行りの AngularJS に入門してみる。オフィシャルのチュートリアルをざっと見ても感覚がつかめないので、具体的で簡易なアプリをつくった方が勉強になるだろうと思い… 結果的に FMT"
Tags = []
date = "2013-12-13T11:39:00+09:00"
title = "AngularJSの勉強してたら「作業用BGMサービス」が出来た"
author = "kamawada"
archive = ["2013"]
draft = false
+++


<p>久しぶりにWebのフロントエンドの実装をするため最近流行りの <strong>AngularJS</strong> に入門してみる。オフィシャルのチュートリアルをざっと見ても感覚がつかめないので、具体的で簡易なアプリをつくった方が勉強になるだろうと思い… 結果的に <strong><a href="http://yusukebe.github.io/FMTube/">FMTube</a></strong> っていう「チョー簡単に使えるYouTubeミュージックプレイヤー」が完成したのであった。後述するが似たようなモノをいくつかリリースしているのですが初見の人にとっては <strong>作業用BGM</strong> とかにかなり捗るサイトなので使ってみてください！特に <a href="http://yusukebe.github.io/FMTube/#?q=Mr.Children">Mr.Children で検索した結果</a> がいい意味でヤバいｗ</p>




<p><img src="http://38.media.tumblr.com/cb00fd22ef970f4067e879c0bc951b15/tumblr_inline_mxqsbjvvcq1qb2ehr.png" alt="FMTube"></p>




<p>以下AngularJSを使ってFMTubeをつくるまでの課程と感想をざっくりと箇条書きで！</p>




<hr>
<p><br></p>




<ul>
<li>AngularJSオフィシャルのチュートリアルは目を通すだけでいいかなと思った</li>
<li>でも何かつくりたい。 <strong>あんぎゅらーじぇいえす</strong> をつかって！</li>
<li>新しいWebアプリのアイデアを考えるのもいいけど仕様まで落としこむのに大変</li>
<li>Webアプリのリソースとして外部のWeb APIを使うのは楽</li>
<li>TwitterのSearch APIは1.1から認証必須になったしなー</li>
<li>そういえば…  （今のところ）YouTube Data APIなら認証もAPI KEYもいらないな…</li>
<li>YouTubeといえば <a href="http://kimi.la/">君のラジオ</a> とかでも使った実績があるなー</li>
<li>まてよ、君のラジオの初期バージョンって結構簡単なロジックだったよな</li>
<li>よしそれをつくってみよう！仕様も決まっているし！</li>
<li>ってことでCSS FrameworkとしてTwitter Bootstrap</li>
<li>JSはAngularJSと一部jQueryをAngularJS経由で叩くことにする</li>
<li>フォームにアーティスト名を入れてsubmitする、のと</li>
<li>リストから好きな曲を選ぶ、これだけがユースケース</li>
<li>submitの際、Last.fmのAPIから取得したアーティストの <code>toptracks</code> を表示そして再生する感じ</li>
<li>再生はYouTube Player APIのiFrame版で制御する</li>
<li>今回は最初ってことでHTML全体をAngularJSの一つのControllerで制御することにした</li>
<li>まぁ諸々参考に実装。分からないところをググるとかなりStackOveflowが引っかかるね</li>
<li>便利というかカッコよく書けたのはLast.fm APIへリクエストを送ってそれを描画する点</li>
<li>
<code>Tracks</code> という名前で <code>factory</code> メソッドで登録して関数を返す</li>
<li>
<code>Tracks.get</code> メソッドはアーティスト名であるはずの <code>query</code> とコールバック関数 <code>callback</code> を受け取る</li>
<li>特に <code>$resource</code> を使う必要はないので <code>$http</code> を使った</li>
</ul>


<p>以下がコード</p>




<pre> app.factory('Tracks', function($http) {
  return {
    get : function(query, callback) {
      $http.jsonp('http://ws.audioscrobbler.com/2.0/', {
        params : {
          api_key : ‘your_api_key’,
          method : 'artist.getTopTracks',
          limit : 20,
          format : 'json',
          callback : 'JSON_CALLBACK',
          artist : query
        }
      }).success(function(data){
       if(data.toptracks) {
          callback(data.toptracks.track);
        }
        return [];
     });
      return [];
    }
  };
});
 </pre>




<p>するとController側からはこんな感じで呼び出しをしてHTMLに書いたテンプレート通り即座に描画される</p>




<pre> Tracks.get('Mr.Children', function(tracks){
  $scope.tracks = tracks;
});
 </pre>




<ul>
<li>つまりLastFMから <code>toptracks</code> を取得するコードをControllerから隠蔽しつつ描画もよしなにしてくれる</li>
<li>これはいい感じがする！（設計的に… でもそれってAngularJSに習った結果</li>
<li>まだModel？をどのように書いてControllerをどういう粒度で分けた方がいいのか探っている</li>
<li>がだいたい分かった</li>
</ul>


<p>でだ、何を知り得たかというとAngularJSっていうのはフレームワークとして</p>




<blockquote>
  <p>今どきのWebアプリのフロントを記述するための <strong>ルールを押し付けそのためのヘルパーを提供している</strong></p>
</blockquote>




<p>って思いました。ハイ。まぁコードはAngularJS勉強して2日目なので参考にならないと思うけど、FMTubeはよいので使ってみてね！もしくはAngularJSではこのくらいのアプリをつくって勉強するのがいいと感じたので、その辺りもよければ参考にしてください！</p>




<ul>
<li><a href="http://yusukebe.github.io/FMTube/">FMTube</a></li>
</ul>


