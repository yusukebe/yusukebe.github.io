+++
Categories = ["tech"]
Description = " Oppai-Detectとは？  画像のおっぱい部分を自動認識させる挑戦である。  目的  筆者はおっぱいが好きだ。そこでおっぱい画像をたくさん集めたい。例えばその際に収集の精度を高めたいと思う。そこで、おっぱい部分を自動で検出したらそれ"
Tags = []
date = "2010-11-27T10:30:00+09:00"
title = "Oppai-Detect3"
author = "kamawada"
archive = ["2010"]
draft = false
+++


<h3>Oppai-Detectとは？</h3>
<p>
画像のおっぱい部分を自動認識させる挑戦である。
</p>

<h3>目的</h3>
<p>
筆者はおっぱいが好きだ。そこでおっぱい画像をたくさん集めたい。
例えばその際に収集の精度を高めたいと思う。
そこで、おっぱい部分を自動で検出したらそれが可能になると考える。
</p>

<h3>応用例</h3>
<p>
Oppai-Detectの社会的に貢献できる応用例は以下である。
</p>
<ul>
<li>放送禁止画像の検出（画像投稿サイトなど）</li>
<li>スパム画像対策</li>
<li>青少年向け、サイトフィルタリング</li>
</ul>
<p>
また、これを逆手に取ればおっぱい画像が勝手にたくさん集まるという筆者の企みもある。
</p>

<h3>手法</h3>
<p>
Intelが開発・公開したオープンソースの画像処理ライブラリ「OpenCV」を使用した。
これはパターン認識としての物体検出（Object-Detect）の機能を備えている。
画像認識において、学習（Training）と検出（Detection）がOppai-Detectにおいて重要な概念である。
</p>

<h3>OpenCVによる顔認識の例</h3>
<p>
OpenCVライブラリ付属の「haarcascade_frontalface_alt2.xml」という顔部分検出用のデータを利用すれば、
簡単に画像からの顔検出が可能だ。
以下がPerlでの実装例である。
</p>

<pre class="brush: perl"> use Image::ObjectDetect;
use Imager;

my $file = $ARGV[0] or die 'Filename is needed!';
my $img = Imager-&gt;new;
$img-&gt;read( file =&gt; $file ) or die $img-&gt;errstr;
my $cascade  = './haarcascade_frontalface_alt2.xml';
my $detector = Image::ObjectDetect-&gt;new($cascade);
my @faces    = $detector-&gt;detect($file);
for my $face (@faces) {
    $img = $img-&gt;box(
        xmin   =&gt; $face-&gt;{x},
        xmax   =&gt; $face-&gt;{x} + $face-&gt;{width},
        ymin   =&gt; $face-&gt;{y},
        ymax   =&gt; $face-&gt;{y} + $face-&gt;{height},
        color  =&gt; 'red',
        filled =&gt; 0,
    ) or die $img-&gt;errstr;
}
$img-&gt;write( file =&gt; 'out.jpg' ) or die $img-&gt;errstr;
 </pre>

<p>
上記のコードを実行した例が以下の写真である。
顔の部分が自動検出され赤い枠で囲まれているのがわかる。
</p>
<p>
<img alt="oppai-detect" class="at-xid-6a0133f4781589970b015391e395d4970b" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015391e395d4970b-pi.jpg>
</p>

<h3>今回のチャレンジ</h3>
<p>
以下の3つの行程を行い、おっぱい画像検出用のデータを学習させることをチャレンジとした。
</p>
<ol>
<li>画像を集める</li>
<li>学習ツールを作成</li>
<li>ひたすらおっぱいを囲む</li>
</ol>

<h3>学習に必要な画像</h3>
<p>
学習では「Positive Image」及び「Negative Image」という二つの画像が必要になる。
Positive Imageとは対象物、つまりこのケースではおっぱいが写っている画像のことで、
精度の高い学習には7000から8000枚の画像が必要になる。
また、Negative Imageとは対象物が写ってない画像である。
</p>

<h3>1.画像を集める</h3>
<p>
学習のためにおっぱい画像が必要になる。
これは「いかにして大量のおっぱい画像を集めるか」という命題である。
今回は、画像検索サイトのWeb APIを利用して画像のURLを取得した。
ただ、これには問題がある、例えばYahoo! 画像検索 APIでは一つの検索クエリーにつき、
最大の検索結果取得件数が1,000件となり、数としては不十分である。
最低でも1万件以上は集めたい。
そこで、AV女優のリストを駆使して解決することにした。つまり
AV女優の名前と「おっぱい」という文字列を連結したものを検索クエリーとしたものを
大量に用意し、複数回Web APIを叩くわけである。
</p>
<ul>
<li>検索クエリー「AV女優A おっぱい」で検索</li>
<li>検索クエリー「AV女優B おっぱい」で検索</li>
<li>検索クエリー「AV女優C おっぱい」で検索</li>
<li>...</li>
</ul>
<p>
という具合だ。
</p>
<p>
AV女優のリストには拙作のPerlモジュール「Acme::Porn::JP」を利用した。
以下のコードがAcme::Porn::JPの今回のケースでのSYNOPSISである。
</p>
<pre class="brush: perl"> use Acme::Porn::JP;

...;

my $porn = Acme::Porn::JP-&gt;new;
my $actress_list = $porn-&gt;actress();
for my $actress ( @$actress_list ){
    search("おっぱい $actress");
}

...;

 </pre>
<p>
このAcme::Porn::JPの現行バージョンでは4502人のAV女優名が掲載されている。
Acme::Porn::JPは以下のgithubサイトから入手できる。
</p>
<p>
<a href="http://github.com/yusukebe/Acme-Porn-JP">
http://github.com/yusukebe/Acme-Porn-JP
</a>
</p>
<p>
その結果29,065枚の画像を入手することができた。
</p>
<p>
<img alt="oppai-detect" class="at-xid-6a0133f4781589970b015391e395e5970b" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015391e395e5970b-pi.jpg>
</p>

<h3>Haartrainingツールによる学習</h3>
<p>
OpenCVに付属のHaartrainingというツールを使って画像学習ができる。
手順例は以下の通り。「2」及び「3」はコマンドラインソフトで実現できるので、
「1」を今回は行えばよいことになる。
</p>
<ol>
<li>positive.dat/negative.dat の作成</li>
<li>コマンドラインの実行「$ opencv_createsamples -info positive.dat -vec a.vec」</li>
<li>コマンドラインの実行「$ opencv_haartraining -data haarcascade -vec a.vec -bg negative.dat -nstages 20」</li>
</ol>
<p>
ちなみに、positive.datとはPositive Imageの集合を表し、
画像ファイルへのパス、対象物の数、対象物の座標情報を記載するプレーンテキストファイルである。
negative.datはNegative Imageの画像ファイルへのパスのリストである。
</p>
<pre class="brush: perl"> positive.dat
[filename] [# of objects] [[x y width height] [... 2nd object] ...]
images/01.jpg 1 140 100 45 45

 </pre>

<pre class="brush: perl"> negative.dat
images/neg-01.jpg
images/neg-02.jpg

 </pre>

<h3>2.学習ツール作成</h3>
<p>
今回はpositive.dat及びnegative.datを生成する学習のためのツールを作成した。
ユーザーは収集した画像を閲覧し、
その中に対象物、つまりこの場合ではおっぱいがあれば囲む作業を行う。
プログラムは囲まれた部分の座標情報とファイル名をpositive.datに書き込む。
画像に対象物が無ければ、ユーザーはスキップをすることができ、
こうした際にはnegative.datにファイル名が書き込まれることになる。
</p>
<p>
画像の閲覧・囲い作業はWebブラウザでできるように考慮した。
HTTPプロトコルのWebアプリケーション、またJavascriptによるフロントエンドが実装されている。
これを「Haartraining-App」と名付け、githubで入手可能になっている。
</p>
<p>
<a href="http://github.com/yusukebe/Haartraining-App">http://github.com/yusukebe/Haartraining-App</a>
</p>
<p>
Haartraining-Appの一般的なディレクトリ構成は以下の通りである。
</p>
<pre class="brush: perl"> yusuke@macmini:~/work/oppai-detect/temp/Haartraining-App$ tree ./
./
|-- data
|   |-- images
|   |   `-- 000001.jpg
|   |-- negative.dat
|   `-- positive.dat
|-- haartraining.psgi
`-- html
    |-- haartraining.js
    `-- index.html

3 directories, 6 files

 </pre>
<p>
Plackモジュールのplackupコマンドを使えば起動しているホストの5000番ポートなどで、
アプリケーションが起動する。
</p>
<pre class="brush: perl"> $ plackup haartraining.psgi 
 </pre>

<h3>3.ひたすらおっぱいを囲む</h3>
<p>
あとはひたすらおっぱいを囲む作業を行う。
下の画像はイメージである。
</p>
<p>
<img alt="oppai-detect" class="at-xid-6a0133f4781589970b015391e395f8970b" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015391e395f8970b-pi.jpg>
</p>

<h3>opencv_haartrainingによる学習</h3>
<p>
positive.dat、negative.datの準備ができたら、
OpenCVコマンドラインプログラムで学習を行う。
今回のケースではPositive Imageが1000枚程度、対象物の数約2000個つまり「2000乳」を学習させた。
Mac mini / OSX 10.5 （2.26 GHz Intel COre 2 Duo）の環境で、
3日間を要した。
</p>

<h3>実験</h3>
<p>
学習結果としての検出ファイルを利用し、画像からのおっぱい部分の検出を実験してみた。
実験プログラムの一つに検出した部分を「18禁マーク」で覆うという物があるが、
それを使用して出力された画像の一つが以下である。
</p>
<p>
<img alt="oppai-detect" class="at-xid-6a0133f4781589970b015391e3960d970b" src="https://yusukebe.com/archives/.a/6a0133f4781589970b015391e3960d970b-pi.jpg>
</p>
<p>
上のように正面を向いたおっぱいで、画像の大きさが的確ならば比較的認識されやすいことがわかった。
また、誤認識も見受けられ、「へそ」や腕の一部など「膨らんでいる部位」がおっぱいとして認識されてしまった。
</p>

<h3>考察</h3>
<p>
おっぱい画像の学習行程において、
おっぱいにも正面乳、横乳、下乳、上乳、微乳、巨乳などたくさんあることを非常に考えさせられた。
付け加え、どこまでがおっぱいであるかという倫理的、哲学的な問題にも直面した。
また、おっぱいを囲む作業は非常に楽しいことであるが、時間がかかるので、
学習コストがかかるという印象である。
</p>

<h3>今後</h3>
<p>
考察にある問題点を解決するために、
まず、多様なおっぱいに対するポリシーを策定する必要がある。
次に、今回実装した学習ツールブラッシュアップしクラウド環境で運用したいと感じている。
その結果Oppai-Detect学習のソーシャル化が実現され「みんなで作るOppai-Detect」が実現する。
今後もおっぱいを楽しめるOppai-Detectを目指す。
</p>

<h3>参考資料</h3>

<div id="__ss_5924269" style="width:425px">
<strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/yusukebe/oppaidetect-3" title="Oppai-Detect 3">Oppai-Detect 3</a></strong><object height="355" id="__sse5924269" width="425"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=101125gxeb01-101126113904-phpapp01&amp;rel=0&amp;stripped_title=oppaidetect-3&amp;userName=yusukebe">
<param name="allowFullScreen" value="true">
<param name="allowScriptAccess" value="always">
<embed allowfullscreen="true" allowscriptaccess="always" height="355" name="__sse5924269" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=101125gxeb01-101126113904-phpapp01&amp;rel=0&amp;stripped_title=oppaidetect-3&amp;userName=yusukebe" type="application/x-shockwave-flash" width="425"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/yusukebe">yusukebe</a>.</div>
</div>

