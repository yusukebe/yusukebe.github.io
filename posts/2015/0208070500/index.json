{
    "data" :  {
    "title": "弟へ伝える、技術",
    "date": "2015-02-08 07:05:00 +0900 JST",
    "dir": "posts/2015/",
    "slug": "0208070500",
    "categories": ["tech"],
    "tags": []
}

---



<p>うちの会社に <b>弟がジョイン</b> した。「うちの会社」というのは父親と二人でやっていた「株式会社ワディット」のことだ。なんでこんなことが起こり、まさに「家内制手IT企業」となったのか？については<a href="http://wada.fm/ep005/">どこかの場所</a>で表現するとして、今回は彼に伝えたいことがテーマである。</p>


<p>以下の写真はとある会合で結構過激な同人誌を朗読する弟の後ろ姿。</p>


<p><figure><img src="http://33.media.tumblr.com/e349be970d33a40965a2799d61fa6782/tumblr_inline_njfxvts8Nk1qb2ehr.jpg"></figure></p>
<p><br></p>
<p>弟は某大手メーカーの「文系的な仕事」をやってきたのであるが、今回弊社内では、僕がメインでやっているWebアプリケーションの開発も「手伝いたい！」もしくは「自分がメインの開発をしたい！」とのこと。実際、既にとあるアイデアを僕らの中で温めていて、その実装も弟が担うかもしれない。とはいえ、彼には、Webをつくる知識や能力はおろか、Webを含んだインターネットの仕組みを知らないようだ。せいぜい大学の授業で簡単なHTMLを書いて、時間の経過と共に忘れてしまっている、という感じ。これは無謀なことかもしれないが、彼には幸いにして「研修期間」のような時間を設けていているので「ゼロベース」から <b>Webアプリケーション</b> のつくり方を身につけたら素晴らしい。</p>
<blockquote><p>そんなのは、学ぶもんじゃねー！自ら知識を得て、手を動かすんだ！</p></blockquote>
<p>なんて言う意見もあるかもしれないし、自分も先生のような役割の人から学んだ覚えはない。しかし、時間は有限だし、弟は決して若くはない。ザックリとした道しるべを示して上げて「 <b>高速道路</b> 」に乗ってみよう。</p>
<p>本エントリーでは、弟をターゲットとして、Webアプリをつくるために必要ないくつかの項目をピックアップしてちょっとした解説をする。あえて公のBlog上でそれを行なう。さて、注意点としては以下がある。</p>
<ul>
<li>Google検索を積極的にして分からないことを減らす</li>
<li>ただし出てきた技術記事が<b>100％正しいわけではない</b>ことを肝に銘じる</li>
<li>レビューなどを参考に優良な書籍を探す</li>
<li>とりあえず<b>手を動かすこと</b>を尊重しよう</li>
</ul>
<p>それではいってみよう。</p>
<hr>
<h2>1. Webの仕組み</h2>
<p>ブラウザからWebサイトを見る時に何が起こっているのか？一連の裏側を知っておこう。HTTPのプロトコルという意味のWebに限って言えば、<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774142042/kamawada-22/ref=nosim/">Webを支える技術</a>って本でまず学ぶのが良いと思う。ただし、それだけではない…</p>
<p>先日、弟がTumblrで独自ドメインを使ったBlogを開設したいと言って、諸々作業していた。ただ、彼には「お名前.comでドメインを取る」ってことは分かっても、それがレジストラの機能のみを利用しただけで、オプション設定でDNSサーバの機能を使えるようにしないとTumblrへのドメインマッピングが出来ない件が分かってなかった。</p>
<p>また、DNSの特定のドメイン状況を調べるためには <i>dig</i> コマンドを使ったりするけれども、当然、弟はそんなことを知らない。やりたいこと次第で「メール周り」も関係してくるんだけど「Webの仕組み」といえども知っておいた方が良いインフラの知識やそれらをいじるスキルは多岐に渡る。</p>
<figure><img src="http://33.media.tumblr.com/bdd2ba8b1f4f535bd3e22284b9f7f8e0/tumblr_inline_njfy9uuGT81qb2ehr.jpg"></figure><p><br></p>
<p>僕の場合は、大学生の時に、研究室から余り物をもらってきてつくった自宅サーバを使い色々と実験をしていたから「最低限に限り」自然と「分かってきた感」はあったんだけど、今はそれがクラウドとかVPSなどの各種サービスの浸透でブラックボックス化されつつあるからなー。</p>
<p>Tumblrもいいけど、ありゃもうサービスになっているから、一台専用のVPSを立てるから、そこでApacheなりNginxなりのソフトウェアサーバを立ち上げることから始めて、ホームページでもつくればいいのかもしれないね。</p>
<h2>2. Unix/Linuxを使いこなす</h2>
<p>上記の通り、自分でLinuxサーバを立ち上げた場合、最低限のUnix/Linuxコマンドを知らないとなんも出来ないし、Viを使えた方がいい。エディタの話をするとVimもしくはEmacs、昨今のSublime TextやAtomなどを利用する必要もある。幸いにして、OSXはBSDが裏側で走っているので、おおよそのコマンドが共通している。弟にはMacBook Proを支給しているので付属のTerminalやiTerm2などを立ち上げれば、そこはもうCLI=Command Line Interfaceの世界だ。ローカルでもリモートサーバでもこれらの知識や使いこなしは要求されるので、強制ギプスかのごとく、OSXのターミナルで諸々の作業をしてみるといいかもしれない。</p>
<h2>3. プログラミング概要</h2>
<p>ここまで来ると、いよいよWebアプリ制作には欠かせない、プログラミングを身につける。当初はLightweight Language=LLと呼ばれる</p>
<ul>
<li>Perl</li>
<li>Ruby</li>
<li>Python</li>
<li>PHP</li>
<li>JavaScript</li>
</ul>
<p>などから言語を選んだ方が試しやすいし、先人たちの知恵が豊富なので良いだろう。プログラミングってのは抽象的に考えると、コンピュータに指示を出すための「言葉」だ。だから論理的思考さえ持っていれば、実はプログラムを書く行為は、弟がそうであるように「文系的」なプロセスに似ているかも。その際に、登場するのはたったの2つ「データ」と「操作」という概念。オブジェクト指向という言葉に踊らされることなく、この2つの概念を実際に手を動かすことで把握し「ピンっと」くれば、ある程度達成したことになるだろう。なお当初はターミナルから実行して、同じターミナル上で結果が出るCLIのプログラムを書くことをオススメする。</p>
<p>基礎が分かれば、特定の目的を持ったアプリをCLIでつくってみよう。各種LLにはそれぞれライブラリが存在する。例えばPerlにおけるCPANは著名なライブラリ群だ。アプリをつくる際にはライブラリの「ユーザー」としてライブラリを使うのが良い。つまり、ライブラリを作成する側がオーサー、使う側がユーザーなんだけども、ユーザーとして様々なライブラリを使っていくと、当然ながらアプリの実装は早くなるし、しばしば見かけるオーサーのことを覚えるかもしれない。「あのライブラリをつくった人だ！」という尊敬の念が生まれると、その人がロールモデルになる可能性もあり、それが更に能力取得のスピードアップにつながる。</p>
<h2>4. Webアプリ入門</h2>
<p>世の中には各言語ごとに便利な「Webフレームワーク」が存在するので、RubyだったらSinatraなど、なるべく「薄い」ものをチョイスして簡単なWebアプリをつくってみよう。上記で紹介した「Webを支える技術」で紹介されている知識が活かされ、自分がつくったプログラムがURIやHTTPという約束事もしくはプロトコルに則っていることを体感出来るだろう。</p>
<p>ちなみに、僕個人の趣味を、あえてこの場で披露するならば、一般的なWebアプリの場合、Perlを主な言語として使い、Mojoliciousというフレームワークで構成することが多い。</p>
<figure><img src="http://31.media.tumblr.com/87243c8c76bb6a7f7ec49053ce3b8e67/tumblr_inline_njfz20Ljnr1qb2ehr.jpg"></figure><p><br></p>
<p>エディタはEmacsを使っている。どうやらEmacsはオッサンが使うものという風評があるらしいが、弟もおっさんに近い年なのでEmacsも悪くないとは思う。</p>
<h2>5. RDBMS/SQLを扱う</h2>
<p>Webアプリケーションの情報の保持にはデータベースが必要だ。特にMySQLは昔から存在しているという意味では枯れていて、世の中のノウハウも蓄積されているので、オススメ。リレーショナルデータベースの一種だからMySQLを操作するには「SQL」というクエリーを発行しなくてはいけない。例えばボケての「ユーザーIDが2の人」によるボケを先頭から10件取ってくる場合はこうだ。</p>
<blockquote><p>SELECT * FROM boke WHERE user_id=2 LIMIT 10;<br></p></blockquote>
<p>これはデータの取得＝READだが、それ以外にも当然ながら、追加や更新、削除などがサポートされている。ま、エクセルの表のようなテーブルをいくつかつくって、SQLっていうので操作すればいいわけだ。また、最終的には、Webアプリケーションから呼び出すため、接続ツールやクエリービルダー、O/R Mapperなどのライブラリを使ってプログラムを書いたりする。</p>
<h2>6. フロントエンド</h2>
<p>4つ目の「Webアプリ入門」でピックアップしたプログラムがWebサーバの置かれているマシン内のアプリケーションだとすると、閲覧者のブラウザ側で実行されるものを「フロントエンド」と呼ぶ。</p>
<p>主に</p>
<ul>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
</ul>
<p>から構成されている。HTMLはページの構造を定義しつつコンテンツが埋め込まれ、CSSがその見た目をコントロールする。JavaScriptはHTMLを動的に変化させることが出来るために、見た目以外も含んだ「動き」を与える作用がある。実はこの3つだけでもある程度Webアプリっぽいものはつくれるので、先行で勉強してもいい項目かもしれないね。</p>
<h2>7. 運用</h2>
<p>だいたいアプリケーションが完成してくる。ただ、Webのサービスは実装が終わった段階から、デプロイした後に、運用というフェーズが待っている。そもそもアプリをサーバ内でどのように動かすのか？という問題もあるし、パフォーマンスもある程度出したい。また、</p>
<ul>
<li>リソース監視</li>
<li>死活監視</li>
</ul>
<p>と言ったWebが正常に動いているか？をモニタリングする必要が出てくる。もし、運用を続けることが出来れば、障害時に問題を解決する能力も鍛えられるだろう。</p>
<h2>X. その他</h2>
<p>Webサービスの企画が出来て、それをどのように構成し実装していくか？には設計をしないと手を動かすことは出来ない。僕の場合は</p>
<ul>
<li>外部設計はユースケース図もしくはその記述</li>
<li>内部設計はモデルを分析して図を書く</li>
</ul>
<p>という作業をやってから、DBスキーマ定義やURLのパスのキメなどに入る。これら設計法はあまり知見が共有されていないので気になるところだが、言えることは「あまり最高の設計を求め過ぎない」ことかもしれない。設計止まりになったら格好が悪い。</p>
<figure><img src="http://31.media.tumblr.com/8fe0ca5682e670abd403a04cd712af34/tumblr_inline_njfyaje38i1qb2ehr.jpg"></figure><p><br></p>
<p>また、話変わってクラウドの活用。といっても個人的に役に立っているというAmazon Web Services=AWSなんかを使う際にはそれなりの知識が必要になってくるね。</p>
<hr>
<blockquote><p>わーー、<b>やることがたくさんだ</b>！</p></blockquote>
<p>確かにやることたくさんだし、上記には抜けてる事柄もあるんだけども、一歩ずつ <strong>楽しんで</strong> やれば、わりかし早めに身につくと思う。さらに、自分がつくったWebアプリが実際に使われることは非常に嬉しいことなんで、ある種の「成功体験」を一度してみるといいでしょうね！</p>
<hr>
<h2>宣伝</h2>
<p>独り語り「Podcast」やってます。よろしければ講読をどうぞ〜</p>
<ul><li>
<b><a href="http://wada.fm/">wada.fm</a></b><br>
</li></ul>


 
}
