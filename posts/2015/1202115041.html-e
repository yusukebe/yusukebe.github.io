+++
Categories = ["tech"]
Description = " 概要  とあるサービスでは、Amazon Web Servicesをベースにインフラを組んでいる。データベースにおいてはRDSのMySQLのストレージエンジンを利用していたが、Amazon Auroraへと移行をした。それはAuroraが"
Tags = ["AWS"]
date = "2015-12-02T11:50:00+09:00"
title = "Amazon Auroraを東京リージョン提供翌日から使い始めて"
author = "kamawada"
archive = ["2015"]
draft = false
+++


<h2>概要</h2>

<p><a href="http://bokete.jp/">とあるサービス</a>では、Amazon Web Servicesをベースにインフラを組んでいる。データベースにおいては<strong>RDS</strong>のMySQLのストレージエンジンを利用していたが、<strong>Amazon Aurora</strong>へと移行をした。それは<strong>AuroraがTokyoリージョンでの提供を開始した翌日のこと</strong>で、中々勇気がいることであったが、結果「<strong>無難</strong>」に動いてそこそこ満足という評価。元々MySQLの時分ではインスタンス自体がオーバースペック気味だったので、今回のAurora導入でインスタンスサイズと構成を見直し、全体のパフォーマンスがWeb APIサーバーの平均レスポンスタイムを見ると<strong>10ミリ秒以上遅く</strong>なってしまったが、ユーザー体験とアプリケーションの性質上コストの兼ね合いで割り切ることとした。という事情があり、MySQLとAuroraの比較が環境やコストの差で非常にしにくいが、いくつかの点で移行してよかったと感じる。詳細を以下に書きます。</p>

<h2>パフォーマンス</h2>

<p>Amazon Auroraの公式ページでは「MySQLの5倍の性能」とあるが、これは「<strong>とある条件下</strong>」での最大計測値だと見た方が妥当という点で注意したい。まぁ、実際状況によってはそれほどパフォーマンスが出る場合もあるとのことです。</p>

<hr>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/k/kamawada/20151202/20151202110548.png" alt="f:id:kamawada:20151202110548p:plain" title="f:id:kamawada:20151202110548p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<hr>

<p>RDSにおいて、Auroraではディスクサイズを予め明示してからインスタンスを用意しなくとも、<strong>自動的にスケールでしてくれて</strong>大変助かる。一方、MySQLストレージエンジンの場合は当然、ディスクサイズを「100GB」使うとか<strong>Capacity Palanning</strong>する。その代わり、であるが、MySQLストレージエンジンではディスクサイズを大きくすればするほどディスクへのI/Oアクセスである<strong>IOPSが上がる</strong>。今回の件ではこのIOPSを「かなり」あげていた。かつ、クエリーによってはディスクアクセスが発生するものが存在した（CPU性能も加担しているかもしれない）。なので、パフォーマンスが出ていた状態であった。一方Auroraの場合、IOPSのコントロールはしにくい。</p>

<p>対象となるサービスではOAuth2認証とJSONRPCを喋るいわゆる「Web API」なのだが、結果前述した通り、全エンドポイントの平均レスポンスタイムが<strong>10ミリ秒上がった</strong>。つまり遅くなったってことだが、同時に、<strong>インスタンスサイズを見直すいい機会になり</strong>、また、MySQLの時にIOPSを「かなり」あげて富豪的解決をしていたのに改めて気付かされた。よってパフォーマンスへの施策として、サボリ気味だった、いくつかのクエリーチューニングやインデックスの調整なども行った。結果、コスト削減の効果が実際出始めていて、特に利用者の多いモバイルアプリでのユーザービリティにも影響はほとんど出ていない。</p>

<h2>使い勝手</h2>

<p>Auroraではひとつのインスタンスが必ず2つの「Availability Zone」にまたがるということになっている。またMySQLでの「Master-Replica」という文言は使わずに「<strong>Writer-Reader</strong>」という言葉を使う。基本的にはMasterにあたる<strong>Writer</strong>とRead Replicaにあたる<strong>Reader</strong>を用意すれば冗長化は済んでしまう。また、レプリケーションの処理をストレージエンジン部分ではなく、確か、ディスクシステムレイヤーでやっちゃう、みたいな仕組みなんで、マスターとレプリカとのラグといった概念はほとんど存在しない。というか<strong>ラグは0</strong>と考えて良い。その都合も含め、この場合、Masterとして利用しているWriterがコケた場合に、ReaderがMasterへ昇格する際のフェイルオーバーが速いといった特徴がある。</p>

<hr>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/k/kamawada/20151202/20151202113041.png" alt="f:id:kamawada:20151202113041p:plain" title="f:id:kamawada:20151202113041p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<hr>

<p>とはいえ、何よりも増え続けるデータのCapacity Planningという難しいことをせずとも、自動的にスケールしてくれるのが嬉しいところである。</p>

<h2>導入</h2>

<p>東京リージョンでの提供開始日の翌日に早速導入したわけだが、比較的すんなりいった。当然サービスはメンテ状態にしないといけないんだけれども、基本的にはMySQLのRDSからスナップショットをとり、そこから新たにAuroraを立ち上げる形になる。大きなテーブルでは2億ほどレコードがあるDBになるが、メンテ諸々の作業合わせて<strong>3時間ジャスト</strong>くらいでイケた。Readerに関しては無停止でインスタンスを追加したり削除したり出来るので、一番負荷が高い「22時30分」頃のピーク時でのパフォーマンスをCloudWatch+Libratoで監視しつつサイズを合わせて行った。</p>

<p>同時にクエリーやインデックスのチューニングも後々行ったので「パフォーマンスが落ちた」とはいえ、最小限に留めるように努力出来る余地があった。</p>

<h2>MySQLとの互換性</h2>

<p>これはビックリするほど「MySQL 5.6」と互換性がある。例えば、懸念していた「Online DDL」も5.6相当のものだし「Percona Toolkit」の<code>pt-online-schema-change</code>コマンドも問題無く動いた。これで「ある程度無停止」でスキーマを変更することが出来るので安心。</p>

<h2>まとめ</h2>

<p>正直「すっげーAuroraいいよ！」とは言えないが、MySQLとの互換性が今後保たれていくことが保証されるという前提で「特に<strong>Auroraじゃない理由はない</strong>」という具合でデフォルトで使う感じになる気がする。ポイントは</p>

<ul>
<li>スケーラブル</li>
<li>MySQL互換（現状は5.6）</li>
<li>冗長性が高い</li>
</ul>


<p>となるだろう。現段階ではAuroraとして導入出来るインスタンスタイプが<code>db.r3.large</code>からとミニマムスタートには少々お高い感じになっているので、状況によっては敷居が高いが、Amazonの気合が感じられるプロダクトであるので今後スタンダードになるというジャッジで使うのはアリだと思います。</p>

<hr>

<p></p>
<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774176737/kamawada-22/"><img src="http://ecx.images-amazon.com/images/I/51Ay%2BX9EixL._SL160_.jpg" class="hatena-asin-detail-image" alt="Amazon Web Services実践入門 (WEB+DB PRESS plus)" title="Amazon Web Services実践入門 (WEB+DB PRESS plus)"></a><div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774176737/kamawada-22/">Amazon Web Services実践入門 (WEB+DB PRESS plus)</a></p>
<ul>
<li>
<span class="hatena-asin-detail-label">作者:</span> 舘岡守,今井智明,永淵恭子,間瀬哲也,三浦悟,柳瀬任章</li>
<li>
<span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li>
<li>
<span class="hatena-asin-detail-label">発売日:</span> 2015/11/10</li>
<li>
<span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
<li><a href="http://d.hatena.ne.jp/asin/4774176737/kamawada-22" target="_blank">この商品を含むブログを見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>

