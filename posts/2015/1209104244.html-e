+++
Categories = ["tech"]
Description = " この記事はPerl 5 Advent Calendar 2015の一貫として「先走って」書いております。  ただいま、絶賛「IVS CTO Night&amp;Day 2015 Fall」というイベントに来ていて100名ほどのスタートアッ"
Tags = []
date = "2015-12-09T10:42:00+09:00"
title = "Webサービスを支える「Perlモジュール」20選"
author = "kamawada"
archive = ["2015"]
draft = false
+++


<p>この記事は<a href="http://qiita.com/advent-calendar/2015/perl5">Perl 5 Advent Calendar 2015</a>の一貫として「先走って」書いております。</p>

<p>ただいま、絶賛「IVS CTO Night&amp;Day 2015 Fall」というイベントに来ていて100名ほどのスタートアップやベンチャーのCTOさん達に囲まれています。そのイベントの事前のアンケートには「社内での主力言語はなんですか？」みたいな質問がありました。さて結果発表を画像で貼り付けますと...</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/k/kamawada/20151207/20151207200903.jpg" alt="f:id:kamawada:20151207200903j:plain" title="f:id:kamawada:20151207200903j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ちょっと見えにくいかもしれませんが「Rubyが27 PHPが20」を占める中「<strong>Perlが1</strong>」という結果です。僕Perlって書いたので「Perl主力なところってうちだけ」ですねｗ</p>

<p>まぁといってもちょっとそれは過小評価な表現で、はてなさんがScalaとPerlをどちらも主力と考えていたり「アンケートに答えなかった」というガイアックスさんもPerl企業です。このイベントに参加していない企業さんでも、Perlを使っている実力のある社名がぱっと浮かびます。ただ！そもそもアンケートの選択肢にPerlがなかったので「その他自由欄」に記載しなくてはいけなかったり、写真にある通りスライド上に「<strong>Perl 1</strong>」とあるのはちょっと寂しいのです...</p>

<p>前置きが長くなってきましたが「Perlぜんぜんイケてるやん」って思うし、アンケートに回答した通りBoketeのバックエンド及びフロントのWebサイトはほぼ100％Perlで書かれています。Perlが担当するアプリケーションレイヤーはすごく安定稼働です。ってことでPerlでWebサービスをつくる際に必須なCPANモジュールの中から、主にBoketeで使っているものを20個ほどピックアップしてみます。元々Perlを使っている方にとっては当たり前なモジュールかもしれませんが他言語を使ってる方が「<strong>Perlもライブラリ揃ってるやん</strong>」って思ってくれるとこれ幸いです。</p>

<p>ではいってみましょー</p>

<h2>基本モジュール</h2>

<h3>1. Mouse</h3>

<p>Perlでも素でOOPは出来るのですが、具体的なアプリケーションレベルだとこの<strong>Mouse</strong>を使ってクラスをつくってます。継承、Roleの概念もあります。面白い機能の一つに<code>lazy_build</code>があります。これはアクセッサを定義する際に<code>lazy_build</code>を指定すると「初めて呼ばれた際に」デフォルトの値をセットしてくれるというものです。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink> use Mouse;
use LWP::UserAgent;

has ua =&gt; ( is =&gt; 'ro', isa =&gt; 'LWP::UserAgent', lazy_build =&gt; 1 );

sub _build_ua {
    return LWP::UserAgent-&gt;new();
}

sub get_content {
    my ($self, $args) = @_;
    my $url = $args-&gt;{url};
    my $res = $self-&gt;ua-&gt;get($url);
    return $res-&gt;content;
}
 </pre>


<p>Mouseの他にも元ネタだったり派生したものとしてMooseやMooもありますので、これらを使えばOOPは快適です。</p>

<ul>
<li><a href="https://metacpan.org/pod/Mouse">Mouse - Moose minus the antlers - metacpan.org</a></li>
</ul>


<h3>2. Data::Validator</h3>

<p>メソッドの引数の型を含む「チェック」に使っています。上記のコード例にある<code>get_content</code>をより厳密にしたい！なんて時はこんな感じで使います。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink> use Data::Validator;
...;

sub get_content {
    state $rule = Data::Validator-&gt;new(
        url =&gt; {
            isa =&gt; 'Str',
            default =&gt; 'http://yusuke.be/',
            optional =&gt; 0
        }
    )-&gt;with('Method');
    my ($self, $args) = $rule-&gt;validate(@_);
    my $url = $args-&gt;{url};
    my $res = $self-&gt;ua-&gt;get($url);
    return $res-&gt;content;
}
 </pre>


<ul>
<li><a href="https://metacpan.org/pod/Data::Validator">Data::Validator - Rule based validator on type constraint system - metacpan.org</a></li>
</ul>


<h3>3. Try::Tiny</h3>

<p>モダーンにエラーハンドリングを書けます。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink> try {
    die "dying message...";
} catch {
    warn "Error: $_";
};
 </pre>


<ul>
<li><a href="https://metacpan.org/pod/Try::Tiny">Try::Tiny - minimal try/catch with proper preservation of $@ - metacpan.org</a></li>
</ul>


<h3>4. Path::Tiny</h3>

<p>モダーンにローカルファイルのパス解決をしてくれます。それに加えて、ファイルの内容を舐める<code>slurp</code>や書き出すための<code>spew</code>などもあります。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink> use Path::Tiny;

my $file = path('foo.txt');
my $text = $file-&gt;slurp();
print $text;
 </pre>


<ul>
<li><a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny - File path utility - metacpan.org</a></li>
</ul>


<h2>Webのバックエンド</h2>

<h3>5. Mojolicious</h3>

<p>Perlにももちろん様々なWebフレームワークがありますが、サクッとつくったりある程度の規模かつViewまで担当するって時にはこの<strong>Mojolicious</strong>を僕は使ってます。 Perlには珍しくアグレッシブに後方互換を切り捨てるという開発方針があったりするのですが、まぁそれは置いといて、このフレームワークはRubyで言うSinatraとRailsの中間みたいな感じですごく使いやすいです。</p>

<p></p>
<blockquote class="twitter-tweet" lang="ja">
<p lang="ja" dir="ltr">言語違うけどMojoliciousはSinatraとRailsの中間でかつ、DSL臭が少ないので好きなんです</p>— Yusuke Wada (@yusukebe) <a href="https://twitter.com/yusukebe/status/672585806796615680">2015, 12月 4</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<ul>
<li><a href="https://metacpan.org/pod/Mojolicious">Mojolicious - Real-time web framework - metacpan.org</a></li>
</ul>


<h3>6. Plack</h3>

<p>フレームワークを使う分には触ることはないのですが、より特化したケースやパフォーマンスを重視したい際にはPSGIの実装である<strong>Plack</strong>を素で使います。RubyにおけるRackの立ち位置なのですが、Perlの場合だとこれから紹介するいくつかのモジュールと組み合わせることによって実用的なアプリをつくりやすいです。</p>

<ul>
<li><a href="https://metacpan.org/pod/Plack">Plack - Perl Superglue for Web frameworks and Web Servers (PSGI toolkit) - metacpan.org</a></li>
</ul>


<h3>7. Router::Boom</h3>

<p>例えばですが「このパスにアクセスが来たらこうする」というディスパッチャとして<strong>Rooter::Boom</strong>をPlackなどと組み合わせています。パス<code>/entry/100</code>に来たリクエストをコントローラ<code>Entry</code>の<code>show</code>というメソッドで処理するなんて場合はこんなコードで再現出来ます。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink> use Router::Boom;

my $router = Router::Boom-&gt;new();
$router-&gt;add(
    '/entry/{entry_id:[0-9]+}',
    { controller =&gt; 'Entry', method =&gt; 'show' }
);
my $dest = $router-&gt;match('/entry/100');
# =&gt; {controller =&gt; 'Entry', method =&gt; 'show', entry_id =&gt; '100' }
 </pre>


<ul>
<li><a href="https://metacpan.org/pod/Router::Boom">Router::Boom - Fast routing engine for web applications - metacpan.org</a></li>
</ul>


<h3>8. JSON::RPC</h3>

<p>BoketeではWeb APIのフォーマットとして<code>JSONRPC</code>を採用しているので使っています。アプリ内では継承して若干改造しているのですが、まぁ問題なしで使えております。</p>

<ul>
<li><a href="https://metacpan.org/pod/JSON::RPC">JSON::RPC - JSON RPC 2.0 Server Implementation - metacpan.org</a></li>
</ul>


<h3>9. OAuth::Lite2</h3>

<p>これもBoketeアプリの認証認可という点でサーバ側及びクライアント側でも利用させてもらってます。他にもOAuthの実装はあるのですが、作者が日本人の方でよく熟考して実装されている、かつ、実装もシンプルなのでオススメです。というか今回紹介しているモジュールの多くは日本人の方がメンテしてくれているので「困った時に聴ける」「開発意図が分かる」ので良いです。</p>

<ul>
<li><a href="https://metacpan.org/pod/OAuth::Lite2">OAuth::Lite2 - OAuth 2.0 Library - metacpan.org</a></li>
</ul>


<h3>10. Starlet</h3>

<p>PSGI対応のハイパフォーマンスWebアプリケーション<strong>サーバー</strong>です。なので上記したMojoliciousやPlackで実装したアプリケーションを本番環境で動かす際に必要となります。他にも、Starman、GazelleなどPSGIに対応したサーバーソフトがあるので用途に応じて使わけるといいでしょう。<strong>Server::Starter</strong>とあわせるといわゆる<code>Graceful Restart</code>も出来るし、運用上Appサーバーレベルで異常が起きたことがほぼ無いので安心感あります。</p>

<ul>
<li><a href="https://metacpan.org/pod/Starlet">Starlet - a simple, high-performance PSGI/Plack HTTP server - metacpan.org</a></li>
</ul>


<h2>Webアプリに便利</h2>

<h3>11. FormValidator::Lite</h3>

<p>Webフォームの値を検証することに特化したライブラリです。なのでバリデーションをコントローラ層でもモデルでもどこでも自分が好きなところでやっちゃっうことが出来るでしょう。ベーシックにコントローラ部分でやる例としてMojoliciousをつかった例はこのようになります。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink> use Mojolicious::Lite;
use FormValidator::Lite;
FormValidator::Lite-&gt;load_constraints(qw/Japanese/);

post '/' =&gt; {
    my $c = shift;
    my $validator = FormValidator::Lite-&gt;new($c-&gt;req);
    my $res = $validator-&gt;check(
        name =&gt; [qw/NOT_NULL/],
        name_kana =&gt; [qw/NOT_NULL KATAKANA/],
        {mails =&gt; [qw/mail1 mail2/]} =&gt; ['DUPLICATION'],
    );
    if ($validator-&gt;has_error) {
        return $c-&gt;render( text =&gt; 'Not valid!' );
    }
    $c-&gt;render( text =&gt; 'Valid!' );
};

app-&gt;start;
 </pre>


<ul>
<li><a href="https://metacpan.org/pod/FormValidator::Lite">FormValidator::Lite - lightweight form validation library - metacpan.org</a></li>
</ul>


<h3>12. HTML::FillInForm::Lite</h3>

<p>テンプレートなどを使って描画するHTMフォームの個々の要素のそれぞれに値を充填することが出来ます。ようは「戻るボタン押したら入力したのが全部消えてる＞＜」問題が解決出来ます。</p>

<ul>
<li><a href="https://metacpan.org/pod/HTML::FillInForm::Lite">HTML::FillInForm::Lite - Lightweight FillInForm module in Pure Perl - metacpan.org</a></li>
</ul>


<h3>13. HTML::Scrubber</h3>

<p>Mojoliciousのテンプレート<code>Mojo::Template</code>をはじめ、テンプレートエンジンには大抵HTMLエスケープ処理を容易にする、もしくは、デフォルトでエスケープされる機能がついています。が、場合によっては生HTMLをデータで持っていて、<code>script</code>タグ等除去してそのまま描画したい、なんてことがあります。その際にこの<strong>HTML::Scrubber</strong>でタグをWhite or Black List形式で指定してセーフティにしています。</p>

<ul>
<li><a href="https://metacpan.org/pod/HTML::Scrubber">HTML::Scrubber - Perl extension for scrubbing/sanitizing html - metacpan.org</a></li>
</ul>


<h2>DB操作</h2>

<h3>14. Teng</h3>

<p>ガッツリしたO/R Mapperもあるんですが<strong>Teng</strong>は厳密にはO/R Mapperとも言えないんじゃないか！ってほど簡素なDB操作をするためのモジュール。なので勝手に<code>JOIN</code>が走るなんてことがないです。インターフェースもシンプルで直感的なのが好きですね。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink> my $iter = $db-&gt;search(
    'entry',
    { category =&gt; 'podcast' },
    { order_by =&gt; { id =&gt; 'desc' } }
);
while(my $entry = $iter-&gt;next) {
    say $entry-&gt;title();
}
 </pre>


<ul>
<li><a href="https://metacpan.org/pod/Teng">Teng - very simple DBI wrapper/ORMapper - metacpan.org</a></li>
</ul>


<h3>15. SQL::Maker</h3>

<p><strong>Teng</strong>は生SQLも受け付けるので、複雑なクエリを発行したい場合や条件で分岐したい時などはこの<strong>SQL::Maker</strong>でクエリをつくってからTengに渡すなんてことをしています。ようはこれ書きやすいクエリビルダーです。実はTengの内部でも利用されています。</p>

<ul>
<li><a href="https://metacpan.org/pod/SQL::Maker">SQL::Maker - Yet another SQL builder - metacpan.org</a></li>
</ul>


<h2>その他</h2>

<h3>16. Imager</h3>

<p>画像を扱う場合はGDやImageMagickのラッパーが存在するのでそれを叩けばいいのですが、この<strong>Imager</strong>の方がAPIがPerlishで使用感が良いです。</p>

<ul>
<li><a href="https://metacpan.org/pod/Imager">Imager - Perl extension for Generating 24 bit Images - metacpan.org</a></li>
</ul>


<h2>デバグとテスト</h2>

<h3>17. Devel::KYTProf</h3>

<p>データベースやmemcachdへのクエリやHTTPのリクエスト状況などを開発しながら見ていくことは非常に重要です。その際にコード内で <code>use Devel::KYTProf</code>するだけで標準出力に</p>

<pre class="code" data-lang="" data-unlink> 0.228 ms  [Cache::Memcached::Fast]  get dbs:54e98de3b9aed9064e1834e0d6ac3a636a981f9f  | Bokete::DB::Row::Boke:48 </pre>


<p>とかでちゃうの素敵です。</p>

<ul>
<li><a href="https://metacpan.org/pod/distribution/Devel-KYTProf/README.pod">Devel::KYTProf - Simple profiler - metacpan.org</a></li>
</ul>


<h3>18. Test::mysqld</h3>

<p>MySQLをバックエンドに持つアプリケーションをテストする際に便利すぎる。テストを走らせている間だけテンポラリーな<code>mysqld</code>が立ち上がります。</p>

<ul>
<li><a href="https://metacpan.org/pod/Test::mysqld">Test::mysqld - mysqld runner for tests - metacpan.org</a></li>
</ul>


<h3>19. Harriet</h3>

<p>大抵<code>prove</code>というコマンドで複数ファイルにわかれたテストをまとめて実行するのですが、Test::mysqldをprove中に使いまわしたりってのに使ってます。BoketeではMySQLだけではなく、MemcachedとRedisをテストの際、こいつで立ち上げてたりします。</p>

<ul>
<li><a href="https://metacpan.org/pod/Harriet">Harriet - Daemon manager for testing - metacpan.org</a></li>
</ul>


<h3>20. Test::JSON::RPC::Autodoc</h3>

<p>手前味噌で恐縮ですが、<code>JSONRPC</code>を喋るPlackアプリケーションに対してテストを簡便に記載できるだけじゃなくて、APIドキュメントもMarkdown形式で書きだしてくれるモジュールです。Ruby実装の<a href="https://github.com/r7kamura/autodoc">autodoc</a>をモチベーションにしてつくりました。Boketeではこれを使って吐き出したMarkdownをGitHub上で見てもらうことで仕様の共有をしています。</p>

<ul>
<li><a href="https://metacpan.org/pod/Test::JSON::RPC::Autodoc">Test::JSON::RPC::Autodoc - Testing tools for auto generating documents of JSON-RPC applications - metacpan.org</a></li>
</ul>


<h2>まとめ</h2>

<p>以上、実践で使用しているモジュール群から「特徴的で」かつ「これがなきゃ困るぜ！」というライブラリを20個紹介しました。Perlは<strong>グルー言語</strong>とも呼ばれこうしたCPANモジュールを組み合わせて自分達なりにアプリケーションをつくっていけるので、非常に楽しい側面があります。それぞれドキュメントへのリンクを張っているので興味があれば見てみて下され！</p>

<hr>

<p><strong>Perlはじめる時にオススメの2冊</strong></p>

<p></p>
<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115671/kamawada-22/"><img src="http://ecx.images-amazon.com/images/I/51xJY7AS7lL._SL160_.jpg" class="hatena-asin-detail-image" alt="初めてのPerl 第6版" title="初めてのPerl 第6版"></a><div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115671/kamawada-22/">初めてのPerl 第6版</a></p>
<ul>
<li>
<span class="hatena-asin-detail-label">作者:</span> Randal L. Schwartz,brian d foy,Tom Phoenix,近藤嘉雪</li>
<li>
<span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li>
<li>
<span class="hatena-asin-detail-label">発売日:</span> 2012/07/25</li>
<li>
<span class="hatena-asin-detail-label">メディア:</span> 大型本</li>
<li>
<span class="hatena-asin-detail-label">購入</span>: 7人 <span class="hatena-asin-detail-label">クリック</span>: 22回</li>
<li><a href="http://d.hatena.ne.jp/asin/4873115671/kamawada-22" target="_blank">この商品を含むブログ (17件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>

<p></p>
<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116287/kamawada-22/"><img src="http://ecx.images-amazon.com/images/I/51ukxuLQStL._SL160_.jpg" class="hatena-asin-detail-image" alt="続・初めてのPerl 改訂第2版" title="続・初めてのPerl 改訂第2版"></a><div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116287/kamawada-22/">続・初めてのPerl 改訂第2版</a></p>
<ul>
<li>
<span class="hatena-asin-detail-label">作者:</span> Randal L. Schwartz,brian d foy,Tom Phoenix,伊藤直也,長尾高弘</li>
<li>
<span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li>
<li>
<span class="hatena-asin-detail-label">発売日:</span> 2013/08/21</li>
<li>
<span class="hatena-asin-detail-label">メディア:</span> 大型本</li>
<li><a href="http://d.hatena.ne.jp/asin/4873116287/kamawada-22" target="_blank">この商品を含むブログ (2件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>

