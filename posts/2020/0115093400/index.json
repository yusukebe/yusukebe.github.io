{
    "data" :  {
    "title": "DBIx::Mint、使ってみる",
    "date": "2020-01-15 09:34:00 +0900 JST",
    "dir": "posts/2020/",
    "slug": "0115093400",
    "categories": ["tech"],
    "tags": []
}

---



<ul>
<li><a href="https://metacpan.org/pod/DBIx::Mint">DBIx::Mint - A mostly class-based ORM for Perl - metacpan.org</a></li>
</ul>


<p>RowクラスをMooで定義するのが面白くて使ってみた。</p>

<p>こういうテーブルを持つデータベースがあるとする。</p>

<pre class="code lang-sql" data-lang="sql" data-unlink>
CREATE TABLE entry (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    body TEXT NOT NULL
);

CREATE TABLE comment (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    entry_id INTEGER NOT NULL,
    body TEXT NOT NULL,
    FOREIGN KEY (entry_id) REFERENCES entry (id)
);
</pre>


<p>Blog::Entryという名前でRowクラスを定義する。Mooのクラスなのでhasでカラムに対応したプロパティを記載する。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink>
package Blog::Entry;
use Moo;
use strictures 2;

with 'DBIx::Mint::Table';

has 'id' =&gt; (
    is =&gt; 'rw',
    required =&gt; 1,
);

has 'title' =&gt; (
    is =&gt; 'rw',
    required =&gt; 1,
);

has 'body' =&gt; (
    is =&gt; 'rw',
    required =&gt; 1,
);

1;</pre>


<p>Blog::Commentもおんなじように書く。次はBlog::Schemaにテーブルとクラスの対応、リレーションの設定を書く。one_to_manyのとこの記述をすると<code>$entry-&gt;get_comment</code>とか<code>$comment-&gt;get_entry</code>ができるようになる。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink>
package Blog::Schema;
use strictures 2;
use DBIx::Mint;
use Blog::Entry;
use Blog::Comment;

my $schema = DBIx::Mint-&gt;instance-&gt;schema;
$schema-&gt;add_class(
    class =&gt; 'Blog::Entry',
    table =&gt; 'entry',
    pk =&gt; 'id',
    auto_pk =&gt; 1,
);

$schema-&gt;add_class(
    class =&gt; 'Blog::Comment',
    table =&gt; 'comment',
    pk =&gt; 'id',
    auto_pk =&gt; 1,
);

$schema-&gt;one_to_many(
    conditions =&gt; ['Blog::Entry', { id =&gt; 'entry_id' }, 'Blog::Comment'],
    method =&gt; 'get_comments',
    inverse_method =&gt; 'get_entry',
);</pre>


<p>いよいよこれらを使ってみる。</p>

<p>データベースに接続。内部でDBIx::Connectorを使っている。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink>
DBIx::Mint-&gt;connect( 'dbi:SQLite:dbname=blog.db', '', '',
                     { AutoCommit =&gt; 1, RaiseError =&gt; 1 } );</pre>


<p>INSERT。返り値はプライマリーキーが返ってくる。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink>
my $id = Blog::Entry-&gt;insert( title =&gt; 'Hello world', body =&gt; 'It is rainy today.' );
my @ids = Blog::Comment-&gt;insert(
    {entry_id =&gt; $id, body =&gt; 'You are crazy.'},
    { entry_id =&gt; $id, body =&gt; 'You are funny.' },
    { entry_id =&gt; $id, body =&gt; 'You are weird.' },
);</pre>


<p>SELECT。この場合のfindメソッドの返り値はBlog::Entryの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink>
my $entry = Blog::Entry-&gt;find($id);

say sprintf("entry[%s]: %s", $entry-&gt;id, $entry-&gt;title);
say sprintf("entry[%s]: %s", $entry-&gt;id, $entry-&gt;body);</pre>


<p>result_setを経由してsearchすることもできる。where句は<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>::Abstractの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9">シンタックス</a>で、limitとかorder_byは<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>::Abstract::Moreのもので指定できる。この場合の返り値はオブジェクト<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>じゃなくて<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%C3%CD">ハッシュ値</a>になる。ハッシュの方が扱いやすいだろ、っていう観点らしい。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink>
my $latest_entry = Blog::Entry-&gt;result_set-&gt;search-&gt;order_by({ -desc =&gt; 'id' })-&gt;single;
use Data::Dumper;
print Dumper $latest_entry;
# $VAR1 = {
#           'title' =&gt; 'Hello world',
#           'body' =&gt; 'It is rainy today.',
#           'id' =&gt; 1
#         };</pre>


<p>EntryについたCommentを取ってくるところはリレーションのところで指定したget_commentsメソッドが使える。逆にComment側からはget_entryができる。この辺が記述もわかりやすくてよい。</p>

<pre class="code lang-perl" data-lang="perl" data-unlink>
my @comments = $entry-&gt;get_comments;
for my $comment (@comments) {
    say sprintf (
        "commnet[%s]: %s for entry[%s]",
        $comment-&gt;id,
        $comment-&gt;body,
        $comment-&gt;get_entry-&gt;id
    );
}</pre>


<p>DBIx::Mint、いい感じ。</p>


 
}
