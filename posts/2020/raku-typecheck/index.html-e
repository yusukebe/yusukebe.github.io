<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge"><title>RakuのType CheckとGradual Typingについて - ゆーすけべー日記</title><link rel="icon" type="image/png" href=icons/myicon.png /><meta name="viewport" content="width=device-width, initial-scale=1">
	<meta property="og:title" content="RakuのType CheckとGradual Typingについて" />
<meta property="og:description" content="YAPC::Kyoto のタイムテーブルが発表された。 Raku(Perl6)初心者のNativeCallを使った全文検索ライブラリー作成日記 を聞きたいな〜と思ったら、 裏がマコピーの かんたん静的型付けPerlへの道のり だった" />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://yusukebe.com/posts/2020/raku-typecheck/" />
<meta property="og:image" content="https://live.staticflickr.com/65535/49421230586_07f3e9315d_c_d.jpg" />
<meta property="article:published_time" content="2020-01-22T06:12:39+09:00" />
<meta property="article:modified_time" content="2020-01-22T06:12:39+09:00" />
<meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:image" content="https://live.staticflickr.com/65535/49421230586_07f3e9315d_c_d.jpg"/>

<meta name="twitter:title" content="RakuのType CheckとGradual Typingについて"/>
<meta name="twitter:description" content="YAPC::Kyoto のタイムテーブルが発表された。 Raku(Perl6)初心者のNativeCallを使った全文検索ライブラリー作成日記 を聞きたいな〜と思ったら、 裏がマコピーの かんたん静的型付けPerlへの道のり だった"/>
<link rel="stylesheet" type="text/css" media="screen" href="https://yusukebe.com/css/normalize.css" />
	<link rel="stylesheet" type="text/css" media="screen" href="https://yusukebe.com/css/main.css" />
	<link rel="stylesheet" type="text/css" href="https://yusukebe.com/css/custom.css" />
	
	<link rel="stylesheet" type="text/css" href="https://yusukebe.com/css/syntax.css" />
	<script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
	<script src="https://yusukebe.com/js/main.js"></script>
	<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
</head>

<body>
	<div class="container wrapper post">
		<div class="header">
	<h1 class="site-title"><a href="https://yusukebe.com/">ゆーすけべー日記</a></h1>
	<div class="site-description"><h2></h2><nav class="nav social">
			<ul class="flat"><a href="https://github.com/yusukebe" title="Github"><i data-feather="github"></i></a><a href="https://twitter.com/yusukebe" title="Twitter"><i data-feather="twitter"></i></a></ul>
		</nav>
	</div>

	<nav class="nav">
		<ul class="flat">
			
			<li>
				<a href="/">Home</a>
			</li>
			
			<li>
				<a href="/posts">All posts</a>
			</li>
			
			<li>
				<a href="/about">About</a>
			</li>
			
			<li>
				<a href="/tags">Tags</a>
			</li>
			
		</ul>
	</nav>
</div>


		<div class="post-header">
			<h1 class="title">RakuのType CheckとGradual Typingについて</h1>
			<div class="meta">Posted at &mdash; Jan 22, 2020</div>
		</div>

		<div class="markdown post-body">
			<p><a href="https://yapcjapan.org/2020kyoto/">YAPC::Kyoto</a>
のタイムテーブルが発表された。
<a href="https://yapcjapan.org/2020kyoto/timetable.html#/detail/27">Raku(Perl6)初心者のNativeCallを使った全文検索ライブラリー作成日記</a>
を聞きたいな〜と思ったら、
裏が<a href="https://twitter.com/mackee_w">マコピー</a>の
<a href="https://yapcjapan.org/2020kyoto/timetable.html#/detail/20">かんたん静的型付けPerlへの道のり</a>
だった。
マコピーのトークも気になる〜〜〜ってなって、とあるところでこうつぶやいた。</p>
<blockquote>
<p>Rakuで型付けできるじゃんとか思いつつ「Perlをパースして型を抜き出す」これ面白そう、とかなる</p>
</blockquote>
<p><strong>でも</strong>、Raku（Perl 6）の型付けについてイマイチ理解が足りない。
さらに、Type Check=型チェックについて、どういう場合に、
どこで、どんなエラーを吐くかが分かってなかったので<a href="https://twitter.com/AnaTofuZ">インターネットアイドルさん</a>の
力を借りつつ調べてみた。</p>
<h2 id="追記">追記</h2>
<p>以下の点について、教えてもらってスッキリした。</p>
<ul>
<li>Typingと型チェックは別の概念
<ul>
<li>静的型付けや漸進的型付けであるのと、どういう風に型チェックするかどうかは別で考える</li>
</ul>
</li>
<li>Rakuは静的型付けで記述でき、後述するように型チェックの機能が備わっている
<ul>
<li>ただし、エラーを吐くのがコンパイル時 or 実行時かは実装に関わる</li>
<li><code>my Int $i := 'foo'</code>でコンパイルエラーが出ないのは、単にまだ実装しきれてない or なんらかの深い理由があってのことだろう</li>
</ul>
</li>
</ul>
<h2 id="rakuはgradual-typingな言語">RakuはGradual Typingな言語</h2>
<p>まずRakuの型付けの性質について。
Rakuは、Javaのような静的型付けの側面も持ちつつ、動的型付けの利点がある
Gradual Typing=漸進的型付けを持つ（だと思う）。漸進的型付けについては以下の記事がすごく面白いです。</p>
<ul>
<li><a href="https://qiita.com/t2y/items/0a604384e18db0944398">What is Gradual Typing: 漸進的型付けとは何か - Qiita</a></li>
</ul>
<p>RakuはGradual Typingだぜ！って言ってる人は他にもいる。</p>
<ul>
<li><a href="https://lebgeeks.com/talks/perl6-gradual-typing.html">Perl 6 gradual typing FTW!</a></li>
<li><a href="http://blogs.perl.org/users/zoffix_znet/2016/04/perl-6-types-made-for-humans.html">Perl 6 Types: Made for Humans | Zoffix Znet blogs.perl.org</a></li>
<li><a href="https://opensource.com/article/18/12/calling-subs-and-typing-perl-6">Calling subs and typing in Perl 6 | Opensource.com</a></li>
</ul>
<h2 id="型チェックの例">型チェックの例</h2>
<p>Perl 5は動的型付けな言語（ライブラリを使って漸進的型付けっぽくすることもできる）なので、
<code>sub func</code>で定義したサブルーチンの引数に<code>Int</code>を期待したいけど、
それを表現することはできなくて、以下のコードはそのまま<code>foo</code>と印字する。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="k">use</span> <span class="nn">v5</span><span class="mf">.10</span><span class="p">;</span>

<span class="k">sub</span> <span class="nf">func</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$</span><span class="nv">i</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="n"></span><span class="n">say</span> <span class="nv">$</span><span class="nv">i</span><span class="p">;</span>
<span class="p">}</span>
<span class="n"></span><span class="n">func</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>まぁ当たり前なんだけど、これをRakuでやろうとするとシグネチャーを付けてこうなる。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="k">use</span> <span class="nn">v6</span><span class="p">;</span>

<span class="k">sub</span> <span class="nf">func</span><span class="p">( Int $i ) {</span>
    <span class="n"></span><span class="n">say</span> <span class="nv">$</span><span class="nv">i</span><span class="p">;</span>
<span class="p">}</span>
<span class="n"></span><span class="n">func</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p>実行しようとするとコンパイルエラーになる。</p>
<p><img src="https://live.staticflickr.com/65535/49421230586_07f3e9315d_c_d.jpg" alt="Raku Type Check Error"></p>
<p>エラーメッセージが色付けされてていい感じ！</p>
<p>とはいえ、実はRakuにおける型チェックでコンパイルエラーが出るのは
このケース（<code>X::TypeCheck::Argument</code>）だけのようだ。</p>
<h2 id="xtypecheck">X::TypeCheck::*</h2>
<p>Rakuのコンパイルor実行時エラーの定義はRakudoの例外に関するソースを読むと結構分かる。</p>
<ul>
<li><a href="https://github.com/rakudo/rakudo/blob/826c3ead8208f3304f7ee99cc2575c2fbb3a8b6a/src/core.c/Exception.pm6">https://github.com/rakudo/rakudo/blob/826c3ead8208f3304f7ee99cc2575c2fbb3a8b6a/src/core.c/Exception.pm6</a></li>
</ul>
<p>型チェックで例外を出すために実装されているのは、
<code>X::TypeCheck</code>を継承したクラス<code>X::TypeCheck::*</code>。
で、その中でも上の例で示したのは<code>X::TypeCheck::Argument</code>で定義されている例外で、
これだけコンパイル時にエラーが出るみたい
（コンパイルエラーを出すのは<code>X::Comp</code>ロールを実装しているものだと思うので、
ソースコードをみる限り、それを実装していない<code>X::TypeCheck::Argument</code>でコンパイルエラーが出るのが謎）。</p>
<p>で、どういう場合に型チェックでどんなエラーが出るのかをいくか試してみた。
これらは</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="c1"># 実行時エラーが出るコード</span>
<span class="n"></span><span class="n">CATCH</span> <span class="p">{</span> <span class="n"></span><span class="n">default</span> <span class="p">{</span> <span class="n"></span><span class="n">put</span> <span class="o">.</span><span class="o">^</span><span class="n"></span><span class="n">name</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">,</span> <span class="o">.</span><span class="n"></span><span class="n">Str</span> <span class="p">}</span> <span class="p">}</span><span class="p">;</span>
</code></pre></div><p>とすれば、例外の名前とメッセージをみることができる。</p>
<h3 id="xtypecheckassignment">X::TypeCheck::Assignment</h3>
<p>型宣言した変数に異なる型の値を代入しようとした時に発生する。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="k">my</span> <span class="n"></span><span class="n">Int</span> <span class="nv">$</span><span class="nv">i</span> <span class="o">=</span> <span class="s">&#34;foo&#34;</span><span class="p">;</span>
<span class="n"></span><span class="n">CATCH</span> <span class="p">{</span> <span class="n"></span><span class="n">default</span> <span class="p">{</span> <span class="n"></span><span class="n">put</span> <span class="o">.</span><span class="o">^</span><span class="n"></span><span class="n">name</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">,</span> <span class="o">.</span><span class="n"></span><span class="n">Str</span> <span class="p">}</span> <span class="p">}</span><span class="p">;</span>
<span class="c1"># X::TypeCheck::Assignment: Type check failed in assignment to $i; expected Int but got Str (&#34;foo&#34;)</span>
</code></pre></div><h3 id="xtypecheckreturn">X::TypeCheck::Return</h3>
<p>サブルーチンの返り値が期待する型ではない時に発生する。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="k">sub</span> <span class="nf">func</span><span class="p">( --&gt; Int ) {</span>
    <span class="k">return</span> <span class="s">&#39;foo&#39;</span><span class="p">;</span>
<span class="p">}</span>
<span class="n"></span><span class="n">func</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="n"></span><span class="n">CATCH</span> <span class="p">{</span> <span class="n"></span><span class="n">default</span> <span class="p">{</span> <span class="n"></span><span class="n">put</span> <span class="o">.</span><span class="o">^</span><span class="n"></span><span class="n">name</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">,</span> <span class="o">.</span><span class="n"></span><span class="n">Str</span> <span class="p">}</span> <span class="p">}</span><span class="p">;</span>
<span class="c1"># X::TypeCheck::Return: Type check failed for return value; expected Int but got Str (&#34;foo&#34;)</span>
</code></pre></div><h3 id="xtypecheckbinding">X::TypeCheck::Binding</h3>
<p>指定した型以外の値をバインドしようとした時に発生する。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="k">my</span> <span class="n"></span><span class="n">Int</span> <span class="nv">$</span><span class="nv">i</span> <span class="p">:</span><span class="o">=</span> <span class="s">&#34;foo&#34;</span><span class="p">;</span>
<span class="n"></span><span class="n">CATCH</span> <span class="p">{</span> <span class="n"></span><span class="n">default</span> <span class="p">{</span> <span class="n"></span><span class="n">put</span> <span class="o">.</span><span class="o">^</span><span class="n"></span><span class="n">name</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">,</span> <span class="o">.</span><span class="n"></span><span class="n">Str</span> <span class="p">}</span> <span class="p">}</span><span class="p">;</span>
<span class="c1"># X::TypeCheck::Binding: Type check failed in binding; expected Int but got Str (&#34;foo&#34;)</span>
</code></pre></div><h3 id="xtypecheckbindingparameter">X::TypeCheck::Binding::Parameter</h3>
<p>クラス内メソッドの引数が期待する型と異なる場合に発生する。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="n"></span><span class="n">class</span> <span class="n"></span><span class="n">A</span> <span class="p">{</span>
    <span class="n"></span><span class="n">method</span> <span class="n"></span><span class="n">func</span><span class="p">(</span> <span class="n"></span><span class="n">Int</span> <span class="nv">$</span><span class="nv">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n"></span><span class="n">say</span> <span class="nv">$</span><span class="nv">i</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n"></span><span class="n">A</span><span class="o">.</span><span class="k">new</span><span class="o">.</span><span class="n"></span><span class="n">func</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="n"></span><span class="n">CATCH</span> <span class="p">{</span> <span class="n"></span><span class="n">default</span> <span class="p">{</span> <span class="n"></span><span class="n">put</span> <span class="o">.</span><span class="o">^</span><span class="n"></span><span class="n">name</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">,</span> <span class="o">.</span><span class="n"></span><span class="n">Str</span> <span class="p">}</span> <span class="p">}</span><span class="p">;</span>
<span class="c1"># X::TypeCheck::Binding::Parameter: Type check failed in binding to parameter &#39;$i&#39;; expected Int but got Str (&#34;foo&#34;)</span>
</code></pre></div><h3 id="xtypecheckassignment-1">X::TypeCheck::Assignment</h3>
<p>クラス内のプロパティの値が期待する型と異なる場合に発生する。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="n"></span><span class="n">class</span> <span class="n"></span><span class="n">A</span> <span class="p">{</span>
    <span class="n"></span><span class="n">has</span> <span class="n"></span><span class="n">Int</span> <span class="nv">$</span><span class="err">.</span><span class="nv">i</span><span class="p">;</span>
<span class="p">}</span>
<span class="n"></span><span class="n">A</span><span class="o">.</span><span class="k">new</span><span class="p">(</span> <span class="n"></span><span class="n">i</span> <span class="o">=</span><span class="o">&gt;</span> <span class="s">&#39;foo&#39;</span> <span class="p">)</span><span class="p">;</span>
<span class="n"></span><span class="n">CATCH</span> <span class="p">{</span> <span class="n"></span><span class="n">default</span> <span class="p">{</span> <span class="n"></span><span class="n">put</span> <span class="o">.</span><span class="o">^</span><span class="n"></span><span class="n">name</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">,</span> <span class="o">.</span><span class="n"></span><span class="n">Str</span> <span class="p">}</span> <span class="p">}</span><span class="p">;</span>
<span class="c1"># X::TypeCheck::Assignment: Type check failed in assignment to $!i; expected Int but got Str (&#34;foo&#34;)</span>
</code></pre></div><h3 id="xtypecheckargument">X::TypeCheck::Argument</h3>
<p>サブルーチンの引数が期待する型と異なる場合に発生する。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="k">sub</span> <span class="nf">func</span><span class="p">( Int $i ) {</span>
     <span class="n"></span><span class="n">say</span> <span class="nv">$</span><span class="nv">i</span><span class="p">;</span>
<span class="p">}</span>
<span class="n"></span><span class="n">func</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="n"></span><span class="n">CATCH</span> <span class="p">{</span> <span class="n"></span><span class="n">default</span> <span class="p">{</span> <span class="n"></span><span class="n">put</span> <span class="o">.</span><span class="o">^</span><span class="n"></span><span class="n">name</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">,</span> <span class="o">.</span><span class="n"></span><span class="n">Str</span> <span class="p">}</span> <span class="p">}</span><span class="p">;</span>
</code></pre></div><p><strong>で</strong>、これだけコンパイルエラーになる。</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">===SORRY!=== Error while compiling type.p6
Calling func(Str) will never work with declared signature (Int $i)
at type.p6:19
------&gt; &lt;BOL&gt;⏏func(&#39;foo&#39;);
</code></pre></div><h2 id="ちなみにロール周りのエラー">ちなみに、ロール周りのエラー</h2>
<p>ロール周りでわりとコンパイル時にエラーを吐いてくれて、イケてる。</p>
<p>例えば、複数のロールを実装した場合にメソッドが被ってしまった時は以下の通り。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="n"></span><span class="n">role</span> <span class="n"></span><span class="n">A</span> <span class="p">{</span>
    <span class="n"></span><span class="n">method</span> <span class="n"></span><span class="n">func</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span><span class="p">}</span>
<span class="p">}</span>

<span class="n"></span><span class="n">role</span> <span class="n"></span><span class="n">B</span> <span class="p">{</span>
    <span class="n"></span><span class="n">method</span> <span class="n"></span><span class="n">func</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span><span class="p">}</span>
<span class="p">}</span>

<span class="n"></span><span class="n">class</span> <span class="n"></span><span class="n">C</span> <span class="n"></span><span class="n">does</span> <span class="n"></span><span class="n">A</span> <span class="n"></span><span class="n">does</span> <span class="n"></span><span class="n">B</span> <span class="p">{</span><span class="p">}</span>
</code></pre></div><p><img src="https://live.staticflickr.com/65535/49421546071_eb5365f5eb_c_d.jpg" alt="Roleエラー"></p>
<p><code>stub</code>で定義したメソッドを実装しない場合。</p>
<div class="highlight"><pre class="chroma"><code class="language-perl" data-lang="perl"><span class="n"></span><span class="n">role</span> <span class="n"></span><span class="n">A</span> <span class="p">{</span>
    <span class="n"></span><span class="n">method</span> <span class="n"></span><span class="n">func</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span> <span class="o">!</span><span class="o">!</span><span class="o">!</span> <span class="p">}</span>
<span class="p">}</span>

<span class="n"></span><span class="n">class</span> <span class="n"></span><span class="n">C</span> <span class="n"></span><span class="n">does</span> <span class="n"></span><span class="n">A</span> <span class="p">{</span><span class="p">}</span>
</code></pre></div><p><img src="https://live.staticflickr.com/65535/49421546036_9a0a31f5a4_c_d.jpg" alt="Roleエラー"></p>
<h2 id="まとめる">まとめる</h2>
<p>以上、漸進的型付けなRakuではコンパイル時もしくは実行時に型チェックが走り、
<code>X::TypeCheck::*</code>で定義された例外を投げることが分かった。</p>
<p>他の言語の静的型付け、漸進的型付けがどうなっているのか、
Perl 5でどのように実現するのかが気になるところだが、
<a href="https://yapcjapan.org/2020kyoto/timetable.html#/detail/20">YAPC::Kyotoのマコピーのトーク</a>を聞けば分かるっぽい！！
でも<a href="https://yapcjapan.org/2020kyoto/timetable.html#/detail/27">NativeCallでGroonga</a>も面白そう！</p>
<p>わくわく〜〜〜。</p>
<h2 id="追記-1">追記</h2>
<p>Twitterでつぶやいたら、</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Rakuは漸進的型付けをサポートするでいいんしょうか。教えてください偉いひと… <a href="https://twitter.com/hashtag/rakulang?src=hash&amp;ref_src=twsrc%5Etfw">#rakulang</a></p>&mdash; Yusuke Wada (@yusukebe) <a href="https://twitter.com/yusukebe/status/1219634104343375872?ref_src=twsrc%5Etfw">January 21, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>すごい勢いでエリザベスさんがレスしてくれた。</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Typing in Raku is usually referred to as &quot;gradual typing&quot;. As in, you do not need to specify typing. But under the hood, type checking does take place.<br><br> my <a href="https://twitter.com/search?q=%24a&amp;src=ctag&amp;ref_src=twsrc%5Etfw">$a</a>;<br><br>is really short for:<br><br> my Any <a href="https://twitter.com/search?q=%24a&amp;src=ctag&amp;ref_src=twsrc%5Etfw">$a</a>;<br><br>Since most values match `Any`, you can put just about any value in there.</p>&mdash; Elizabeth Mattijsen (@liztormato) <a href="https://twitter.com/liztormato/status/1219739537766830080?ref_src=twsrc%5Etfw">January 21, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>



<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Now, if you want to e.g. limit to integers, you would write:<br><br> my Int <a href="https://twitter.com/search?q=%24a&amp;src=ctag&amp;ref_src=twsrc%5Etfw">$a</a>;<br> <a href="https://twitter.com/search?q=%24a&amp;src=ctag&amp;ref_src=twsrc%5Etfw">$a</a> = 42; # ok<br> <a href="https://twitter.com/search?q=%24a&amp;src=ctag&amp;ref_src=twsrc%5Etfw">$a</a> = &quot;foo&quot;; # Type check failed in assignment to <a href="https://twitter.com/search?q=%24a&amp;src=ctag&amp;ref_src=twsrc%5Etfw">$a</a>; expected Int but got Str (&quot;foo&quot;)</p>&mdash; Elizabeth Mattijsen (@liztormato) <a href="https://twitter.com/liztormato/status/1219739998557175814?ref_src=twsrc%5Etfw">January 21, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>



		</div>

		<div class="post-tags">
			
				
					<nav class="nav tags">
							<ul class="flat">
								
								<li><a href="/tags/raku">Raku</a></li>
								
							</ul>
					</nav>
				
			
		</div>
        <div id="fb-root"></div>
<script async defer crossorigin="anonymous" src="https://connect.facebook.net/ja_JP/sdk.js#xfbml=1&version=v5.0&appId=233306523373884&autoLogAppEvents=1"></script>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>

<div class="social-button-area">
  <ul class="social-button">
    <li>
      <a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-show-count="false">Tweet</a>
    </li>
    <li>
      <span class="fb-share-button"  data-layout="button" data-size="small"><a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3a%2f%2fyusukebe.com%2fposts%2f2020%2fraku-typecheck%2f;src=sdkpreparse" class="fb-xfbml-parse-ignore">シェア</a></span>
    </li>
    <li>
      <a href="https://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="basic-label-counter" data-hatena-bookmark-lang="ja" title="このエントリーをはてなブックマークに追加"><img src="https://b.st-hatena.com/images/v4/public/entry-button/button-only@2x.png" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /></a>
    </li>
  </ul>
</div>

<div class="disqus-area">
  <div id="disqus_thread"></div>
<script type="application/javascript">
    var disqus_config = function () {
    
    
    
    };
    (function() {
        if (["localhost", "127.0.0.1"].indexOf(window.location.hostname) != -1) {
            document.getElementById('disqus_thread').innerHTML = 'Disqus comments not available by default when the website is previewed locally.';
            return;
        }
        var d = document, s = d.createElement('script'); s.async = true;
        s.src = '//' + "yusukebe-com" + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="https://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

<ul class="pagination">
  
  <li class="page-item page-prev">
    <a href="https://yusukebe.com/posts/2020/do-you-know-pornhub/" class="page-link" aria-label="Previous"><span aria-hidden="true">← 君はPornhubを知っているか</span></a>
  </li>
  
  
  <li class="page-item page-next">
    <a href="https://yusukebe.com/posts/2020/python-dmm/" class="page-link" aria-label="Next"><span aria-hidden="true">Pythonでメロディー・雛・マークスを出す →</span></a>
  </li>
  
</ul>

	</div>
	<div class="footer wrapper">
	<nav class="nav">
		<div> © Copyright yusukebe.com |  <a href="https://github.com/vividvilla/ezhil">Ezhil theme</a> | Built with <a href="https://gohugo.io">Hugo</a></div>
	</nav>
</div>



<script type="application/javascript">
var doNotTrack = false;
if (!doNotTrack) {
	window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
	ga('create', 'UA-492497-1', 'auto');
	
	ga('send', 'pageview');
}
</script>
<script async src='https://www.google-analytics.com/analytics.js'></script>

<script>feather.replace()</script>
</body>
</html>
