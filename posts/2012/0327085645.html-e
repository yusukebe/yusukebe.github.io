+++
Categories = ["tech"]
Description = " Webサービスのログイン方法の一つに「Twitterログイン」が最近多く見られるようになってきました。サイト上でのユーザー登録無しでTwitterアカウントを引き回すことも工夫によってはできますので、ユーザーや開発者にとって手間が省けると"
Tags = ["Web Essay", "Perl"]
date = "2012-03-27T17:56:00+09:00"
title = "イカ娘でTwitter OAuth認証"
author = "kamawada"
archive = ["2012"]
draft = false
+++


<p>Webサービスのログイン方法の一つに「Twitterログイン」が最近多く見られるようになってきました。
サイト上でのユーザー登録無しでTwitterアカウントを引き回すことも工夫によってはできますので、
ユーザーや開発者にとって手間が省けるという利点があるのではないでしょうか。
今回はアニメ「イカ娘」を題材とした簡単なWebアプリを作りつつTwitterのOAuth認証の流れと実装を見ていきましょう。</p>

<p><img src="http://farm8.staticflickr.com/7123/7020279907_6ab167dce6.jpg" alt="イカ娘タイムライン"></p>

<h3>Twitter OAuth認証の流れ</h3>

<p>Twitter OAuthでは主にキーと鍵のペアの値がいくつかでてきて混乱しがちなのでイカ、おっと間違えた、以下にまとめておきます。</p>

<ul>
<li>「<strong>コンシューマトークン、コンシューマシークレット</strong>」 アプリケーション固有のキーと鍵。Twitter Developerのページで発行される。アプリケーション開発者以外に知らせてはいけず、通常は設定ファイルなどに記載してアプリケーションで読み込ませる。</li>
<li>「<strong>リクエストトークン、リクエストトークンシークレット</strong>」 アプリと連携する際にTwitterのサイトでログインをしてもらうが、そのログイン画面へリダイレクトさせるURLが発行されるタイミングと同じくらいで使うトークン。リダイレクトさせる前に取得し、クッキーなどで保持し後ほど自サイトにユーザーが戻ってきた時に照合させる。</li>
<li>「<strong>アクセストークン、アクセストークンシークレット</strong>」 そのアプリにおけるユーザー固有のキーと鍵。これと上記のコンシューマトークン＆シークレットがあればTwitterにアプリケーションでログインが可能になりタイムラインの取得などができるようになる。実際にはTwitter上の認証画面から返ってきた際に初めて取得できる。</li>
</ul>


<p>そして上記の言葉を使った、カタカナばかりでちょっと分かりにくい、開発の流れはこのようなものです。</p>

<ol>
<li>Twitter Developerのページにてアプリケーションを登録</li>
<li>アプリケーション固有のコンシューマトークンというキーとコンシューマトークンシークレットという鍵をもらう</li>
<li>アプリを実装。設定からコンシューマトークン＆シークレットを呼び出せるようにしておく</li>
<li>コンシューマトークン＆シークレットを元にリクエストトークンとリクエストトークンシークレットを作り出す</li>
<li>リクエストトークン＆シークレットをクッキーで保持しておく</li>
<li>Twitterの認証ページにリダイレクトさせる</li>
<li>コールバックURLにGETパラメータの引数付きで返ってくるのでそれを元にユーザー固有のアクセストークン、アクセストークンシークレットを取得</li>
<li>アクセストークン＆シークレットをクッキーで保持しておく</li>
<li>コンシューマキー＆シークレット、アクセストークン＆シークレットを使ってログイン、タイムラインなどを取得</li>
</ol>


<h3>サンプルアプリの方針</h3>

<p>Twitterログインをして自分のタイムラインを見られるような機能をサンプルとして作成したいのですが、
少々それだけだと味気ないです。
Perlのライブラリ置き場CPANを漁っていると「<a href="http://search.cpan.org/dist/Acme-Ikamusume/">Acme::Ikamusume</a>」なる興味深いモジュールを発見したのでそれを使ったアプリを考えてみます。このAcme::Ikamusume、動かすのにMeCabという形態素解析のソフトが必要なのが多少敷居が高いですが、簡単に使えてかつ面白いです。</p>

<pre> my $text = Acme::Ikamusume-&gt;geso('変更したいテキスト');
 </pre>

<p>とするとアニメ「イカ娘」でイカちゃんがしゃべるような言葉に変換されます。自分のTwitterのタイムラインがイカ娘変換されるとどうなるか！？おもしろいんじゃなイカ！？ってことでやってみます。ちなみに作者の富田さんが自身でイカ娘変換を簡単に試せるサービスとAPIを公開していますのでそちらもご参考ください。</p>

<ul>
<li><a href="http://ika.koneta.org/">侵略！ イカ娘変換でゲソ！</a></li>
</ul>


<p>実装の方針ですが、PerlのMojolicious Liteを使ったものとさせていただきます。上記の流れを最低限の機能で追うので他の言語でも応用できると思います。また、Mojolicious Liteのセッション管理は若干貧弱なためPlack::Sessionを代わりに、Twitter APIの処理にはNet::Twitter::Liteを使います。</p>

<h3>アプリケーションの登録とコンシューマキーの取得</h3>

<p>まず、<a href="https://dev.twitter.com/">Twitter Developer</a> のページでこれから作るアプリケーションの情報を登録します。</p>

<p><img src="http://farm8.staticflickr.com/7046/6874167300_4291f81cde.jpg" alt="Twitter Develper"></p>

<p>いくつかの項目は後から変更が効きますが「Name」の欄は変更がきかなかったり早い物勝ちだったりするので慎重に考えて入力しましょう。アプリケーションを登録したらいつでも「My Applications」からそのアプリを選んで、設定情報を確認することができます。コンシューマキー＆シークレットである「Consumer key」「Consumer secret」という文字列が表示されていると思うので、それを後ほど使います。</p>

<h3>アプリケーションの実装、設定からキーを呼び出す</h3>

<p>いよいよアプリケーションの実装に入っていきます。mojoコマンドを使ってアプリケーションの雛形を作ったら「myapp.conf」などの名前で設定ファイルを作り、そこにコンシューマキー＆シークレットを書き込みます。またアプリケーション内でConfig Pluginを使い、設定を呼び出します。</p>

<h4>myapp.conf</h4>

<pre> {
    consumer_key    =&gt; 'xxxxxxxxxxxxxxxxxxxxxx',
    consumer_secret =&gt; 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
};
 </pre>

<h4>myapp.pl</h4>

<pre> my $config = plugin('Config');
my $nt = Net::Twitter::Lite-&gt;new(
    consumer_key    =&gt; $config-&gt;{consumer_key},
    consumer_secret =&gt; $config-&gt;{consumer_secret},
);
 </pre>

<p>consumer_keyとconsumer_secretをそのまま渡してNet::Twitter::Liteのインスタンスを作ってそれを使い回していきます。</p>

<h3>Twitterログイン画面に飛ばす</h3>

<p>次に「/login」にアクセスするとTwitterのログイン画面に飛ぶために、URLを取得しリダイレクトさせる実装をします。
その際にリクエストトークン＆シークレットをセッションで保持しておくのを忘れないようにします。</p>

<pre> get '/login' =&gt; sub {
    my $self    = shift;
    my $session = Plack::Session-&gt;new( $self-&gt;req-&gt;env );
    my $url     = $nt-&gt;get_authorization_url(
        callback =&gt; $self-&gt;req-&gt;url-&gt;base . '/callback' );
    $session-&gt;set( 'token', $nt-&gt;request_token );
    $session-&gt;set( 'token_secret', $nt-&gt;request_token_secret );
    $self-&gt;redirect_to($url);
};
 </pre>

<p>「$nt-&gt;get_authorization_url」のcallbackパラメータで指定している通り、Twitter側でのログインの処理が終わると「/callback」に戻ってくるように指定しています。</p>

<h3>Twitterログイン画面から戻ってきた時の処理</h3>

<p>ということで次は「/callback」を実装します。GETメソッドのパラメータ「oauth_verifier」の値と照合させてアクセストークン＆シークレットを取得できます。それらの値をセッションで保持し、トップページにリダイレクトさせています。また、もしユーザーがTwitterのログイン画面でログインを拒否した場合には「denied=xxxxxxxx」というパラメータ付きで「/callback」に返ってくるのでその際はセッションのセットをしていません。</p>

<pre> get '/callback' =&gt; sub {
    my $self = shift;
    unless ( $self-&gt;req-&gt;param('denied') ) {
        my $session = Plack::Session-&gt;new( $self-&gt;req-&gt;env );
        $nt-&gt;request_token( $session-&gt;get('token') );
        $nt-&gt;request_token_secret( $session-&gt;get('token_secret') );
        my $verifier = $self-&gt;req-&gt;param('oauth_verifier');
        my ( $access_token, $access_token_secret, $user_id, $screen_name ) =
          $nt-&gt;request_access_token( verifier =&gt; $verifier );
        $session-&gt;set( 'access_token',        $access_token );
        $session-&gt;set( 'access_token_secret', $access_token_secret );
        $session-&gt;set( 'screen_name',         $screen_name );
    }
    $self-&gt;redirect_to('/');
};
 </pre>

<h4>ログイン後のホーム画面の処理</h4>

<p>セッションにはアクセストークン＆シークレットが保持された状態になるので、これでユーザーのタイムラインを取得することができるようになります。ホーム画面では「$nt-&gt;home_timeline」で取得したツイートにイカ娘変換をかけて配列リファレンスに入れ、そのままテンプレートに渡しています。テンプレートではその配列リファレンスやセッションに値が入っていればそのまま表示し、そうでなければログインしていない状態と見なしログインを促すリンクを張っておきます。</p>

<h4>myapp.pl</h4>

<pre> get '/' =&gt; sub {
    my $self    = shift;
    my $session = Plack::Session-&gt;new( $self-&gt;req-&gt;env );
    my $tweets;
    if ( $session-&gt;get('access_token') ) {
        $nt-&gt;access_token( $session-&gt;get('access_token') );
        $nt-&gt;access_token_secret( $session-&gt;get('access_token_secret') );
        for my $tweet ( @{ $nt-&gt;home_timeline } ) {
            next if $tweet-&gt;{user}{protected};
            $tweet-&gt;{text} = Acme::Ikamusume-&gt;geso( $tweet-&gt;{text} );
            push @$tweets, $tweet;
        }
    }
    $self-&gt;stash-&gt;{screen_name} = $session-&gt;get('screen_name');
    $self-&gt;stash-&gt;{tweets}      = $tweets;
    $self-&gt;render('index');
};
 </pre>

<h4>templates/index.html.ep</h4>

<pre> % if ( $screen_name ) {
&lt;h3&gt;&lt;a href="/"&gt;@&lt;%= $screen_name %&gt;さんのイカ娘タイムライン&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="/logout"&gt;ログアウト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
% }else{ 
&lt;ul&gt;
  &lt;li&gt;&lt;a href="/login"&gt;Twitterログイン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
% }

% if($tweets) {
&lt;hr /&gt;
% for my $tweet ( @$tweets ) {
&lt;p style="margin-bottom:1em;padding-bottom:1em;border-bottom:1px dotted #ccc;"&gt;
  &lt;img src="&lt;%= $tweet-&gt;{user}{profile_image_url} %&gt;" alt=""
       width="36" height="36" style="float:left;margin-right:1em;"/&gt;
  &lt;a href="http://twitter.com/&lt;%= $tweet-&gt;{user}{screen_name} %&gt;" 
     target="_blank"&gt;@&lt;%= $tweet-&gt;{user}{screen_name} %&gt;&lt;/a&gt;: &lt;%= $tweet-&gt;{text} %&gt;
  &lt;span style="display:block;clear:both;"&gt;&lt;/span&gt;
&lt;/p&gt;
% }
% }
 </pre>

<h3>ログアウトの実装</h3>

<p>最後にログアウトの実装をします。保持しているセッションをクリアして、トップページに遷移させます。</p>

<pre> get '/logout' =&gt; sub {
    my $self    = shift;
    my $session = Plack::Session-&gt;new( $self-&gt;req-&gt;env );
    $session-&gt;expire();
    $self-&gt;redirect_to('/');
};
 </pre>

<h3>デモとコードの在りか</h3>

<p>さてこれらのコードを組み合わせれば「イカ娘タイムライン的な何か」が完成です。</p>

<p><img src="http://farm8.staticflickr.com/7277/7020318307_796b72e7e4.jpg" alt="イカ娘タイムラインその2"></p>

<p>そのうち使えなくなってしまう可能性大ですが、一応今のところ動いている物をイカの、いや以下のURLでデプロイしておきました。機能は少ないですがあなたのイカ娘タイムラインを眺めることができると思います。</p>

<ul>
<li><a href="http://twitter-ikamusume.yusuke.be/">http://twitter-ikamusume.yusuke.be/</a></li>
</ul>


<p>また、ソースコード一式をgithubに置いておきます。</p>

<ul>
<li><a href="https://github.com/yusukebe/Twitter-Ikamusume">yusukebe/Twitter-Ikamusume</a></li>
</ul>


<p>こうやって作ってみるとタイムラインを見るだけじゃなくてイカ娘な発言もしたくなってくるでゲソ。
ってな感じでアプリを拡張したりするのもいいと思います！ということでお楽しみください。</p>

<h3>お知らせ</h3>

<p>メルマガ「ゆーすけべーラジオ」ではこうしたWebサービスにまつわるエッセイ風のテキストやデザイン思考について書いています。よろしければお試し購読を。</p>

<ul>
<li><a href="http://www.mag2.com/m/0001426750.html" title="ゆーすけべーラジオ">ゆーすけべーラジオ</a></li>
</ul>


