{
    "data" :  {
    "title": "「ボケて」のスケールアップとスケールアウト",
    "date": "2012-08-21 17:44:00 +0900 JST",
    "dir": "posts/2012/",
    "slug": "0821084404",
    "categories": ["tech"],
    "tags": ["Technologies","ボケて"]
}

---



<p>オモロキで鎌団子さんと二人で開発している写真で一言ボケるWebサービス「ボケて」。
バックエンドの改修作業、それに伴うバグ等の修正を施し、やっと落ち着いて来たので、
そのことについて書いておこうと思います。</p>

<h3>ボケてとは？</h3>

<p>改修作業の詳細に入る前に「ボケて」とは、を紹介します。
ボケては「お題」と呼ばれる「写真」に一言「ボケ」を加えて笑いをつくりだせるWebサービスです。</p>

<p><a href="http://yusukebe.com/archives/2012/08/21/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202012-08-21%2017.43.31.png"><img alt="スクリーンショット 2012-08-21 17.43.31.png" src="http://yusukebe.com/archives/assets_c/2012/08/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202012-08-21%2017.43.31-thumb-400x370-243.png" width="400" height="370" class="mt-image-none" style=""></a></p>

<p>ユーザーはお題写真のアップロードやそうした写真に対するボケのテキストを入力でき、
最新のものや評価されたお題とボケを見ていくことができます。
評価の高いものはやっぱり面白くて見てると吹き出しちゃうものもたくさんあります（当社比）。</p>

<p>開発は上記した通り鎌団子さんと二人でやっていて、
鎌団子さんがデザインやHTML絡み、
僕がバックエンドやシステム周りを行っています。</p>

<h3>5月13日、爆発</h3>

<p>さて、そのボケてですが、今年の「5月13日」にアクセスが急増します。
2chまとめサイトもしくはNAVERまとめに掲載されたのが主な原因だと思われます。
そのPVは今までと比べておよそ10倍弱。
いわゆる「スラッシュドット効果」が起こり、
その時点でのスペックのサーバでは捌ききれなくなってしまいます。
しかも、このPVの増加は一時的なものではなく、常に高いまま...
監視ツールで「アクセスして30秒経ったらタイムアウトエラー」と見なし、アラートをメールさせる設定にしていたのですが、それがiPhoneに飛びまくり...
サーバ側のアプリケーションやDBをそのアクセスに対応できるよう改善しようとしたところ...</p>

<h3>フレームワークの変更とリライト</h3>

<p>アクセスが増加した当時のボケては3年前に書かれたシステムだったのですが、
それがPerlのフレームワークCatalystでつくられてたんですよね。
で、そのソースを手元の環境に持ってきて立ち上げようとしたんですが、
モジュールのバージョンの差やPluginモジュールを多様して依存したために、
「動かない」んですよ、これがまた。</p>

<p>動かないってことは当然アプリケーション側を書き換えなくていけないわけですが、
その量が大きくなってしまいそうな予感。さらには最近僕は個人的にCatalystを触っておらず、
Mojoliciousばかり。WAFにCatalystほど重厚なものはいらないと思いだしていました。
てことで「いっちょ頑張るか」という具合でフレームワークをCatalystからMojoliciousへと変更させたボケてのアプリをつくることにしました。</p>

<p>Controller部分はもちろん全部書き換えて、さらに内部で使っているAPI部分もかなり変更して、
コーディングすること1ヶ月ほどでした。</p>

<h3>スケールアウトしやすい構成と実装</h3>

<p>その際、アクセスが増加している状態に耐えうるような設計にしました。
後述するキャッシュの利用ももちろんですが、以下のような項目です。</p>

<ul>
<li>DBのレプリケーション構成</li>
<li>DBの参照系は生DBIを使った、更新系はDBIx::Skinnyを現在使用中</li>
<li>DBはMySQL InnoDBで</li>
<li>KVS等の技術は使わず、使い慣れているMySQL+Memcachedで</li>
<li>フロントサーバとアプリケーションサーバを物理的に分ける</li>
</ul>


<p>また、Mojoliciousをうまいこと使って、Controllerから内部APIやModelを呼び出すときには、</p>

<pre class="code">my ($bokes, $pager) = $self-&gt;model('Boke')-&gt;get_recent_entries();</pre>

<p>と直感的な記述で行えるようにしました。Validationの処理もFormの定義をしておけば、こんな感じでできます。</p>

<pre class="code">if($self-&gt;form('Boke')-&gt;has_error) {
    return $self-&gt;render_fill('/boke/post');
}</pre>

<h3>キャッシュ戦略</h3>

<p>参照されるものを種類に分けてmemcachedで一定時間キャッシュさせています。
まぁありきたりなことですが、これによりDBサーバへの負荷を低減できます。</p>

<p>で、参照系は生のDBIを使って参照させてるのですが、簡単なラッパーをつくってその生DBIを使いやすくしてます。O/R Mapperは結果をオブジェクトを返しますが、そのラッパーはハッシュレフで返してくれます。以下の例だと「$self-&gt;dbx」がそれなんですが、「search」メソッドはこのように使います。</p>

<pre class="code">$bokes = $self-&gt;dbx-&gt;search(
    'boke', [ $cond ], [ { -desc =&gt; 'id' } ],
    {
        limit  =&gt; $limit,
        offset =&gt; $offset,
        expire =&gt; 60 * 60,
    }
);</pre>

<p>条件にあう、最新のボケ一覧を取得していますが、「expire」という引数を与えると自動的にクエリーからキーを生成してそのキーに結果をキャッシュするという仕組みになっています。強制的にキーを組み立てて、そのキーに当てはまるキャッシュを強制的に削除するメソッドも用意しているので、場合によってキャッシュのコントロールができるわけです。</p>

<p>また、オブジェクトやオブジェクト全体のキャッシュだけではなく、右側のサイドバーのHTMLをキャッシュさせるなどの工夫もしております。</p>

<h3>デルタ版リリース</h3>

<p>ってことでスケールアップしたサーバを用意してそこへデプロイ。「ボケてデルタ版」を7月19日にリリースしました。うまいこと割とサクサクに動くようになりました。ただ、案の定漏れていたバグが多数あり、都度都度対応しました。テストが少ないのも原因なのでこの辺はしっかりさせたいところです。</p>

<h3>まとめ</h3>

<p>以上、ボケての改修作業について紹介しました。より細かい解説はYAPC::Asiaというカンファレンスで紹介したいと思いますので是非お越しください。そしてボケてをよろしくお願いします！</p>

<ul>
<li><a href="http://bokete.jp/">ボケて（bokete）: 写真で一言ボケるウェブサービス</a></li>
<li><a href="http://yapcasia.org/2012/talk/show/dbe56d5c-ac3a-11e1-8ef2-22926aeab6a4">YAPC::Asia 2012 :  「新しい」を生み出すためのWebアプリ開発とその周辺 </a></li>
</ul>



 
}
