{
    "data" :  {
    "title": "Facebookのポスト内容をWebアプリケーションとして実行する",
    "date": "2012-12-15 11:17:00 +0900 JST",
    "dir": "posts/2012/",
    "slug": "1215021727",
    "categories": ["tech"],
    "tags": ["Perl"]
}

---



<h3>元★ネタ</h3>

<ul>
<li><a href="http://bulknews.typepad.com/blog/2009/08/run-a-tweet-like-perl.html">Run a tweet like Perl - bulknews.typepad.com</a></li>
</ul>


<h3>前書き</h3>

<p>またまた、なんだかよく分からないと思われる記事のタイトルだと思うけど、間違ってはいないと思う。
miyagawaさんがTwitterのツイート内容をPerlスクリプトとして実行するっていう<del>変態的</del>クールなことを
やっていたのですよってのは<a href="http://yusukebe.com/archives/20121215/015851.html">前回の記事</a>のおさらい。</p>

<p>Perlコードを書いたツイートのURLを（ちょっと編集して）-e の引数に渡すとそれが実行出来ちゃう。</p>

<pre class="code">perl -Mtwitter -e http://m.twitter.com/yusukebe/status/279638603611664384</pre>

<p>でも、Twitterは140文字まで。どうしてもそれを超えるコードをなんとなくどこかに張ってから実行するという
<strong>誰得</strong> なことをしたくなったのでFacebookで似たようなことが出来ないか考えてみた。</p>

<h3>やること</h3>

<p>Facebookの場合、ポストの内容を取得するのにOAuth認証が必要になるので、ならば！いっそのこと
Webアプリにしてしまえばいい。Facebookの投稿がそのままWebアプリとして実行されてブラウザで確認が出来る
という具合だ。フローはこうなる。</p>

<ol>
<li>コードをFacebookに投稿</li>
<li>これから紹介する<strong>facebook.pm</strong>をロードしつつポストのURLを引数で指定する</li>
<li>サーバが立ち上がるので「<a href="http://localhost:5000/">http://localhost:5000/</a>」とかにアクセスする</li>
<li>OAuth認証ダイアログが開くので許可する</li>
<li>コールバックされるとFacebookの投稿が実行されて標準出力部分がページに描画される</li>
</ol>


<h3>facebook.pm</h3>

<p>とりあえず以下のfacebook.pmを用意する。</p>

<pre class="code">package facebook;
use Plack::Request;
use Plack::Response;
use Plack::Runner;
use Plack::App::URLMap;
use URI::Escape;
use LWP::Simple;
use JSON;
use HTML::Entities;
use Encode;

my $id;
use overload "/" =&gt; sub { $id = $_[1]; $_[0] }, fallback =&gt; 1;

sub import {
    my $pkg = caller;
    *{"$pkg\::com"} = *{"$pkg\::posts"} = sub() { bless {}, __PACKAGE__ };
}

my $app_id     = $ENV{RUNFB_APP_ID};
my $app_secret = $ENV{RUNFB_APP_SECRET};

my $app_redirect = sub {
    my $req          = Plack::Request-&gt;new(shift);
    my $uri          = uri_escape_utf8( $req-&gt;base . 'callback' );
    my $redirect_url = "http://www.facebook.com/dialog/oauth?"
      . "client_id=$app_id&amp;redirect_uri=$uri&amp;scope=read_stream";
    my $res = Plack::Response-&gt;new(302);
    $res-&gt;redirect($redirect_url);
    return $res-&gt;finalize;
};

my $app_callback = sub {
    my $req       = Plack::Request-&gt;new(shift);
    my $code      = $req-&gt;param('code');
    my $uri       = uri_escape_utf8( $req-&gt;base );
    my $token_url = "https://graph.facebook.com/oauth/access_token?"
      . "client_id=$app_id&amp;redirect_uri=$uri&amp;client_secret=$app_secret&amp;code=$code";
    my $access_token = get($token_url);
    my $json         = get("https://graph.facebook.com/$id?$access_token");

    my $data    = decode_json($json);
    my $message = $data-&gt;{message};
    my $result;
    {
        local *STDOUT;
        open STDOUT, '&gt;', \$result;
        eval $message;
    }
    my $res = Plack::Response-&gt;new(200);
    $res-&gt;content_type('text/html');
    $res-&gt;body( encode_utf8($result) );
    return $res-&gt;finalize;
};

END {
    my $urlmap = Plack::App::URLMap-&gt;new;
    $urlmap-&gt;map( '/'         =&gt; $app_redirect );
    $urlmap-&gt;map( '/callback' =&gt; $app_callback );
    my $app    = $urlmap-&gt;to_app;
    my $runner = Plack::Runner-&gt;new;
    $runner-&gt;parse_options(@ARGV);
    $runner-&gt;run($app);
}</pre>

<p>gistにも上げておきました。</p>

<ul>
<li><a href="https://gist.github.com/4290677">Run a facebook post like a Web Application.</a></li>
</ul>


<p>ああ、そういえば実行するにはFacebookアプリの登録が必要なんで、ソレをアレしたら</p>

<pre class="code">RUNFB_APP_ID
RUNFB_APP_SECRET</pre>

<p>を環境変数に設定しておくとよいでしょう。</p>

<h3>やってみる</h3>

<p>例えば、こんなポストをしたとします。</p>

<p><img alt="スクリーンショット 2012-12-15 11.16.49.png" src="http://yusukebe.com/archives/2012/12/15/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202012-12-15%2011.16.49.png" width="645" height="235" class="mt-image-none" style=""></p>

<p>内容はこういう簡単な出力するコード。</p>

<pre class="code">my $message = 'Good Morning!!';
print "&lt;big&gt;$message&lt;/big&gt;";</pre>

<p>で、こいつのパーマリンクURLが「<a href="https://www.facebook.com/yusuke.wada/posts/10151373772205030">https://www.facebook.com/yusuke.wada/posts/10151373772205030</a>」なのを
覚えておく。上記のfacebook.pmをある場所に置いたら、URLを少しいじって「-e」の引数にして実行してみましょう！</p>

<pre class="code">$ perl -Mfacebook -e https://m.facebook.com/yusuke.wada/posts/10151373772205030</pre>

<p>すると、Webアプリケーションが立ち上がるので、デフォルトでは「<a href="http://localhost:5000/">http://localhost:5000/</a>」にブラウザがからアクセス！認証画面に飛んで、最終的には...</p>

<p><img alt="スクリーンショット 2012-12-15 11.21.38.png" src="http://yusukebe.com/archives/2012/12/15/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202012-12-15%2011.21.38.png" width="206" height="104" class="mt-image-none" style=""></p>

<p>Facebookポストが実行され、標準出力部分がページで見れるはずです！
これで、アイドルの水着をひたすら表示するスクリプトをFacebookにポストしたらすぐ、Webアプリになりますね！</p>

<h3>まとめ</h3>

<p>作ってて楽しかったのですが、誰得感満載ですね。
これも例によってむやみに危険なポストを実行しないように気をつけましょう！</p>


 
}
