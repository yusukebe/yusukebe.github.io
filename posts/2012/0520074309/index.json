{
    "data" :  {
    "title": "Rubyやってみる！（新おっぱいスクリプトもあるぉ）",
    "date": "2012-05-20 16:43:00 +0900 JST",
    "dir": "posts/2012/",
    "slug": "0520074309",
    "categories": ["tech"],
    "tags": ["Technologies","Ruby"]
}

---



<p>某プロジェクトでRuby on Rails使うっていぅんで
「<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274068668/kamawada-22/ref=nosim/">アジャイルWebアプリケーション開発</a>」本なんて買ってチュートリアルとかやってます。
ただ、Ruby自体なにも分からないので、Rails覚えてもどれだけできるかがよく分からなす。
ってことでRubyを勉強する！と先ほど書いてみた4つのスクリプトをご紹介。間違ってたらツッコミよろしくおくんなまし。
とはいえ簡単なやつだよ！でも新しいおっぱいダウンロードスクリプトもあるよ！</p>

<h3>open-uri.rb</h3>

<p>まずは、Perlで言うLWP的なもの、つまりHTTPクライアントでこの日記のHTMLを取得してみるよー。
あら、簡単だねっ。</p>

<pre class="code">require "open-uri"

html = open("http://yusukebe.com/").read;
p html</pre>

<h3>twitter-search.rb</h3>

<p>お次に「お得意の」APIを叩く系をやってみる。Twitter Search APIが簡単なので、
そこから「ruby」という発言を取ってきて表示させます。
Perlで言うURIモジュールの「query_form」メソッドが欲しかったので、Addressable::URIを使いましたぉ。</p>

<pre class="code">require "addressable/uri"
require "open-uri"
require "json"

uri = Addressable::URI.parse('http://search.twitter.com/search.json')
uri.query_values = { :q =&gt; "ruby", :lang =&gt; "ja" }
json = open(uri).read
ref = JSON.parse(json)
ref["results"].each do |tweet|
  puts "@" + tweet["from_user"] + " : " + tweet["text"]
end</pre>

<h3>sinatra-oauth.rb</h3>

<p>今度はWebアプリもつくっちゃおう！sinatra使ってFoursquareのOAuth v2なログインを試してみるよ。
sinatraのsessionを有効にするために「enable :sessions」しなくてはいけないところにハマったけど、
OAuthとかは、APIのドキュメントをしっかり読めばすぐ出来たよ。</p>

<pre class="code">require "sinatra"
require "addressable/uri"
require "pit"
require "open-uri"
require "json"

enable :sessions, :logging

config = Pit.get('foursquare.com')

get '/' do
  @name = nil
  if session[:access_token]
    uri = Addressable::URI.parse('https://api.foursquare.com/v2/users/self')
    uri.query_values = {
      :oauth_token =&gt; session[:access_token]
    }
    json = open(uri).read
    @name = JSON.parse(json)["response"]["user"]["firstName"]
    logger.info @name
  end
 erb :index
end

get '/login' do
  uri = Addressable::URI.parse("http://foursquare.com/oauth2/authenticate")
  uri.query_values = {
    :client_id =&gt; config["client_id"],
    :response_type =&gt; 'code',
    :redirect_uri =&gt; request.base_url + '/callback',
  }
  redirect uri.to_s
end

get '/logout' do
  session[:access_token] = nil
  redirect "/"
end

get '/callback' do
  code = params[:code]
  uri = Addressable::URI.parse('https://foursquare.com/oauth2/access_token')
  uri.query_values = {
    :client_id =&gt; config["client_id"],
    :client_secret =&gt; config["client_secret"],
    :grant_type =&gt; 'authorization_code',
    :redirect_uri =&gt; request.base_url + '/callback',
    :code =&gt; code,
  }
  json = open(uri).read
  data = JSON.parse(json)
  session[:access_token] = data["access_token"]
  redirect '/'
end

__END__

@@ index
&lt;% if @name %&gt;
Hi, &lt;%= @name %&gt; &lt;br /&gt;
&lt;a href="/logout"&gt;Logout&lt;/a&gt;
&lt;% else %&gt;
&lt;a href="/login"&gt;Login&lt;/a&gt;
&lt;% end %&gt;</pre>

<h3>yahoo-oppai.rb</h3>

<p>最後はお待ちかね、おっぱいダウンロードスクリプトだよ。
今回、ちょっと工夫していて、まずYahooのプレミアムなんちゃらイメージサーチってのを使いつつ、
Tumblrからの画像に絞って検索をかけてるよー。こうすることで、高品質なおっぱい画像が集まると思うんだ。</p>

<h4>＊追記＊</h4>

<p><a href="http://twitter.com/sugamasao">sugamasao</a>さんからツッコミいただきまして、インクリメント的な書き方は count += 1 でおkらしいです！ count = count + 1 とださく書いていたのを修正しておきました。</p>

<pre class="code"># -*- coding: utf-8 -*-
require "pit"
require "addressable/uri"
require "open-uri"
require "xmlsimple"
require "digest/md5"
require 'pathname'

dir = Pathname.new('./data')
config = Pit.get("yahoo-api")
count = 1
page = 1

loop do
  uri = Addressable::URI.parse("http://search.yahooapis.jp/PremiumImageSearchService/V1/imageSearch")
  uri.query_values = {
    :appid =&gt; config["appid"],
    :query =&gt; 'おっぱい',
    :results =&gt; 20,
    :adult_ok =&gt; 1,
    :format =&gt; 'jpeg',
    :site =&gt; 'tumblr.com',
    :start =&gt; (page - 1) * 20 + 1
  }
  res = open(uri) rescue break
  xml = res.read
  data = XmlSimple.xml_in(xml)
  break unless data["Result"]
  data["Result"].each do |item|
    url = item["Url"][0]
    filename = Digest::MD5.hexdigest(url) + '.jpg'
    filepath = dir + filename
    puts "#{count} : Download #{url} ..."
    res = open(url) rescue next
    open(filepath,'w').print res.read
    count += 1
  end
  page += 1
end</pre>

<p>実行すると... 1000枚ほどのおっぱい画像が集まったー！</p>

<p><a href="http://yusukebe.com/archives/2012/05/20/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202012-05-20%2016.42.46.png"><img alt="スクリーンショット 2012-05-20 16.42.46.png" src="http://yusukebe.com/archives/assets_c/2012/05/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202012-05-20%2016.42.46-thumb-400x250-190.png" width="400" height="250" class="mt-image-none" style=""></a></p>

<p><br></p>

<hr>

<p><br></p>

<p>ベストプラクティス的なことが分からないけれど、なんとか出来たよ！Rubyいいね！</p>

<h3>宣伝</h3>

<p>メルマガやってます→ <a href="http://www.mag2.com/m/0001426750.html">ゆーすけべーラジオ</a></p>


 
}
