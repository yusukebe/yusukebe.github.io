+++
Categories = ["tech"]
Description = "   昨日行われた Catalyst Conference #1 に行ってきました。ここで言う Catalyst とは Perl の Web Application Framework なんですが、  発表者のうち Yappo さんだけが "
Tags = ["Perl"]
date = "2008-04-23T12:58:00+09:00"
title = "Catalyst Conference #1 に行ってきました"
author = "kamawada"
archive = ["2008"]
draft = false
+++


<p>
  昨日行われた <strong>Catalyst Conference #1</strong> に行ってきました。
ここで言う Catalyst とは Perl の Web Application Framework なんですが、
  発表者のうち Yappo さんだけが Cisco の<del>ルータ</del>スイッチの話をしようとしててびっくりしました。
それはさておき、Talk の内容は以下のようなものでした。
</p>
<ul>
  <li>
<a href="http://blog.hatena.ne.jp/dann/">id:dann</a> のCatalystとMVC論 (15min)</li>
  <li>
<a href="http://blog.hatena.ne.jp/ikasam_a/">id:ikasam_a</a> によるCatalyst::Controller::Resources (15min)</li>
  <li>$c &lt;3 C (charsbar) (15min) </li>
  <li>コピペをしないための10の方法 (typester) (5min)</li>
  <li>Model::Adaptor的な話 (@hidek) (5min)</li>
  <li>yappo 2924あたりでも持ってきます (5min)</li>
  <li>Catalyst☆Complex tokuhirom (5min)</li>
</ul>
<p>
皆さん Catalyst Conference の癖に Catalyst を DIS りつつ、それを解決するためのそれぞれの方法や考え方を提案というパターンが主で、非常に面白かったです。
特に <a href="http://blog.hatena.ne.jp/dann/">id:dann</a> さんと <a href="http://blog.hatena.ne.jp/ikasam_a/">id:ikasam_a</a> さんはブログで Catalyst のネタを結構書いているのですが、今回実際にリアルの場での発表で、それぞれの考えを知ることができてよかったです。<a href="http://blog.hatena.ne.jp/ikasam_a/">id:ikasam_a</a> さんの Catalyst::Controller::Resources 、今まで触ったことがなかったのですが、発表聞くとかなりよさげなので使ってみたいと思います。
</p>
<p>
<img alt="Catalyst Conference" class="at-xid-6a0133f4781589970b015435b6f235970c" src="http://yusukebe.typepad.jp/.a/6a0133f4781589970b015435b6f235970c-pi">
</p>
<p>
自分が Catalyst を使うケースって、仕事の受託開発ではほとんどなくて、pulpsite.net などで公開している yusukebe products が主です。
よって、全くの個人で開発していることと、サービスが小規模であるという点で、今回発表された方々とは多少違ったコンテキストで Catalyst を使っているのかなぁと感じました。
それを踏まえていい機会なので、Catalyst を今まで触ってきて、多少工夫しているところ、思っていることを（ほんの少し＆よく知られているものですが）挙げてみました。
</p>
<dl>
  <dt>Controller にロジックを書くのはよくない</dt>
  <dd style="margin-left:15px">少量のメソッドだったら MyApp.pm ?<br>
  モジュール化できるものはモジュール化(POPO)させる＋ Model::Adaptor<br>
  例: Web API / fetch して parse する / WebService::Simple<br>
    Logic を扱う名前空間を作ってそこに置く<br>
    →再利用性、テストがやりやすい
  </dd>
  <dt>script/myapp_create.pl model ...</dt>
  <dd style="margin-left:15px">自前で DBIx::Class::Schema::Loader::make_schema_atを呼び出すスクリプトを作った方がいい</dd>
  <dt>運用の時、アクセスの多い静的ファイルを Catalyst でサーブするのはマジ無い</dt>
  <dd style="margin-left:15px">mod_perl で処理する必要の無い静的コンテンツは mod_perl で扱わない</dd>
  <dt>Config の YAML を環境によって書き換えてる</dt>
  <dd style="margin-left:15px">myapp_local.ymlを使う、最近はじめて知った</dd>
  <dt>CLI から model というか DBIC を呼ぶ時にどうするか</dt>
  <dd style="margin-left:15px">CLI スクリプトに Catalyst の myapp.yml で定義した情報をコピペしがち、DRYじゃない＞＜<br>
    ベストな解決策はなんだろう
  </dd>
</dl>
<p>
昔のコードとか今見返すととりあえず動けばいいや的にテラひどいコードになってるんですが（今もひどいが）、
最近になって再利用性とか URI の設計とか気にしだしました。
今回の発表内容や皆さんのブログの記事などで、もっと勉強していきたいと思います。
</p>
<p>
  あーあと、補足として感じたことは、今回来れなかった人を含めどのくらいの人がどのように Catalyst を使っているのかもっと知りたいと思いました（<del>ルータ</del>スイッチも含めるとYappoさんは自宅で Catalyst を使っているということで興味深い）。
</p>
<p>
第2回もあるかもしれないということで、とりあえず
発表者の皆さん、お疲れさまでした！＆会場を提供してくれたサイボウズラボに感謝！
</p>

