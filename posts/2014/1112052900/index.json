{
    "data" :  {
    "title": "なんだかんだ Test::JSON::RPC::Autodoc をつくった",
    "date": "2014-11-12 05:29:00 +0900 JST",
    "dir": "posts/2014/",
    "slug": "1112052900",
    "categories": ["tech"],
    "tags": []
}

---



<h3>Autodoc について</h3>




<p>RESTfulもしくはそれに準ずるWeb APIやJSON-RPCなどのバックエンドとモバイルアプリ間の通信を実装する案件はおそらく昨今非常に多いかと思われます。弊社もJSON-RPCを裏方に持ち、iOSとAndroidアプリ、もしくはフロントのWebがそれを呼び出す仕組みを持っています。その際にWeb APIやRPCを呼び出すための「ルール」をどのようにお互いの技術者が共有するか？は僕らの課題でもありました。そのルールとして</p>




<ul>
<li>リクエストパラメータ</li>
<li>パラーメータごとの型やお約束</li>
<li>リクエストのサンプル</li>
<li>レスポンスの値</li>
<li>サンプルリクエストに対するレスポンス</li>
</ul>


<p>などがドキュメント化されていると便利でしょう。それは「手で仕様書を書く」という一点張りで解決出来ることではありますが、日々追加、修正されるAPIに対しては効率が悪いと感じてしまいます。そこで、もう去年の話ですが「 <strong>Autodoc</strong> 」というライブラリしいては「概念」を見つけました。</p>




<p>元々Autodocは <em>r7kamura</em> 氏が作ったRubyのライブラリです。</p>




<ul>
<li><a href="https://github.com/r7kamura/autodoc">https://github.com/r7kamura/autodoc</a></li>
</ul>


<p>Rails/Rackのアプリケーションに対して、リクエストを送るテストを書くと、上記で上げたようなリクエストパラメータやレスポンスの情報がMarkdown形式でドキュメントとして保存されます。それを例えば、GitHubのレポジトリなどにpushすれば自動的にMarkdownがレンダリングされるので、Web APIのアプリケーションでは呼び出しとそれに対するレスポンスが一目瞭然というわけです。</p>




<p>簡単に言えば</p>




<blockquote>
  <p>テストを回すだけでWeb APIとかのドキュメントを履いてくれる</p>
</blockquote>




<p>ってことで、こんな効果があります。</p>




<ul>
<li>仕様書を書く必要が無い</li>
<li>MarkdownのURLなど「ありか」を教えるだけで仕様を共有できる</li>
<li>自然と結合的なテストを書くようになる</li>
</ul>


<p>このライブラリを受けて、 <em>moznion</em> 氏がPerlに移植したのが Test::JsonAPI::Autodoc となります。</p>




<ul>
<li><a href="https://metacpan.org/release/Test-JsonAPI-Autodoc">https://metacpan.org/release/Test-JsonAPI-Autodoc</a></li>
</ul>


<p>しっかりと <a href="https://metacpan.org/pod/Test::JsonAPI::Autodoc#Does-this-module-correspond-to-JSON-RPC">JSON-RPCにも対応している旨がPODに書いてある</a> のではありますが、僕は僕で自らのプロダクトで使うために「Shodo」というライブラリをつくりました。</p>




<ul>
<li><a href="https://metacpan.org/release/Shodo">https://metacpan.org/release/Shodo</a></li>
</ul>


<p>Shodo ディストリビューションに含まれる「Test::Shodo::JSONRPC」は去年から弊社のプロダクトで使われ続けていて、 Autodoc の利点である、仕様の共有を楽にするってことと、テストを必然的に書くようになるという恩恵を受けることになりました。実際、iOS/Androidアプリの開発はパートナー会社のエンジニアさんとやっているのですが、GitHubのプライベートレポ内にあるドキュメントのURLを教えているため、仕様に関する議論は最低限で済みます。</p>




<h3>Test::JSON::RPC::Autodoc</h3>




<p>はい。以上、前置き終わりです。</p>




<p>主題は先ほど「 <strong>Test::JSON::RPC::Autodoc</strong> 」をリリースした件です。実は、Autodoc に対応する形で、この頃では <strong>JSON Schema</strong> と呼ばれるJSONに対するデータ定義を用いる手法も取られています。JSON Schema 自信を仕様とみなしドキュメントを生成したり、データのバリデーションルールを統一化する流れです。JSON Schema についても r7kamura 氏のBlog記事が分かりやすいですね。</p>




<ul>
<li><a href="http://r7kamura.hatenablog.com/entry/2014/06/10/023433">http://r7kamura.hatenablog.com/entry/2014/06/10/023433</a></li>
</ul>


<p>で、まぁそんな時に「 <strong>何をいまさら</strong> 」って感じですが、</p>




<ul>
<li>今まで使ってきた <code>Shodo</code> について「キラキラネーム」を付ける必要が無く何をやるモジュールか分かりにくい</li>
<li>僕が使うのは特に「JSON-RPCの Autodoc 機能」なのでそれに特化させれば良い</li>
<li>JSON Schema に関しては興味深いがスキーマ定義を管理するのが少々面倒でまた現在バリデーションルールを他の言語実装と共有必要は無い</li>
<li>欲しいのはドキュメントでありルールをテストの中に書いてそれを自動生成するのは1年間使ってきて有益だと判断出来た</li>
<li>と「割り切る」</li>
<li>
<code>Shodo</code> の中でも修正した点があった</li>
</ul>


<p>以上の理由で Test::JSON::RPC::Autodoc をつくった形です。</p>




<p>使い方はJSON-RPCなPSGIアプリケーションに対して…</p>




<pre class="code">my $app = MyApp-&gt;new-&gt;to_psgi();
my $test = Test::JSON::RPC::Autodoc-&gt;new(
    document_root =&gt; './document',
    app =&gt; $app,
);

my $req = $test-&gt;new_request();
$req-&gt;params(
    language =&gt; { isa =&gt; 'Str', default =&gt; 'English', required =&gt; 1, documentation =&gt; 'Your language' },
    country =&gt; { isa =&gt; 'Str', documentation =&gt; 'Your country' }
);
$req-&gt;post_ok('echo', { language =&gt; 'Perl', country =&gt; 'Japan' });

my $res = $req-&gt;response();
is $res-&gt;code, 200;
my $data = $res-&gt;from_json();
is_deeply $data-&gt;{result}, { language =&gt; 'Perl', country =&gt; 'Japan' };

$test-&gt;write('sample.md');
done_testing();</pre>




<p>このように使います。Test::JSON::RPC::Autodocインスタンスの <code>new_request</code> メソッドでつくったオブジェクトはHTTP::Requestを継承したものとなり、<code>params</code> メソッドでRPCをコールする際のパラメータを定義します。内部でData::Validatorを使っているのでそれに近い記法でルールを書きます。また、<code>post_ok</code> もしくは <code>post_not_ok</code> メソッドで実際のレスポンスが正しく返却されているかもテストします。</p>




<p>レスポンスのオブジェクトはHTTP::Responseのインスタンスですが、 <code>from_json</code> メソッドを追加してレスポンスボディを簡単にJSONからPerl-Objectへ変換出来るようにしました。最後は、Test::JSON::RPC::Autodocの <code>write</code> メソッドを使って予め指定していたドキュメントルートへMarkdownファイルを書き出すことが可能です。</p>




<p>そのMarkdownをGitHubで見ると以下のような見栄えになります。</p>




<p><img src="http://38.media.tumblr.com/c8bd404c549ff33f68e6065cb1a095ae/tumblr_inline_newunpP22U1qb2ehr.png" alt="RPC Document"></p>




<p>先ほどCPANinzeしたばかりで、これから弊社プロダクトで使っていくところです。似たような要望がある方は少ないかもですが、よかったら使ってみてください！</p>




<ul>
<li><a href="https://metacpan.org/release/Test-JSON-RPC-Autodoc">https://metacpan.org/release/Test-JSON-RPC-Autodoc</a></li>
<li><a href="http://search.cpan.org/dist/Test-JSON-RPC-Autodoc/">http://search.cpan.org/dist/Test-JSON-RPC-Autodoc/</a></li>
</ul>


<h3>PS.</h3>




<p>全然関係ないけど今年も81忘年会やるからどんな世代の方もWelcome!</p>




<ul>
<li><a href="https://atnd.org/events/58716">https://atnd.org/events/58716</a></li>
</ul>



 
}
